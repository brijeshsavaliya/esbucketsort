[
 "BOOTSTRAP",
 {
  "defaultCharset": "UTF-8",
  "pidString": "66624@BrijeshS-2.fios-router.home",
  "systemProperties": {
   "awt.toolkit": "sun.lwawt.macosx.LWCToolkit",
   "es.logger.level": "WARN",
   "file.encoding": "UTF-8",
   "file.encoding.pkg": "sun.io",
   "file.separator": "/",
   "ftp.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "gopherProxySet": "false",
   "http.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "java.awt.graphicsenv": "sun.awt.CGraphicsEnvironment",
   "java.awt.headless": "true",
   "java.awt.printerjob": "sun.lwawt.macosx.CPrinterJob",
   "java.class.path": "/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/classes/test:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/resources/test:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/classes/main:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/resources/main:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-core/5.4.0-snapshot-1715952/84685d37a34b4d87e2928566ed266a7f005ca67d/lucene-core-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-analyzers-common/5.4.0-snapshot-1715952/feaf885ed4155fb7202c1f90ac2eb40503961efc/lucene-analyzers-common-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-backward-codecs/5.4.0-snapshot-1715952/5b5b5c950b4fcac38cf48fab911f75da61e780fa/lucene-backward-codecs-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-grouping/5.4.0-snapshot-1715952/ff92011208ed5c28f041acc37bd77728a89fc6a5/lucene-grouping-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-highlighter/5.4.0-snapshot-1715952/5d46f26a6cb36aede89b8728b6fcbc427d4f9416/lucene-highlighter-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-join/5.4.0-snapshot-1715952/726ea07bbfdfbfbee80522353496fc6667dc33c9/lucene-join-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-memory/5.4.0-snapshot-1715952/d8d7a7b573a4cfc54745a126e905ccfd523b7a24/lucene-memory-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-misc/5.4.0-snapshot-1715952/cd9d4fb4492bd2680cea2f038a051311329f6443/lucene-misc-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-queries/5.4.0-snapshot-1715952/a1a04d191443e51f992ed3dd02d0e14fd48493c9/lucene-queries-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-queryparser/5.4.0-snapshot-1715952/c4d34b29b8b14ad3deb300a6d699e9d8965a3c2c/lucene-queryparser-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-sandbox/5.4.0-snapshot-1715952/bf45dbd653d66ce9d2c3f19b69997b8098d8b416/lucene-sandbox-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-spatial/5.4.0-snapshot-1715952/2bddfda70f5c657064d12860b03c2cd8a5029bfc/lucene-spatial-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-spatial3d/5.4.0-snapshot-1715952/881b8cd571fb3ccdcc69f1316468d816812513fb/lucene-spatial3d-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-suggest/5.4.0-snapshot-1715952/466e2bc02f45f04cbf516e5df78b9c2ebd99e944/lucene-suggest-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.elasticsearch/securesm/1.0/c0c6cf986ba0057390bfcc80c366a0e3157f944b/securesm-1.0.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/commons-cli/commons-cli/1.3.1/1303efbc4b181e5a58bf2e967dc156a3132b97c0/commons-cli-1.3.1.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.carrotsearch/hppc/0.7.1/8b5057f74ea378c0150a1860874a3ebdcb713767/hppc-0.7.1.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/joda-time/joda-time/2.8.2/d27c24204c5e507b16fec01006b3d0f1ec42aed4/joda-time-2.8.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.joda/joda-convert/1.2/35ec554f0cd00c956cc69051514d9488b1374dec/joda-convert-1.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.6.2/123f29333b2c6b3516b14252b6e93226bfcd6e37/jackson-core-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-smile/2.6.2/395d18c1a1dd730b8026ee59c4067e5d2b45ba6e/jackson-dataformat-smile-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.6.2/4ae23088dd3fae47c66843f2e4251d7255ee140e/jackson-dataformat-yaml-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-cbor/2.6.2/1e13c575f914c83761bb8e2aca7dfd9e4c647579/jackson-dataformat-cbor-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/io.netty/netty/3.10.5.Final/9ca7d55d246092bddd29b867706e2f6c7db701a0/netty-3.10.5.Final.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.tdunning/t-digest/3.0/84ccf145ac2215e6bfa63baa3101c0af41017cfc/t-digest-3.0.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.hdrhistogram/HdrHistogram/2.1.6/7495feb7f71ee124bd2a7e7d83590e296d71d80e/HdrHistogram-2.1.6.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.spatial4j/spatial4j/0.5/6e16edaf6b1ba76db7f08c2f3723fce3b358ecc3/spatial4j-0.5.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.vividsolutions/jts/1.13/3ccfb9b60f04d71add996a666ceb8902904fd805/jts-1.13.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/log4j/apache-log4j-extras/1.2.17/85863614d82185d7e51fe21c00aa9117a523a8b6/apache-log4j-extras-1.2.17.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.6.2/8619e95939167fb37245b5670135e4feb0ec7d50/slf4j-api-1.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/net.java.dev.jna/jna/4.1.0/1c12d070e602efd8021891cdd7fd18bc129372d4/jna-4.1.0.jar:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/test-framework/build/libs/test-framework-3.0.0-SNAPSHOT.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.carrotsearch.randomizedtesting/randomizedtesting-runner/2.2.0/60de504132241be049564a3a34fd7dcc296e2ef0/randomizedtesting-runner-2.2.0.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-all/1.3/63a21ebc981131004ad02e0434e799fd7f3a8d5a/hamcrest-all-1.3.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-test-framework/5.4.0-snapshot-1715952/ae3156d5a2526b1b48ca821765cf7cd53faecef5/lucene-test-framework-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-codecs/5.4.0-snapshot-1715952/7b94152f1c9fd7ecb384fc9602318f74a4463a65/lucene-codecs-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.3.6/4c47155e3e6c9a41a28db36680b828ced53b8af4/httpclient-4.3.6.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.3.3/f91b7a4aadc5cf486df6e4634748d7dd7a73f06d/httpcore-4.3.3.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.10/4b95f4897fa13f2cd904aee711aeafc0c5295cd8/commons-codec-1.10.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.carrotsearch.randomizedtesting/junit4-ant/2.2.0/d401c9c729deccd5db8a5df3102eb18793c2224/junit4-ant-2.2.0.jar",
   "java.class.version": "52.0",
   "java.endorsed.dirs": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/endorsed",
   "java.ext.dirs": "/Users/brijeshs/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java",
   "java.home": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre",
   "java.io.tmpdir": "./temp",
   "java.library.path": "/Applications/NetBeans/NetBeans 8.1.app/Contents/Resources/NetBeans/webcommon/bin::/Users/brijeshs/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.",
   "java.runtime.name": "Java(TM) SE Runtime Environment",
   "java.runtime.version": "1.8.0_40-b25",
   "java.specification.name": "Java Platform API Specification",
   "java.specification.vendor": "Oracle Corporation",
   "java.specification.version": "1.8",
   "java.vendor": "Oracle Corporation",
   "java.vendor.url": "http://java.oracle.com/",
   "java.vendor.url.bug": "http://bugreport.sun.com/bugreport/",
   "java.version": "1.8.0_40",
   "java.vm.info": "mixed mode",
   "java.vm.name": "Java HotSpot(TM) 64-Bit Server VM",
   "java.vm.specification.name": "Java Virtual Machine Specification",
   "java.vm.specification.vendor": "Oracle Corporation",
   "java.vm.specification.version": "1.8",
   "java.vm.vendor": "Oracle Corporation",
   "java.vm.version": "25.40-b25",
   "junit4.childvm.count": "4",
   "junit4.childvm.cwd": "/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0",
   "junit4.childvm.id": "0",
   "junit4.memory.total": "514850816",
   "junit4.pidString": "66624@BrijeshS-2.fios-router.home",
   "junit4.processors": "8",
   "line.separator": "\n",
   "os.arch": "x86_64",
   "os.name": "Mac OS X",
   "os.version": "10.10.5",
   "path.separator": ":",
   "socksNonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "sun.arch.data.model": "64",
   "sun.boot.class.path": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/classes",
   "sun.boot.library.path": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib",
   "sun.cpu.endian": "little",
   "sun.cpu.isalist": "",
   "sun.io.unicode.encoding": "UnicodeBig",
   "sun.java.command": "com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe -eventsfile /Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/temp/junit4-J0-20160330_135253_694.events @/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/temp/junit4-J0-20160330_135253_694.suites -stdin",
   "sun.java.launcher": "SUN_STANDARD",
   "sun.jnu.encoding": "UTF-8",
   "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers",
   "sun.os.patch.level": "unknown",
   "tests.artifact": "core",
   "tests.ifNoTests": "fail",
   "tests.maven": "true",
   "tests.prefix": "tests",
   "tests.security.manager": "true",
   "tests.seed": "F7928424F380CF7C",
   "tests.task": ":core:integTest",
   "user.country": "US",
   "user.dir": "/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0",
   "user.home": "/Users/brijeshs",
   "user.language": "en",
   "user.name": "brijeshs",
   "user.timezone": "America/Los_Angeles"
  }
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.analyze.HunspellServiceIT",
   "displayName": "org.elasticsearch.indices.analyze.HunspellServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
   "children": [
    {
     "id": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testLocaleDirectoryWithNodeLevelConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testDicWithTwoAffs",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testDicWithNoAff",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testLocaleDirectoryWithLocaleSpecificConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371174591
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:52:55,064][WARN ][org.elasticsearch.bootstrap] Unable to lock JVM Memory: error=78,reason=Function not implemented%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:52:55,065][WARN ][org.elasticsearch.bootstrap] This can result in part of the JVM being swapped out.%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459371179882,
  "executionTime": 23408
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:53:23,384][ERROR][org.elasticsearch.indices.analysis] [node_t0] exception while loading dictionary en_US%0Ajava.lang.IllegalStateException: failed to load hunspell dictionary for locale: en_US%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$92(HunspellService.java:87)%0A%09at org.elasticsearch.indices.analysis.HunspellService$$Lambda$11/791295053.apply(Unknown Source)%0A%09at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)%0A%09at org.elasticsearch.indices.analysis.HunspellService.getDictionary(HunspellService.java:104)%0A%09at org.elasticsearch.indices.analysis.HunspellService.scanAndLoadDictionaries(HunspellService.java:128)%0A%09at org.elasticsearch.indices.analysis.HunspellService.<init>(HunspellService.java:91)%0A%09at org.elasticsearch.indices.analysis.AnalysisModule.configure(AnalysisModule.java:157)%0A%09at org.elasticsearch.common.inject.AbstractModule.configure(AbstractModule.java:59)%0A%09at org.elasticsearch.common.inject.spi.Elements$RecordingBinder.install(Elements.java:209)%0A%09at org.elasticsearch.common.inject.spi.Elements.getElements(Elements.java:79)%0A%09at org.elasticsearch.common.inject.InjectorShell$Builder.build(InjectorShell.java:148)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:99)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.indices.analyze.HunspellServiceIT.testDicWithTwoAffs(HunspellServiceIT.java:101)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ElasticsearchException[Too many affix files exist for hunspell dictionary [en_US]]%0A%09at org.elasticsearch.indices.analysis.HunspellService.loadDictionary(HunspellService.java:170)%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$92(HunspellService.java:85)%0A%09... 58 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459371203291,
  "executionTime": 538
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:53:23,953][ERROR][org.elasticsearch.indices.analysis] [node_t0] exception while loading dictionary en_US%0Ajava.lang.IllegalStateException: failed to load hunspell dictionary for locale: en_US%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$92(HunspellService.java:87)%0A%09at org.elasticsearch.indices.analysis.HunspellService$$Lambda$11/791295053.apply(Unknown Source)%0A%09at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)%0A%09at org.elasticsearch.indices.analysis.HunspellService.getDictionary(HunspellService.java:104)%0A%09at org.elasticsearch.indices.analysis.HunspellService.scanAndLoadDictionaries(HunspellService.java:128)%0A%09at org.elasticsearch.indices.analysis.HunspellService.<init>(HunspellService.java:91)%0A%09at org.elasticsearch.indices.analysis.AnalysisModule.configure(AnalysisModule.java:157)%0A%09at org.elasticsearch.common.inject.AbstractModule.configure(AbstractModule.java:59)%0A%09at org.elasticsearch.common.inject.spi.Elements$RecordingBinder.install(Elements.java:209)%0A%09at org.elasticsearch.common.inject.spi.Elements.getElements(Elements.java:79)%0A%09at org.elasticsearch.common.inject.InjectorShell$Builder.build(InjectorShell.java:148)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:99)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.indices.analyze.HunspellServiceIT.testDicWithNoAff(HunspellServiceIT.java:83)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ElasticsearchException[Missing affix file for hunspell dictionary [en_US]]%0A%09at org.elasticsearch.indices.analysis.HunspellService.loadDictionary(HunspellService.java:167)%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$92(HunspellService.java:85)%0A%09... 58 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459371203830,
  "executionTime": 329
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459371204160,
  "executionTime": 4254
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.analyze.HunspellServiceIT",
  "startTimestamp": 1459371174591,
  "executionTime": 33996
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT",
   "displayName": "org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT",
   "children": [
    {
     "id": "ID#testIndicesSegmentsWithBlocks(org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT)",
     "displayName": "testIndicesSegmentsWithBlocks(org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT)",
     "methodName": "testIndicesSegmentsWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371208606
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesSegmentsWithBlocks(org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesSegmentsWithBlocks(org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT)",
  "startTimestamp": 1459371209162,
  "executionTime": 13000
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.segments.IndicesSegmentsBlocksIT",
  "startTimestamp": 1459371208606,
  "executionTime": 13570
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "displayName": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "children": [
    {
     "id": "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
     "displayName": "testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
     "methodName": "testSimpleMultiSearch",
     "className": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371222192
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
  "startTimestamp": 1459371222237,
  "executionTime": 2745
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.msearch.SimpleMultiSearchIT",
  "startTimestamp": 1459371222192,
  "executionTime": 2838
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.RejectionActionIT",
   "displayName": "org.elasticsearch.action.RejectionActionIT",
   "methodName": null,
   "className": "org.elasticsearch.action.RejectionActionIT",
   "children": [
    {
     "id": "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
     "displayName": "testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
     "methodName": "testSimulatedSearchRejectionLoad",
     "className": "org.elasticsearch.action.RejectionActionIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371225049
 }
]

[
 "TEST_STARTED",
 "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
  "startTimestamp": 1459371225081,
  "executionTime": 7879
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.RejectionActionIT",
  "startTimestamp": 1459371225049,
  "executionTime": 7984
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
   "displayName": "org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
   "children": [
    {
     "id": "ID#testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)",
     "displayName": "testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)",
     "methodName": "testBreakerWithRandomExceptions",
     "className": "org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371233049
 }
]

[
 "TEST_STARTED",
 "ID#testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)",
  "startTimestamp": 1459371233099,
  "executionTime": 7305
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
  "startTimestamp": 1459371233049,
  "executionTime": 7379
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
   "displayName": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
   "methodName": null,
   "className": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
   "children": [
    {
     "id": "ID#testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "displayName": "testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "methodName": "testMinimumMasterNodes",
     "className": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "displayName": "testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "methodName": "testNormalClusterForming",
     "className": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371240465
 }
]

[
 "TEST_STARTED",
 "ID#testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:06,739][WARN ][org.elasticsearch.discovery.zen] [node_t4] master left (reason = shut_down), current nodes: {{node_t2}{87WoS79CSKy-40LADMyyBA}{127.0.0.1}{127.0.0.1:30102}[mode=>network],{node_t4}{isyxPRHlTQqkeclxGz_OGA}{127.0.0.1}{127.0.0.1:30104}[mode=>network],{node_t3}{w_p-4rCgQVSOKohrvIliDg}{127.0.0.1}{127.0.0.1:30103}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:06,740][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = shut_down), current nodes: {{node_t2}{87WoS79CSKy-40LADMyyBA}{127.0.0.1}{127.0.0.1:30102}[mode=>network],{node_t4}{isyxPRHlTQqkeclxGz_OGA}{127.0.0.1}{127.0.0.1:30104}[mode=>network],{node_t3}{w_p-4rCgQVSOKohrvIliDg}{127.0.0.1}{127.0.0.1:30103}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:06,739][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = shut_down), current nodes: {{node_t2}{87WoS79CSKy-40LADMyyBA}{127.0.0.1}{127.0.0.1:30102}[mode=>network],{node_t4}{isyxPRHlTQqkeclxGz_OGA}{127.0.0.1}{127.0.0.1:30104}[mode=>network],{node_t3}{w_p-4rCgQVSOKohrvIliDg}{127.0.0.1}{127.0.0.1:30103}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
  "startTimestamp": 1459371240499,
  "executionTime": 6342
 }
]

[
 "TEST_STARTED",
 "ID#testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:13,687][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t2}{Ur2_xptvR_ujTHBrpQf78g}{127.0.0.1}{127.0.0.1:30107}[mode=>network],{node_t1}{peleQYQQRHm6iDe23aBUtQ}{127.0.0.1}{127.0.0.1:30106}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:13,688][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = shut_down), current nodes: {{node_t2}{Ur2_xptvR_ujTHBrpQf78g}{127.0.0.1}{127.0.0.1:30107}[mode=>network],{node_t1}{peleQYQQRHm6iDe23aBUtQ}{127.0.0.1}{127.0.0.1:30106}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
  "startTimestamp": 1459371246841,
  "executionTime": 6911
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
  "startTimestamp": 1459371240465,
  "executionTime": 13332
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
   "displayName": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
   "children": [
    {
     "id": "ID#testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testVerifyRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    },
    {
     "id": "ID#testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testGetRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    },
    {
     "id": "ID#testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testDeleteRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    },
    {
     "id": "ID#testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testPutRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371253813
 }
]

[
 "TEST_STARTED",
 "ID#testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459371253845,
  "executionTime": 400
 }
]

[
 "TEST_STARTED",
 "ID#testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459371254246,
  "executionTime": 668
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459371254915,
  "executionTime": 834
 }
]

[
 "TEST_STARTED",
 "ID#testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459371255749,
  "executionTime": 886
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
  "startTimestamp": 1459371253813,
  "executionTime": 2900
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.document.DocumentActionsIT",
   "displayName": "org.elasticsearch.document.DocumentActionsIT",
   "methodName": null,
   "className": "org.elasticsearch.document.DocumentActionsIT",
   "children": [
    {
     "id": "ID#testBulk(org.elasticsearch.document.DocumentActionsIT)",
     "displayName": "testBulk(org.elasticsearch.document.DocumentActionsIT)",
     "methodName": "testBulk",
     "className": "org.elasticsearch.document.DocumentActionsIT",
     "children": []
    },
    {
     "id": "ID#testIndexActions(org.elasticsearch.document.DocumentActionsIT)",
     "displayName": "testIndexActions(org.elasticsearch.document.DocumentActionsIT)",
     "methodName": "testIndexActions",
     "className": "org.elasticsearch.document.DocumentActionsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371256736
 }
]

[
 "TEST_STARTED",
 "ID#testBulk(org.elasticsearch.document.DocumentActionsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBulk(org.elasticsearch.document.DocumentActionsIT)",
  "startTimestamp": 1459371256769,
  "executionTime": 2150
 }
]

[
 "TEST_STARTED",
 "ID#testIndexActions(org.elasticsearch.document.DocumentActionsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexActions(org.elasticsearch.document.DocumentActionsIT)",
  "startTimestamp": 1459371258920,
  "executionTime": 3011
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.document.DocumentActionsIT",
  "startTimestamp": 1459371256736,
  "executionTime": 5221
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "displayName": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "children": [
    {
     "id": "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleMixedFeatures",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleUnknownIndex",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleAlias",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleWarmer",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testGetIndexWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testEmptyMixedFeatures",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleSettings",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleMapping",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371261975
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:22,792][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:22,800][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:22,939][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:23,068][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:23,257][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:23,658][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:23,742][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:23,872][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,024][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,090][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,167][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,235][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,263][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,306][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264310,
  "executionTime": 60
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264371,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264398,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264427,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264458,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,528][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,545][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,566][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,581][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,599][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,614][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,636][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,651][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,669][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,687][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,707][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,727][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,748][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,768][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,789][WARN ][org.elasticsearch.gateway] [node_s1] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:24,806][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264488,
  "executionTime": 320
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264809,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264834,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264863,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459371264890,
  "executionTime": 26
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.get.GetIndexIT",
  "startTimestamp": 1459371261975,
  "executionTime": 4203
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
   "displayName": "org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
   "children": [
    {
     "id": "ID#testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)",
     "displayName": "testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)",
     "methodName": "testRefreshWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371266190
 }
]

[
 "TEST_STARTED",
 "ID#testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)",
  "startTimestamp": 1459371266224,
  "executionTime": 3446
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
  "startTimestamp": 1459371266190,
  "executionTime": 3498
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.ValueCountIT",
   "displayName": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
   "children": [
    {
     "id": "ID#testSingleValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testSingleValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testSingleValuedScriptWithParams",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testSingleValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testSingleValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testSingleValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testSingleValuedScript",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testMultiValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testMultiValuedScriptWithParams",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testSingleValuedFieldGetProperty",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testMultiValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testMultiValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testMultiValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testMultiValuedScript",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "displayName": "testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
     "methodName": "testSingleValuedFieldPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.ValueCountIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371269718
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371271589,
  "executionTime": 442
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272032,
  "executionTime": 126
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272159,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272183,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedScriptWithParams(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272200,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272222,
  "executionTime": 124
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272347,
  "executionTime": 42
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedScript(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272390,
  "executionTime": 54
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.ValueCountIT)",
  "startTimestamp": 1459371272445,
  "executionTime": 31
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.ValueCountIT",
  "startTimestamp": 1459371269718,
  "executionTime": 3629
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
   "displayName": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
   "methodName": null,
   "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
   "children": [
    {
     "id": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testDeleteRoutingRequired",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testUnsupportedFeatures",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testInternalVersion",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexUpgradeSingleNode",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexAndSearch",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testNoRecoveryFromNewNodes",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexGetAndDelete",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testUpdate",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testExistsFilter",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testMultiGet",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testRecoverFromPreviousVersion",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testAnalyze",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexRollingUpgrade",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testExternalVersion",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndicesStats",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testScroll",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testExplain",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testGetTermVector",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371273396
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273449,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273440,
  "executionTime": 34
 }
]

[
 "TEST_STARTED",
 "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273475,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273475,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273476,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273475,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273476,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273476,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273477,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273477,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273478,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273478,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273478,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273478,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273479,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273479,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273480,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273480,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273480,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273480,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273481,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273481,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273482,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273482,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273483,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273483,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273483,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273483,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273484,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273484,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273485,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273485,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273486,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273486,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273486,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459371273486,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
  "startTimestamp": 1459371273396,
  "executionTime": 91
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.zen.ZenDiscoveryIT",
   "displayName": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
   "methodName": null,
   "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
   "children": [
    {
     "id": "ID#testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testNodeFailuresAreProcessedOnce",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testNodeRejectsClusterStateWithWrongMasterNode",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testHandleNodeJoin_incompatibleMinVersion",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testDiscoveryStats",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testNoShardRelocationsOccurWhenElectedMasterNodeFails",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testChangeRejoinOnMasterOptionIsDynamic",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testJoinElectedMaster_incompatibleMinVersion",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371273506
 }
]

[
 "TEST_STARTED",
 "ID#testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:39,940][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] observer: sampled state rejected by predicate (version [4], status [BEING_APPLIED]). adding listener to ClusterService%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:39,941][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [4]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:39,942][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] observer: post adding listener: accepting current cluster state (version [4], status [APPLIED])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:39,943][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [4]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:40,033][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [6]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:40,034][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [6]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:40,034][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [6]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1459371273548,
  "executionTime": 6574
 }
]

[
 "TEST_STARTED",
 "ID#testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:43,384][WARN ][org.elasticsearch.discovery.zen.publish] [node_t1] received a cluster state from a different master than the current one, rejecting (received {abc}{local}{local[abc]}, current {node_t0}{0Jg899l5SWuvFhuytHIdzg}{127.0.0.1}{127.0.0.1:9480}[mode=>network])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:43,426][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{b7brEKXYRcGhJVXIm11oOA}{127.0.0.1}{127.0.0.1:9481}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1459371280122,
  "executionTime": 3339
 }
]

[
 "TEST_STARTED",
 "ID#testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1459371283461,
  "executionTime": 3215
 }
]

[
 "TEST_STARTED",
 "ID#testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1459371286676,
  "executionTime": 3194
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:56,851][WARN ][org.elasticsearch.discovery.zen] [node_t0] master left (reason = shut_down), current nodes: {{node_t2}{vlm0-L4HRf28TLxcRogMEg}{127.0.0.1}{127.0.0.1:9442}[master=>false, mode=>network],{node_t3}{GUCyWBUkRoy23CrtjZ6rgA}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t0}{sVQFmLK3RsiiI4MtJvhszQ}{127.0.0.1}{127.0.0.1:9440}[mode=>network, data=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:56,862][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = transport disconnected), current nodes: {{node_t2}{vlm0-L4HRf28TLxcRogMEg}{127.0.0.1}{127.0.0.1:9442}[master=>false, mode=>network],{node_t3}{GUCyWBUkRoy23CrtjZ6rgA}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t0}{sVQFmLK3RsiiI4MtJvhszQ}{127.0.0.1}{127.0.0.1:9440}[data=>false, mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:54:56,862][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = transport disconnected), current nodes: {{node_t2}{vlm0-L4HRf28TLxcRogMEg}{127.0.0.1}{127.0.0.1:9442}[mode=>network, master=>false],{node_t3}{GUCyWBUkRoy23CrtjZ6rgA}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t0}{sVQFmLK3RsiiI4MtJvhszQ}{127.0.0.1}{127.0.0.1:9440}[data=>false, mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:00,134][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = transport disconnected), current nodes: {{node_t2}{vlm0-L4HRf28TLxcRogMEg}{127.0.0.1}{127.0.0.1:9442}[master=>false, mode=>network],{node_t3}{GUCyWBUkRoy23CrtjZ6rgA}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:00,134][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = transport disconnected), current nodes: {{node_t2}{vlm0-L4HRf28TLxcRogMEg}{127.0.0.1}{127.0.0.1:9442}[master=>false, mode=>network],{node_t3}{GUCyWBUkRoy23CrtjZ6rgA}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1459371289870,
  "executionTime": 10309
 }
]

[
 "TEST_STARTED",
 "ID#testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1459371300180,
  "executionTime": 3156
 }
]

[
 "TEST_STARTED",
 "ID#testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:03,351][WARN ][org.elasticsearch.discovery.zen.elect] ignoring master [{_node_id}{local}{local[_id]}], because the version [1.6.0] is lower than the minimum compatible version [2.0.0-beta1]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1459371303336,
  "executionTime": 3193
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.zen.ZenDiscoveryIT",
  "startTimestamp": 1459371273506,
  "executionTime": 33194
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.ClusterInfoServiceIT",
   "displayName": "org.elasticsearch.cluster.ClusterInfoServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
   "children": [
    {
     "id": "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "displayName": "testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "methodName": "testClusterInfoServiceCollectsInformation",
     "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
     "children": []
    },
    {
     "id": "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "displayName": "testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "methodName": "testClusterInfoServiceInformationClearOnError",
     "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371306715
 }
]

[
 "TEST_STARTED",
 "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
  "startTimestamp": 1459371306746,
  "executionTime": 1976
 }
]

[
 "TEST_STARTED",
 "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:11,997][WARN ][org.elasticsearch.cluster] [node_t0] Failed to execute NodeStatsAction for ClusterInfoUpdateJob%0AElasticsearchException[force exception on [cluster:monitor/nodes/stats]]%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT$BlockingActionFilter.apply(ClusterInfoServiceIT.java:105)%0A%09at org.elasticsearch.action.support.ActionFilter$Simple.apply(ActionFilter.java:63)%0A%09at org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:99)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:77)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.updateNodeStats(InternalClusterInfoService.java:271)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.refresh(InternalClusterInfoService.java:307)%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT.testClusterInfoServiceInformationClearOnError(ClusterInfoServiceIT.java:250)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:11,999][WARN ][org.elasticsearch.cluster] [node_t0] Failed to execute IndicesStatsAction for ClusterInfoUpdateJob%0AElasticsearchException[force exception on [indices:monitor/stats]]%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT$BlockingActionFilter.apply(ClusterInfoServiceIT.java:105)%0A%09at org.elasticsearch.action.support.ActionFilter$Simple.apply(ActionFilter.java:63)%0A%09at org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:99)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:77)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.updateIndicesStats(InternalClusterInfoService.java:285)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.refresh(InternalClusterInfoService.java:336)%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT.testClusterInfoServiceInformationClearOnError(ClusterInfoServiceIT.java:250)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
  "startTimestamp": 1459371308722,
  "executionTime": 3955
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.ClusterInfoServiceIT",
  "startTimestamp": 1459371306715,
  "executionTime": 5996
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.support.master.IndexingMasterFailoverIT",
   "displayName": "org.elasticsearch.action.support.master.IndexingMasterFailoverIT",
   "methodName": null,
   "className": "org.elasticsearch.action.support.master.IndexingMasterFailoverIT",
   "children": [
    {
     "id": "ID#testMasterFailoverDuringIndexingWithMappingChanges(org.elasticsearch.action.support.master.IndexingMasterFailoverIT)",
     "displayName": "testMasterFailoverDuringIndexingWithMappingChanges(org.elasticsearch.action.support.master.IndexingMasterFailoverIT)",
     "methodName": "testMasterFailoverDuringIndexingWithMappingChanges",
     "className": "org.elasticsearch.action.support.master.IndexingMasterFailoverIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371312739
 }
]

[
 "TEST_STARTED",
 "ID#testMasterFailoverDuringIndexingWithMappingChanges(org.elasticsearch.action.support.master.IndexingMasterFailoverIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,107][WARN ][org.elasticsearch.discovery.zen] [node_t0] master left (reason = transport disconnected), current nodes: {{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[master=>true, mode=>network, data=>false],{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[mode=>network, data=>false, master=>true],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,109][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t0] failed to send ping to [{node_t1}{B8ueoxDfQ6q-fh1-89oQ2w}{127.0.0.1}{127.0.0.1:9441}[data=>false, master=>true, mode=>network]]%0ASendRequestTransportException[[node_t1][127.0.0.1:9441][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t1][127.0.0.1:9441] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t1][127.0.0.1:9441] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,114][WARN ][org.elasticsearch.cluster.service] [node_t1] failing [zen-disco-node_failed({node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[master=>true, data=>false, mode=>network]), reason transport disconnected]: failed to commit cluster state version [8]%0AFailedToCommitClusterStateException[failed to get enough masters to ack sent cluster state. [1] left]%0A%09at org.elasticsearch.discovery.zen.publish.PublishClusterStateAction$SendingController.waitForCommit(PublishClusterStateAction.java:509)%0A%09at org.elasticsearch.discovery.zen.publish.PublishClusterStateAction.innerPublish(PublishClusterStateAction.java:173)%0A%09at org.elasticsearch.discovery.zen.publish.PublishClusterStateAction.publish(PublishClusterStateAction.java:138)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.publish(ZenDiscovery.java:319)%0A%09at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at org.elasticsearch.common.inject.internal.ConstructionContext$DelegatingInvocationHandler.invoke(ConstructionContext.java:111)%0A%09at com.sun.proxy.$Proxy37.publish(Unknown Source)%0A%09at org.elasticsearch.discovery.DiscoveryService.publish(DiscoveryService.java:130)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:513)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,117][ERROR][org.elasticsearch.discovery.zen] [node_t1] unexpected failure during [zen-disco-node_failed({node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[master=>true, data=>false, mode=>network]), reason transport disconnected]%0AFailedToCommitClusterStateException[failed to get enough masters to ack sent cluster state. [1] left]%0A%09at org.elasticsearch.discovery.zen.publish.PublishClusterStateAction$SendingController.waitForCommit(PublishClusterStateAction.java:509)%0A%09at org.elasticsearch.discovery.zen.publish.PublishClusterStateAction.innerPublish(PublishClusterStateAction.java:173)%0A%09at org.elasticsearch.discovery.zen.publish.PublishClusterStateAction.publish(PublishClusterStateAction.java:138)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.publish(ZenDiscovery.java:319)%0A%09at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at org.elasticsearch.common.inject.internal.ConstructionContext$DelegatingInvocationHandler.invoke(ConstructionContext.java:111)%0A%09at com.sun.proxy.$Proxy37.publish(Unknown Source)%0A%09at org.elasticsearch.discovery.DiscoveryService.publish(DiscoveryService.java:130)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:513)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,118][WARN ][org.elasticsearch.discovery.zen] [node_t1] failed to publish to min_master_nodes, current nodes: {{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[mode=>network, master=>false],{node_t1}{B8ueoxDfQ6q-fh1-89oQ2w}{127.0.0.1}{127.0.0.1:9441}[master=>true, mode=>network, data=>false],{node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[master=>true, data=>false, mode=>network],{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[mode=>network, master=>true, data=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,119][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_1#}{127.0.0.1}{127.0.0.1:9440}]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,122][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_4#}{127.0.0.1}{127.0.0.1:9443}]%0ASendRequestTransportException[[node_t3][127.0.0.1:9443][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,126][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[master=>true, mode=>network, data=>false]]%0ASendRequestTransportException[[node_t2][127.0.0.1:9442][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,122][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_3#}{127.0.0.1}{127.0.0.1:9442}]%0ASendRequestTransportException[[node_t2][127.0.0.1:9442][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,126][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[mode=>network, master=>false]]%0ASendRequestTransportException[[node_t3][127.0.0.1:9443][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,125][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[mode=>network, master=>true, data=>false]]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,407][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = transport disconnected), current nodes: {{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[mode=>network, master=>true, data=>false],{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[master=>true, mode=>network, data=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,408][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t2] failed to send ping to [{node_t1}{B8ueoxDfQ6q-fh1-89oQ2w}{127.0.0.1}{127.0.0.1:9441}[mode=>network, master=>true, data=>false]]%0ASendRequestTransportException[[node_t1][127.0.0.1:9441][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t1][127.0.0.1:9441] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t1][127.0.0.1:9441] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:20,529][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = transport disconnected), current nodes: {{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[data=>false, mode=>network, master=>true],{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[data=>false, mode=>network, master=>true],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:21,627][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_1#}{127.0.0.1}{127.0.0.1:9440}]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2.doRun(UnicastZenPing.java:249)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:21,629][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_4#}{127.0.0.1}{127.0.0.1:9443}]%0ASendRequestTransportException[[node_t3][127.0.0.1:9443][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2.doRun(UnicastZenPing.java:249)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:21,627][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_3#}{127.0.0.1}{127.0.0.1:9442}]%0ASendRequestTransportException[[node_t2][127.0.0.1:9442][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2.doRun(UnicastZenPing.java:249)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:21,632][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[mode=>network, master=>false]]%0ASendRequestTransportException[[node_t3][127.0.0.1:9443][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2.doRun(UnicastZenPing.java:249)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:21,631][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[mode=>network, data=>false, master=>true]]%0ASendRequestTransportException[[node_t2][127.0.0.1:9442][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2.doRun(UnicastZenPing.java:249)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:21,629][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[master=>true, mode=>network, data=>false]]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2.doRun(UnicastZenPing.java:249)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:23,135][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_1#}{127.0.0.1}{127.0.0.1:9440}]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2$1.doRun(UnicastZenPing.java:253)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:23,138][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network]]%0ASendRequestTransportException[[node_t3][127.0.0.1:9443][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2$1.doRun(UnicastZenPing.java:253)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:23,138][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[mode=>network, master=>true, data=>false]]%0ASendRequestTransportException[[node_t2][127.0.0.1:9442][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2$1.doRun(UnicastZenPing.java:253)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:23,138][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{node_t0}{YrYchOe4TZaF8_LfBjo5vw}{127.0.0.1}{127.0.0.1:9440}[master=>true, data=>false, mode=>network]]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2$1.doRun(UnicastZenPing.java:253)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:23,136][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_4#}{127.0.0.1}{127.0.0.1:9443}]%0ASendRequestTransportException[[node_t3][127.0.0.1:9443][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2$1.doRun(UnicastZenPing.java:253)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t3][127.0.0.1:9443] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:23,135][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_3#}{127.0.0.1}{127.0.0.1:9442}]%0ASendRequestTransportException[[node_t2][127.0.0.1:9442][internal:discovery/zen/unicast]]; nested: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$2$1.doRun(UnicastZenPing.java:253)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t2][127.0.0.1:9442] DISCONNECT: simulated]%0A%09at org.elasticsearch.test.transport.MockTransportService$1.sendRequest(MockTransportService.java:161)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 7 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:31,549][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t1}{B8ueoxDfQ6q-fh1-89oQ2w}{127.0.0.1}{127.0.0.1:9441}[master=>true, mode=>network, data=>false],{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[mode=>network, master=>true, data=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:31,549][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = shut_down), current nodes: {{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t1}{B8ueoxDfQ6q-fh1-89oQ2w}{127.0.0.1}{127.0.0.1:9441}[data=>false, mode=>network, master=>true],{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[master=>true, mode=>network, data=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:31,552][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = transport disconnected), current nodes: {{node_t3}{Ru8eiy-0TzGAWxjWP1LF2g}{127.0.0.1}{127.0.0.1:9443}[master=>false, mode=>network],{node_t1}{B8ueoxDfQ6q-fh1-89oQ2w}{127.0.0.1}{127.0.0.1:9441}[master=>true, mode=>network, data=>false],{node_t2}{nd6j0cc_T1Wr2e53LO9gBA}{127.0.0.1}{127.0.0.1:9442}[data=>false, master=>true, mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMasterFailoverDuringIndexingWithMappingChanges(org.elasticsearch.action.support.master.IndexingMasterFailoverIT)",
  "startTimestamp": 1459371312775,
  "executionTime": 18832
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.support.master.IndexingMasterFailoverIT",
  "startTimestamp": 1459371312739,
  "executionTime": 18888
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "displayName": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "methodName": null,
   "className": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "children": [
    {
     "id": "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
     "displayName": "testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
     "methodName": "testNativeExplainScript",
     "className": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371331642
 }
]

[
 "TEST_STARTED",
 "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
  "startTimestamp": 1459371331675,
  "executionTime": 4278
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.functionscore.ExplainableScriptIT",
  "startTimestamp": 1459371331642,
  "executionTime": 4332
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
   "displayName": "org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
   "methodName": null,
   "className": "org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
   "children": [
    {
     "id": "ID#testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)",
     "displayName": "testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)",
     "methodName": "testDifferentPorts",
     "className": "org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371335987
 }
]

[
 "TEST_STARTED",
 "ID#testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:55:42,356][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{9zHCDCjGQKip-aIkgvNT5g}{127.0.0.1}{127.0.0.1:9481}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)",
  "startTimestamp": 1459371336020,
  "executionTime": 6362
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
  "startTimestamp": 1459371335987,
  "executionTime": 6407
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.simple.SimpleSearchIT",
   "displayName": "org.elasticsearch.search.simple.SimpleSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.simple.SimpleSearchIT",
   "children": [
    {
     "id": "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testInsaneFromAndSize",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testLargeFromAndSizeSucceeds",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testLocaleDependentDate",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSize",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testQueryNumericFieldWithRegex",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeOkBySetting",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleIp",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testIpCidr",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSearchRandomPreference",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleDateRange",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeBackwardsCompatibilityRecommendation",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleTerminateAfterCount",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeOkByDynamicSetting",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleId",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSearchNullIndex",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371342409
 }
]

[
 "TEST_STARTED",
 "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371342442,
  "executionTime": 2735
 }
]

[
 "TEST_STARTED",
 "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371345178,
  "executionTime": 970
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371346149,
  "executionTime": 2681
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371348830,
  "executionTime": 1299
 }
]

[
 "TEST_STARTED",
 "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371350129,
  "executionTime": 868
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371350997,
  "executionTime": 882
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371351880,
  "executionTime": 1918
 }
]

[
 "TEST_STARTED",
 "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371353799,
  "executionTime": 2371
 }
]

[
 "TEST_STARTED",
 "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371356171,
  "executionTime": 3210
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371359382,
  "executionTime": 1031
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371360413,
  "executionTime": 1854
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371362267,
  "executionTime": 2062
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371364330,
  "executionTime": 828
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371365159,
  "executionTime": 1669
 }
]

[
 "TEST_STARTED",
 "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459371366829,
  "executionTime": 67
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.simple.SimpleSearchIT",
  "startTimestamp": 1459371342409,
  "executionTime": 24522
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.flush.FlushBlocksIT",
   "displayName": "org.elasticsearch.action.admin.indices.flush.FlushBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.flush.FlushBlocksIT",
   "children": [
    {
     "id": "ID#testFlushWithBlocks(org.elasticsearch.action.admin.indices.flush.FlushBlocksIT)",
     "displayName": "testFlushWithBlocks(org.elasticsearch.action.admin.indices.flush.FlushBlocksIT)",
     "methodName": "testFlushWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.flush.FlushBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371366943
 }
]

[
 "TEST_STARTED",
 "ID#testFlushWithBlocks(org.elasticsearch.action.admin.indices.flush.FlushBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFlushWithBlocks(org.elasticsearch.action.admin.indices.flush.FlushBlocksIT)",
  "startTimestamp": 1459371366974,
  "executionTime": 1303
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.flush.FlushBlocksIT",
  "startTimestamp": 1459371366943,
  "executionTime": 1351
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.consistencylevel.WriteConsistencyLevelIT",
   "displayName": "org.elasticsearch.consistencylevel.WriteConsistencyLevelIT",
   "methodName": null,
   "className": "org.elasticsearch.consistencylevel.WriteConsistencyLevelIT",
   "children": [
    {
     "id": "ID#testWriteConsistencyLevelReplication2(org.elasticsearch.consistencylevel.WriteConsistencyLevelIT)",
     "displayName": "testWriteConsistencyLevelReplication2(org.elasticsearch.consistencylevel.WriteConsistencyLevelIT)",
     "methodName": "testWriteConsistencyLevelReplication2",
     "className": "org.elasticsearch.consistencylevel.WriteConsistencyLevelIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371368304
 }
]

[
 "TEST_STARTED",
 "ID#testWriteConsistencyLevelReplication2(org.elasticsearch.consistencylevel.WriteConsistencyLevelIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWriteConsistencyLevelReplication2(org.elasticsearch.consistencylevel.WriteConsistencyLevelIT)",
  "startTimestamp": 1459371368330,
  "executionTime": 2086
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.consistencylevel.WriteConsistencyLevelIT",
  "startTimestamp": 1459371368304,
  "executionTime": 2147
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.store.CorruptedTranslogIT",
   "displayName": "org.elasticsearch.index.store.CorruptedTranslogIT",
   "methodName": null,
   "className": "org.elasticsearch.index.store.CorruptedTranslogIT",
   "children": [
    {
     "id": "ID#testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)",
     "displayName": "testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)",
     "methodName": "testCorruptTranslogFiles",
     "className": "org.elasticsearch.index.store.CorruptedTranslogIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371370462
 }
]

[
 "TEST_STARTED",
 "ID#testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:10,702][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] wipe translog location - creating new translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,024][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,361][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=10551, numOps=142, translogFileGeneration= 1}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,435][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,446][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,459][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[kuLYOiLVS9eaPqpZK3T7ZA], [P], v[3], s[INITIALIZING], a[id=OURq8Tc8TimyMBQWWuK4Kg], unassigned_info[[reason=CLUSTER_RECOVERED], at[2016-03-30T20:56:11.247Z]], indexUUID [1Wax1szhQfKV5CFyGKO5Qg], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,572][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 2}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,573][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 2}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,646][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,657][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,659][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[kuLYOiLVS9eaPqpZK3T7ZA], [P], v[3], s[INITIALIZING], a[id=5YH0zkU0Qvm5vCNn5LuHQg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T20:56:11.461Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]], indexUUID [1Wax1szhQfKV5CFyGKO5Qg], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,765][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 3}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,766][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 3}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,767][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 3}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,839][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,850][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,852][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[kuLYOiLVS9eaPqpZK3T7ZA], [P], v[3], s[INITIALIZING], a[id=dpxS8kZ4QcWBxEeI9usSlw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T20:56:11.660Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]], indexUUID [1Wax1szhQfKV5CFyGKO5Qg], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,954][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,955][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,956][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,956][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,997][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:11,999][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,001][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[kuLYOiLVS9eaPqpZK3T7ZA], [P], v[3], s[INITIALIZING], a[id=G6xIABy9RN2sEbW7DQhIDA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T20:56:11.853Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]], indexUUID [1Wax1szhQfKV5CFyGKO5Qg], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,090][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,091][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,091][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,092][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,093][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,129][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,140][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,141][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[kuLYOiLVS9eaPqpZK3T7ZA], [P], v[3], s[INITIALIZING], a[id=nL6IDT4NRGOCeV9Qki1fYw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T20:56:12.002Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]], indexUUID [1Wax1szhQfKV5CFyGKO5Qg], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,186][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,187][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,188][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,188][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,189][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,190][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=413, numOps=5, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,252][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,254][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,256][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[kuLYOiLVS9eaPqpZK3T7ZA], [P], v[3], s[INITIALIZING], a[id=RL1_vKMyQ--zjAk58ODfqA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T20:56:12.143Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]], indexUUID [1Wax1szhQfKV5CFyGKO5Qg], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$487/1536812624.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$486/1631602532.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:12,257][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[kuLYOiLVS9eaPqpZK3T7ZA], [P], v[3], s[INITIALIZING], a[id=RL1_vKMyQ--zjAk58ODfqA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T20:56:12.143Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0x10a871b, got: 0x64c72ddb]; ]], indexUUID [1Wax1szhQfKV5CFyGKO5Qg], message [master {node_s0}{kuLYOiLVS9eaPqpZK3T7ZA}{local}{local[87]}[mode=>local] marked shard as initializing, but shard is marked as failed, resend shard failure], failure [Unknown]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)",
  "startTimestamp": 1459371370490,
  "executionTime": 1869
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.store.CorruptedTranslogIT",
  "startTimestamp": 1459371370462,
  "executionTime": 1913
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.SearchTimeoutIT",
   "displayName": "org.elasticsearch.search.SearchTimeoutIT",
   "methodName": null,
   "className": "org.elasticsearch.search.SearchTimeoutIT",
   "children": [
    {
     "id": "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
     "displayName": "testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
     "methodName": "testSimpleTimeout",
     "className": "org.elasticsearch.search.SearchTimeoutIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371372385
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
  "startTimestamp": 1459371372413,
  "executionTime": 2968
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.SearchTimeoutIT",
  "startTimestamp": 1459371372385,
  "executionTime": 3042
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT",
   "displayName": "org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT",
   "methodName": null,
   "className": "org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT",
   "children": [
    {
     "id": "ID#testSimpleRecovery(org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT)",
     "displayName": "testSimpleRecovery(org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT)",
     "methodName": "testSimpleRecovery",
     "className": "org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371375440
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleRecovery(org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleRecovery(org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT)",
  "startTimestamp": 1459371375469,
  "executionTime": 2551
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.recovery.SmallTranslogOpsRecoveryIT",
  "startTimestamp": 1459371375440,
  "executionTime": 2612
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
   "displayName": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
   "children": [
    {
     "id": "ID#testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithoutType",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingConcurrently",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithNormsConflicts",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithoutTypeMultiObjects",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateDefaultMappingSettings",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingNoChanges",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testDynamicUpdates",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testPutMappingsWithBlocks",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithConflicts",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371378067
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371378096,
  "executionTime": 507
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371378604,
  "executionTime": 13731
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371392336,
  "executionTime": 587
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371392924,
  "executionTime": 217
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371393142,
  "executionTime": 448
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371393590,
  "executionTime": 331
 }
]

[
 "TEST_STARTED",
 "ID#testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371393922,
  "executionTime": 18335
 }
]

[
 "TEST_STARTED",
 "ID#testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371412257,
  "executionTime": 620
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459371412878,
  "executionTime": 384
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
  "startTimestamp": 1459371378067,
  "executionTime": 35232
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.TransportIndexFailuresIT",
   "displayName": "org.elasticsearch.index.TransportIndexFailuresIT",
   "methodName": null,
   "className": "org.elasticsearch.index.TransportIndexFailuresIT",
   "children": [
    {
     "id": "ID#testNetworkPartitionDuringReplicaIndexOp(org.elasticsearch.index.TransportIndexFailuresIT)",
     "displayName": "testNetworkPartitionDuringReplicaIndexOp(org.elasticsearch.index.TransportIndexFailuresIT)",
     "methodName": "testNetworkPartitionDuringReplicaIndexOp",
     "className": "org.elasticsearch.index.TransportIndexFailuresIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371413312
 }
]

[
 "TEST_STARTED",
 "ID#testNetworkPartitionDuringReplicaIndexOp(org.elasticsearch.index.TransportIndexFailuresIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:57,055][WARN ][org.elasticsearch.action.index] [node_t1] [testidx][0] failed to perform indices:data/write/index[r] on node {node_t0}{b459ArHSSg6KdMubh6sZ5g}{127.0.0.1}{127.0.0.1:9440}[mode=>network]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][indices:data/write/index[r]]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: prevented indices:data/write/index[r] request];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicationPhase.performOnReplica(TransportReplicationAction.java:856)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicationPhase.doRun(TransportReplicationAction.java:831)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryPhase.finishAndMoveToReplication(TransportReplicationAction.java:665)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryPhase.doRun(TransportReplicationAction.java:609)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:265)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:262)%0A%09at org.elasticsearch.transport.TransportService$4.doRun(TransportService.java:350)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: prevented indices:data/write/index[r] request]%0A%09at org.elasticsearch.test.transport.MockTransportService$2.sendRequest(MockTransportService.java:209)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 13 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:57,072][WARN ][org.elasticsearch.cluster.action.shard] [node_t0] [testidx][0] received shard failed for [testidx][0], node[b459ArHSSg6KdMubh6sZ5g], [R], v[3], s[STARTED], a[id=eHcmI7CPTS2yx3D4n7jpDQ], indexUUID [cPFAUcQhTHSrn04tQmPaGQ], message [failed to perform indices:data/write/index[r] on replica on node {node_t0}{b459ArHSSg6KdMubh6sZ5g}{127.0.0.1}{127.0.0.1:9440}[mode=>network]], failure [SendRequestTransportException[[node_t0][127.0.0.1:9440][indices:data/write/index[r]]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: prevented indices:data/write/index[r] request]; ]%0ASendRequestTransportException[[node_t0][127.0.0.1:9440][indices:data/write/index[r]]]; nested: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: prevented indices:data/write/index[r] request];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicationPhase.performOnReplica(TransportReplicationAction.java:856)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicationPhase.doRun(TransportReplicationAction.java:831)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryPhase.finishAndMoveToReplication(TransportReplicationAction.java:665)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryPhase.doRun(TransportReplicationAction.java:609)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:265)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:262)%0A%09at org.elasticsearch.transport.TransportService$4.doRun(TransportService.java:350)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ConnectTransportException[[node_t0][127.0.0.1:9440] DISCONNECT: prevented indices:data/write/index[r] request]%0A%09at org.elasticsearch.test.transport.MockTransportService$2.sendRequest(MockTransportService.java:209)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 13 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:56:57,278][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{l1UzgfUMR_G-aX4bQskxGw}{127.0.0.1}{127.0.0.1:9441}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNetworkPartitionDuringReplicaIndexOp(org.elasticsearch.index.TransportIndexFailuresIT)",
  "startTimestamp": 1459371413342,
  "executionTime": 3954
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.TransportIndexFailuresIT",
  "startTimestamp": 1459371413312,
  "executionTime": 3999
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT",
   "displayName": "org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT",
   "methodName": null,
   "className": "org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT",
   "children": [
    {
     "id": "ID#testReusePeerRecovery(org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT)",
     "displayName": "testReusePeerRecovery(org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT)",
     "methodName": "testReusePeerRecovery",
     "className": "org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371417323
 }
]

[
 "TEST_STARTED",
 "ID#testReusePeerRecovery(org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testReusePeerRecovery(org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT)",
  "startTimestamp": 1459371417330,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testReusePeerRecovery(org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReusePeerRecovery(org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT)",
  "startTimestamp": 1459371417330,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.RecoveryBackwardsCompatibilityIT",
  "startTimestamp": 1459371417323,
  "executionTime": 8
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
   "displayName": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
   "children": [
    {
     "id": "ID#testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "displayName": "testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "methodName": "testExternalValues",
     "className": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "displayName": "testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "methodName": "testExternalValuesWithMultifield",
     "className": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371417354
 }
]

[
 "TEST_STARTED",
 "ID#testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
  "startTimestamp": 1459371417384,
  "executionTime": 3612
 }
]

[
 "TEST_STARTED",
 "ID#testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
  "startTimestamp": 1459371420997,
  "executionTime": 4998
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
  "startTimestamp": 1459371417354,
  "executionTime": 8707
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.scroll.DuelScrollIT",
   "displayName": "org.elasticsearch.search.scroll.DuelScrollIT",
   "methodName": null,
   "className": "org.elasticsearch.search.scroll.DuelScrollIT",
   "children": [
    {
     "id": "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelQueryThenFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelIndexOrderQueryThenFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelIndexOrderQueryAndFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelQueryAndFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371426075
 }
]

[
 "TEST_STARTED",
 "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459371426120,
  "executionTime": 11296
 }
]

[
 "TEST_STARTED",
 "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459371437416,
  "executionTime": 3932
 }
]

[
 "TEST_STARTED",
 "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459371441349,
  "executionTime": 2348
 }
]

[
 "TEST_STARTED",
 "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459371443698,
  "executionTime": 2399
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:57:26,115][WARN ][org.elasticsearch.test.transport] [node_s1] Transport response handler not found of id [590]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.scroll.DuelScrollIT",
  "startTimestamp": 1459371426075,
  "executionTime": 20082
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
   "children": [
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testDocCountTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371446192
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459371453767,
  "executionTime": 478
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459371454245,
  "executionTime": 191
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459371454437,
  "executionTime": 74
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459371454511,
  "executionTime": 107
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459371454618,
  "executionTime": 113
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459371454732,
  "executionTime": 63
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459371454796,
  "executionTime": 77
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
  "startTimestamp": 1459371446192,
  "executionTime": 12614
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
   "displayName": "org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
   "children": [
    {
     "id": "ID#testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)",
     "displayName": "testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)",
     "methodName": "testEnableRebalance",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371458818
 }
]

[
 "TEST_STARTED",
 "ID#testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)",
  "startTimestamp": 1459371458851,
  "executionTime": 1690
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
  "startTimestamp": 1459371458818,
  "executionTime": 1734
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.script.ScriptFieldIT",
   "displayName": "org.elasticsearch.script.ScriptFieldIT",
   "methodName": null,
   "className": "org.elasticsearch.script.ScriptFieldIT",
   "children": [
    {
     "id": "ID#testNativeScript(org.elasticsearch.script.ScriptFieldIT)",
     "displayName": "testNativeScript(org.elasticsearch.script.ScriptFieldIT)",
     "methodName": "testNativeScript",
     "className": "org.elasticsearch.script.ScriptFieldIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371460563
 }
]

[
 "TEST_STARTED",
 "ID#testNativeScript(org.elasticsearch.script.ScriptFieldIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNativeScript(org.elasticsearch.script.ScriptFieldIT)",
  "startTimestamp": 1459371460588,
  "executionTime": 2659
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.script.ScriptFieldIT",
  "startTimestamp": 1459371460563,
  "executionTime": 2721
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT",
   "displayName": "org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT",
   "methodName": null,
   "className": "org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT",
   "children": [
    {
     "id": "ID#testScanScrollWithShardExceptions(org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT)",
     "displayName": "testScanScrollWithShardExceptions(org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT)",
     "methodName": "testScanScrollWithShardExceptions",
     "className": "org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371463294
 }
]

[
 "TEST_STARTED",
 "ID#testScanScrollWithShardExceptions(org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScanScrollWithShardExceptions(org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT)",
  "startTimestamp": 1459371463315,
  "executionTime": 2470
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.scroll.SearchScrollWithFailingNodesIT",
  "startTimestamp": 1459371463294,
  "executionTime": 2517
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
   "displayName": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
   "children": [
    {
     "id": "ID#testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryThenFetchWithSort",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedSearchWithWrongQuery",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedMultiSearchWithWrongQuery",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testDfsQueryThenFetchWithSort",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryAndFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testDfsQueryAndFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testDfsQueryThenFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedSearchWithWrongFrom",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedMultiSearchWithWrongQueryWithFunctionScore",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryThenFetchWithFrom",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryThenFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testSimpleFacets",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371465829
 }
]

[
 "TEST_STARTED",
 "ID#testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371465857,
  "executionTime": 4687
 }
]

[
 "TEST_STARTED",
 "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371470544,
  "executionTime": 1188
 }
]

[
 "TEST_STARTED",
 "ID#testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371471732,
  "executionTime": 2577
 }
]

[
 "TEST_STARTED",
 "ID#testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371474310,
  "executionTime": 2877
 }
]

[
 "TEST_STARTED",
 "ID#testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371477187,
  "executionTime": 1470
 }
]

[
 "TEST_STARTED",
 "ID#testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371478657,
  "executionTime": 1437
 }
]

[
 "TEST_STARTED",
 "ID#testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371480094,
  "executionTime": 1988
 }
]

[
 "TEST_STARTED",
 "ID#testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371482083,
  "executionTime": 1631
 }
]

[
 "TEST_STARTED",
 "ID#testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371483714,
  "executionTime": 1288
 }
]

[
 "TEST_STARTED",
 "ID#testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371485003,
  "executionTime": 3136
 }
]

[
 "TEST_STARTED",
 "ID#testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371488139,
  "executionTime": 890
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459371489030,
  "executionTime": 1346
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
  "startTimestamp": 1459371465829,
  "executionTime": 24631
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.exists.types.TypesExistsIT",
   "displayName": "org.elasticsearch.indices.exists.types.TypesExistsIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.exists.types.TypesExistsIT",
   "children": [
    {
     "id": "ID#testSimple(org.elasticsearch.indices.exists.types.TypesExistsIT)",
     "displayName": "testSimple(org.elasticsearch.indices.exists.types.TypesExistsIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.indices.exists.types.TypesExistsIT",
     "children": []
    },
    {
     "id": "ID#testTypesExistsWithBlocks(org.elasticsearch.indices.exists.types.TypesExistsIT)",
     "displayName": "testTypesExistsWithBlocks(org.elasticsearch.indices.exists.types.TypesExistsIT)",
     "methodName": "testTypesExistsWithBlocks",
     "className": "org.elasticsearch.indices.exists.types.TypesExistsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371490471
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.indices.exists.types.TypesExistsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.indices.exists.types.TypesExistsIT)",
  "startTimestamp": 1459371490501,
  "executionTime": 3955
 }
]

[
 "TEST_STARTED",
 "ID#testTypesExistsWithBlocks(org.elasticsearch.indices.exists.types.TypesExistsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTypesExistsWithBlocks(org.elasticsearch.indices.exists.types.TypesExistsIT)",
  "startTimestamp": 1459371494456,
  "executionTime": 1036
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.exists.types.TypesExistsIT",
  "startTimestamp": 1459371490471,
  "executionTime": 5074
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.IndicesOptionsIntegrationIT",
   "displayName": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
   "children": [
    {
     "id": "ID#testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutWarmerWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testCloseApiSpecifiedIndices",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutWarmer",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testWildcardBehaviour",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testCloseApiWildcards",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableSnapshotRestore",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteIndexWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteIndex",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testAllMissingLenient",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutAliasWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableMultipleIndices",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteWarmer",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableSingleIndex",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testUpdateSettings",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteWarmerWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutMapping",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testAllMissingStrict",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testWildcardBehaviourSnapshotRestore",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutAlias",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableSingleIndexThatIsClosed",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371495568
 }
]

[
 "TEST_STARTED",
 "ID#testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371495600,
  "executionTime": 2140
 }
]

[
 "TEST_STARTED",
 "ID#testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371497740,
  "executionTime": 2099
 }
]

[
 "TEST_STARTED",
 "ID#testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371499839,
  "executionTime": 1179
 }
]

[
 "TEST_STARTED",
 "ID#testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371501019,
  "executionTime": 3048
 }
]

[
 "TEST_STARTED",
 "ID#testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371504068,
  "executionTime": 7248
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:58:32,314][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap1] failed to restore snapshot%0A[test2] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:79)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:58:32,324][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap1] failed to restore snapshot%0A[test2] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:79)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371511316,
  "executionTime": 4120
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371515437,
  "executionTime": 1720
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371517158,
  "executionTime": 728
 }
]

[
 "TEST_STARTED",
 "ID#testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371517886,
  "executionTime": 335
 }
]

[
 "TEST_STARTED",
 "ID#testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371518222,
  "executionTime": 2547
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371520770,
  "executionTime": 1311
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371522081,
  "executionTime": 884
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371522965,
  "executionTime": 1245
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371524211,
  "executionTime": 3846
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371528057,
  "executionTime": 4402
 }
]

[
 "TEST_STARTED",
 "ID#testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371532459,
  "executionTime": 4481
 }
]

[
 "TEST_STARTED",
 "ID#testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371536940,
  "executionTime": 998
 }
]

[
 "TEST_STARTED",
 "ID#testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:58:59,219][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap1] failed to restore snapshot%0A[bar*] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:115)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:05,222][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap3] failed to restore snapshot%0A[baz*] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:115)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371537938,
  "executionTime": 12859
 }
]

[
 "TEST_STARTED",
 "ID#testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371550798,
  "executionTime": 1356
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459371552155,
  "executionTime": 2964
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.IndicesOptionsIntegrationIT",
  "startTimestamp": 1459371495568,
  "executionTime": 60192
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
   "displayName": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
   "methodName": null,
   "className": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
   "children": [
    {
     "id": "ID#testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "displayName": "testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "methodName": "testRestoreOldSnapshots",
     "className": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
     "children": []
    },
    {
     "id": "ID#testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "displayName": "testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "methodName": "testRestoreUnsupportedSnapshots",
     "className": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371556181
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:28,678][WARN ][org.elasticsearch.bwcompat] Old repositories tests contain extra repo: 2.0.0-beta1%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
  "startTimestamp": 1459371556205,
  "executionTime": 12519
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,196][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,197][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,198][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,230][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,230][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,230][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,264][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,264][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,264][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.1.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.1.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.1.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,293][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,293][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,293][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.6.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.6.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.6.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,335][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,335][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,335][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,366][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,366][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,366][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,411][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,411][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,412][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,453][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,453][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,453][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,488][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,488][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,488][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.5] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,536][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,536][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,536][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,567][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,568][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,602][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,602][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,602][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.5.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.5.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.5.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,635][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,635][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,664][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,664][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,664][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,698][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,698][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,698][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.0.beta1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.0.beta1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.0.beta1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,730][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,730][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,730][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.4] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,762][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,762][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,762][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.7] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.7] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.7] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,812][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,812][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,844][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,844][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,845][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,875][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,875][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,876][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.4] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,906][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,907][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,907][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.4] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,938][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,938][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,939][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.1.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,969][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,970][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:29,970][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,009][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,009][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,010][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.5] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,042][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,042][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,042][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.6.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.6.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.6.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,078][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,078][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,078][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.5.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.5.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.5.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,120][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,121][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0.rc2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0.rc2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0.rc2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,150][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,150][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0.beta2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0.beta2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0.beta2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,183][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,183][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,256][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,256][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,257][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,292][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,292][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,293][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,325][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,326][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,328][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,375][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,376][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,376][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.6.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.6.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.6.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,417][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,417][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,418][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.5.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.5.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.5.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,468][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,469][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,469][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.6] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.6] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.6] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,517][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,517][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,517][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,552][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,552][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,552][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,597][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,597][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,597][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.9] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.9] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.9] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,632][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,632][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,632][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.1.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.1.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.1.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,667][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,667][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,667][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,707][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,708][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0.rc1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0.rc1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0.rc1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,739][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-0.20.6-and-1.1.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-0.20.6-and-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-0.20.6-and-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,766][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,766][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:30,766][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.8] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.8] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.8] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
  "startTimestamp": 1459371568725,
  "executionTime": 2228
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
  "startTimestamp": 1459371556181,
  "executionTime": 14815
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.allocation.FilteringAllocationIT",
   "displayName": "org.elasticsearch.cluster.allocation.FilteringAllocationIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.allocation.FilteringAllocationIT",
   "children": [
    {
     "id": "ID#testDecommissionNodeNoReplicas(org.elasticsearch.cluster.allocation.FilteringAllocationIT)",
     "displayName": "testDecommissionNodeNoReplicas(org.elasticsearch.cluster.allocation.FilteringAllocationIT)",
     "methodName": "testDecommissionNodeNoReplicas",
     "className": "org.elasticsearch.cluster.allocation.FilteringAllocationIT",
     "children": []
    },
    {
     "id": "ID#testDisablingAllocationFiltering(org.elasticsearch.cluster.allocation.FilteringAllocationIT)",
     "displayName": "testDisablingAllocationFiltering(org.elasticsearch.cluster.allocation.FilteringAllocationIT)",
     "methodName": "testDisablingAllocationFiltering",
     "className": "org.elasticsearch.cluster.allocation.FilteringAllocationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371571008
 }
]

[
 "TEST_STARTED",
 "ID#testDecommissionNodeNoReplicas(org.elasticsearch.cluster.allocation.FilteringAllocationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDecommissionNodeNoReplicas(org.elasticsearch.cluster.allocation.FilteringAllocationIT)",
  "startTimestamp": 1459371571036,
  "executionTime": 3545
 }
]

[
 "TEST_STARTED",
 "ID#testDisablingAllocationFiltering(org.elasticsearch.cluster.allocation.FilteringAllocationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisablingAllocationFiltering(org.elasticsearch.cluster.allocation.FilteringAllocationIT)",
  "startTimestamp": 1459371574582,
  "executionTime": 3562
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.allocation.FilteringAllocationIT",
  "startTimestamp": 1459371571008,
  "executionTime": 7192
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
   "displayName": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
   "methodName": null,
   "className": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
   "children": [
    {
     "id": "ID#testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "displayName": "testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "methodName": "testAllocatedProcessors",
     "className": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
     "children": []
    },
    {
     "id": "ID#testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "displayName": "testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "methodName": "testNodesInfos",
     "className": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371578212
 }
]

[
 "TEST_STARTED",
 "ID#testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
  "startTimestamp": 1459371578253,
  "executionTime": 297
 }
]

[
 "TEST_STARTED",
 "ID#testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
  "startTimestamp": 1459371578550,
  "executionTime": 346
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
  "startTimestamp": 1459371578212,
  "executionTime": 713
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.TopHitsIT",
   "displayName": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
   "children": [
    {
     "id": "ID#testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testNestedFetchFeatures",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testBasicsGetProperty",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTopHitsInNestedSimple",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testSortByBucket",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testFetchFeatures",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testDontExplode",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testPagination",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testBreadthFirst",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTopHitsInSecondLayerNested",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testEmptyIndex",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTrackScores",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testFieldCollapsing",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testInvalidSortField",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTopHitsInNested",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testIssue11119",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371578951
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371589332,
  "executionTime": 141
 }
]

[
 "TEST_STARTED",
 "ID#testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371589474,
  "executionTime": 451
 }
]

[
 "TEST_STARTED",
 "ID#testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371589926,
  "executionTime": 39
 }
]

[
 "TEST_STARTED",
 "ID#testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371589965,
  "executionTime": 50
 }
]

[
 "TEST_STARTED",
 "ID#testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590016,
  "executionTime": 101
 }
]

[
 "TEST_STARTED",
 "ID#testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590117,
  "executionTime": 454
 }
]

[
 "TEST_STARTED",
 "ID#testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590572,
  "executionTime": 55
 }
]

[
 "TEST_STARTED",
 "ID#testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590627,
  "executionTime": 77
 }
]

[
 "TEST_STARTED",
 "ID#testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590705,
  "executionTime": 79
 }
]

[
 "TEST_STARTED",
 "ID#testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590784,
  "executionTime": 66
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590851,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590881,
  "executionTime": 98
 }
]

[
 "TEST_STARTED",
 "ID#testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371590980,
  "executionTime": 87
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371591068,
  "executionTime": 113
 }
]

[
 "TEST_STARTED",
 "ID#testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371591182,
  "executionTime": 514
 }
]

[
 "TEST_STARTED",
 "ID#testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459371591697,
  "executionTime": 73
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.TopHitsIT",
  "startTimestamp": 1459371578951,
  "executionTime": 16264
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.state.SimpleIndexStateIT",
   "displayName": "org.elasticsearch.indices.state.SimpleIndexStateIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
   "children": [
    {
     "id": "ID#testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testFastCloseAfterCreateDoesNotClose",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testConsistencyAfterIndexCreationFailure",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testSimpleOpenClose",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371595244
 }
]

[
 "TEST_STARTED",
 "ID#testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1459371595269,
  "executionTime": 1603
 }
]

[
 "TEST_STARTED",
 "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1459371596872,
  "executionTime": 353
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:58,527][WARN ][org.elasticsearch.action.index] [node_s2] unexpected error during the primary phase for action [indices:data/write/index], request [index {[test][type1][1], source[{\"field1\":\"value1\"}]}]%0A[test] IndexClosedException[closed]%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:170)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:93)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteSingleIndex(IndexNameExpressionResolver.java:206)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:414)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:130)%0A%09at org.elasticsearch.action.index.TransportIndexAction.innerExecute(TransportIndexAction.java:133)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:117)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.client.node.NodeClient.doExecute(NodeClient.java:59)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.client.FilterClient.doExecute(FilterClient.java:52)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:60)%0A%09at org.elasticsearch.action.ActionRequestBuilder.get(ActionRequestBuilder.java:68)%0A%09at org.elasticsearch.indices.state.SimpleIndexStateIT.testSimpleOpenClose(SimpleIndexStateIT.java:77)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1459371597225,
  "executionTime": 2655
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 13:59:59,936][WARN ][org.elasticsearch.test.transport] [node_s1] Transport response handler not found of id [25]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.state.SimpleIndexStateIT",
  "startTimestamp": 1459371595244,
  "executionTime": 4749
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
   "children": [
    {
     "id": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "displayName": "testMultiValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "methodName": "testMultiValuedField",
     "className": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldWithSubAggregation(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "displayName": "testSingleValuedFieldWithSubAggregation(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "methodName": "testSingleValuedFieldWithSubAggregation",
     "className": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
     "children": []
    },
    {
     "id": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "displayName": "testPartiallyUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "methodName": "testPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldNormalised(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "displayName": "testSingleValuedFieldNormalised(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "methodName": "testSingleValuedFieldNormalised",
     "className": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "displayName": "testSingleValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "methodName": "testSingleValuedField",
     "className": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
     "children": []
    },
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371600013
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
  "startTimestamp": 1459371603374,
  "executionTime": 52
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldWithSubAggregation(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldWithSubAggregation(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
  "startTimestamp": 1459371603426,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
  "startTimestamp": 1459371603455,
  "executionTime": 34
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldNormalised(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldNormalised(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
  "startTimestamp": 1459371603489,
  "executionTime": 49
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
  "startTimestamp": 1459371603538,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT)",
  "startTimestamp": 1459371603566,
  "executionTime": 25
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.DateDerivativeIT",
  "startTimestamp": 1459371600013,
  "executionTime": 5682
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
   "displayName": "org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
   "children": [
    {
     "id": "ID#testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)",
     "displayName": "testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)",
     "methodName": "testIndicesStatsWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371605706
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)",
  "startTimestamp": 1459371605737,
  "executionTime": 1456
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
  "startTimestamp": 1459371605706,
  "executionTime": 1495
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
   "displayName": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
   "children": [
    {
     "id": "ID#testDocValuesInvalidMapping(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "displayName": "testDocValuesInvalidMapping(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "methodName": "testDocValuesInvalidMapping",
     "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
     "children": []
    },
    {
     "id": "ID#testDocValuesInvalidMappingOnUpdate(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "displayName": "testDocValuesInvalidMappingOnUpdate(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "methodName": "testDocValuesInvalidMappingOnUpdate",
     "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
     "children": []
    },
    {
     "id": "ID#testAllEnabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "displayName": "testAllEnabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "methodName": "testAllEnabled",
     "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
     "children": []
    },
    {
     "id": "ID#testAllDisabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "displayName": "testAllDisabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "methodName": "testAllDisabled",
     "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
     "children": []
    },
    {
     "id": "ID#testDisabledSizeTimestampIndexDoNotLooseMappings(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "displayName": "testDisabledSizeTimestampIndexDoNotLooseMappings(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "methodName": "testDisabledSizeTimestampIndexDoNotLooseMappings",
     "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
     "children": []
    },
    {
     "id": "ID#testAllConflicts(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "displayName": "testAllConflicts(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "methodName": "testAllConflicts",
     "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
     "children": []
    },
    {
     "id": "ID#testAllWithDefault(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "displayName": "testAllWithDefault(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
     "methodName": "testAllWithDefault",
     "className": "org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371607213
 }
]

[
 "TEST_STARTED",
 "ID#testDocValuesInvalidMapping(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocValuesInvalidMapping(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
  "startTimestamp": 1459371607238,
  "executionTime": 244
 }
]

[
 "TEST_STARTED",
 "ID#testDocValuesInvalidMappingOnUpdate(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocValuesInvalidMappingOnUpdate(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
  "startTimestamp": 1459371607482,
  "executionTime": 212
 }
]

[
 "TEST_STARTED",
 "ID#testAllEnabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllEnabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
  "startTimestamp": 1459371607694,
  "executionTime": 584
 }
]

[
 "TEST_STARTED",
 "ID#testAllDisabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllDisabled(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
  "startTimestamp": 1459371608279,
  "executionTime": 1302
 }
]

[
 "TEST_STARTED",
 "ID#testDisabledSizeTimestampIndexDoNotLooseMappings(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisabledSizeTimestampIndexDoNotLooseMappings(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
  "startTimestamp": 1459371609581,
  "executionTime": 761
 }
]

[
 "TEST_STARTED",
 "ID#testAllConflicts(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllConflicts(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
  "startTimestamp": 1459371610343,
  "executionTime": 622
 }
]

[
 "TEST_STARTED",
 "ID#testAllWithDefault(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllWithDefault(org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT)",
  "startTimestamp": 1459371610965,
  "executionTime": 1380
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.update.UpdateMappingOnClusterIT",
  "startTimestamp": 1459371607213,
  "executionTime": 5157
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.RecoverAfterNodesIT",
   "displayName": "org.elasticsearch.gateway.RecoverAfterNodesIT",
   "methodName": null,
   "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
   "children": [
    {
     "id": "ID#testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "displayName": "testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "methodName": "testRecoverAfterMasterNodes",
     "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
     "children": []
    },
    {
     "id": "ID#testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "displayName": "testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "methodName": "testRecoverAfterDataNodes",
     "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
     "children": []
    },
    {
     "id": "ID#testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "displayName": "testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "methodName": "testRecoverAfterNodes",
     "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371612382
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
  "startTimestamp": 1459371612468,
  "executionTime": 786
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
  "startTimestamp": 1459371613255,
  "executionTime": 1116
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
  "startTimestamp": 1459371614372,
  "executionTime": 10648
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.RecoverAfterNodesIT",
  "startTimestamp": 1459371612382,
  "executionTime": 12681
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.GatewayIndexStateIT",
   "displayName": "org.elasticsearch.gateway.GatewayIndexStateIT",
   "methodName": null,
   "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
   "children": [
    {
     "id": "ID#testSimpleOpenClose(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "displayName": "testSimpleOpenClose(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "methodName": "testSimpleOpenClose",
     "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testTwoNodesSingleDoc(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "displayName": "testTwoNodesSingleDoc(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "methodName": "testTwoNodesSingleDoc",
     "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testJustMasterNode(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "displayName": "testJustMasterNode(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "methodName": "testJustMasterNode",
     "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testDanglingIndicesConflictWithAlias(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "displayName": "testDanglingIndicesConflictWithAlias(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "methodName": "testDanglingIndicesConflictWithAlias",
     "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testMappingMetaDataParsed(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "displayName": "testMappingMetaDataParsed(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "methodName": "testMappingMetaDataParsed",
     "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testDanglingIndices(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "displayName": "testDanglingIndices(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "methodName": "testDanglingIndices",
     "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testJustMasterNodeAndJustDataNode(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "displayName": "testJustMasterNodeAndJustDataNode(org.elasticsearch.gateway.GatewayIndexStateIT)",
     "methodName": "testJustMasterNodeAndJustDataNode",
     "className": "org.elasticsearch.gateway.GatewayIndexStateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371625077
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleOpenClose(org.elasticsearch.gateway.GatewayIndexStateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:25,589][WARN ][org.elasticsearch.action.index] [node_t1] unexpected error during the primary phase for action [indices:data/write/index], request [index {[test][type1][1], source[{\"field1\":\"value1\"}]}]%0A[test] IndexClosedException[closed]%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:170)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:93)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteSingleIndex(IndexNameExpressionResolver.java:206)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:414)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:130)%0A%09at org.elasticsearch.action.index.TransportIndexAction.innerExecute(TransportIndexAction.java:133)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:117)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.client.node.NodeClient.doExecute(NodeClient.java:59)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.client.FilterClient.doExecute(FilterClient.java:52)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:60)%0A%09at org.elasticsearch.gateway.GatewayIndexStateIT.testSimpleOpenClose(GatewayIndexStateIT.java:111)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:28,445][WARN ][org.elasticsearch.action.index] [node_t1] unexpected error during the primary phase for action [indices:data/write/index], request [index {[test][type1][1], source[{\"field1\":\"value1\"}]}]%0A[test] IndexClosedException[closed]%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:170)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:93)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteSingleIndex(IndexNameExpressionResolver.java:206)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:414)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:130)%0A%09at org.elasticsearch.action.index.TransportIndexAction.innerExecute(TransportIndexAction.java:133)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:117)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.client.node.NodeClient.doExecute(NodeClient.java:59)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.client.FilterClient.doExecute(FilterClient.java:52)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:60)%0A%09at org.elasticsearch.gateway.GatewayIndexStateIT.testSimpleOpenClose(GatewayIndexStateIT.java:154)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleOpenClose(org.elasticsearch.gateway.GatewayIndexStateIT)",
  "startTimestamp": 1459371625097,
  "executionTime": 4236
 }
]

[
 "TEST_STARTED",
 "ID#testTwoNodesSingleDoc(org.elasticsearch.gateway.GatewayIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoNodesSingleDoc(org.elasticsearch.gateway.GatewayIndexStateIT)",
  "startTimestamp": 1459371629333,
  "executionTime": 6101
 }
]

[
 "TEST_STARTED",
 "ID#testJustMasterNode(org.elasticsearch.gateway.GatewayIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testJustMasterNode(org.elasticsearch.gateway.GatewayIndexStateIT)",
  "startTimestamp": 1459371635434,
  "executionTime": 308
 }
]

[
 "TEST_STARTED",
 "ID#testDanglingIndicesConflictWithAlias(org.elasticsearch.gateway.GatewayIndexStateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:38,526][WARN ][org.elasticsearch.gateway] [node_t0] ignoring dangled index [test] on node [{node_t2}{NJNhcZmXTN6cP3_rl5QeJA}{local}{local[244]}[mode=>local]] due to an existing alias with the same name%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:38,527][WARN ][org.elasticsearch.gateway] [node_t0] ignoring dangled index [test] on node [{node_t2}{NJNhcZmXTN6cP3_rl5QeJA}{local}{local[244]}[mode=>local]] due to an existing alias with the same name%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:38,818][WARN ][org.elasticsearch.gateway] [node_t0] ignoring dangled index [test] on node [{node_t2}{NJNhcZmXTN6cP3_rl5QeJA}{local}{local[244]}[mode=>local]] due to an existing alias with the same name%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:38,818][WARN ][org.elasticsearch.gateway] [node_t0] ignoring dangled index [test] on node [{node_t2}{NJNhcZmXTN6cP3_rl5QeJA}{local}{local[244]}[mode=>local]] due to an existing alias with the same name%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:38,972][WARN ][org.elasticsearch.gateway] [node_t0] ignoring dangled index [test] on node [{node_t2}{NJNhcZmXTN6cP3_rl5QeJA}{local}{local[244]}[mode=>local]] due to an existing alias with the same name%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:39,111][WARN ][org.elasticsearch.gateway] [node_t0] ignoring dangled index [test] on node [{node_t2}{NJNhcZmXTN6cP3_rl5QeJA}{local}{local[244]}[mode=>local]] due to an existing alias with the same name%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:39,111][WARN ][org.elasticsearch.gateway] [node_t0] ignoring dangled index [test] on node [{node_t2}{NJNhcZmXTN6cP3_rl5QeJA}{local}{local[244]}[mode=>local]] due to an existing alias with the same name%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDanglingIndicesConflictWithAlias(org.elasticsearch.gateway.GatewayIndexStateIT)",
  "startTimestamp": 1459371635743,
  "executionTime": 5659
 }
]

[
 "TEST_STARTED",
 "ID#testMappingMetaDataParsed(org.elasticsearch.gateway.GatewayIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMappingMetaDataParsed(org.elasticsearch.gateway.GatewayIndexStateIT)",
  "startTimestamp": 1459371641402,
  "executionTime": 947
 }
]

[
 "TEST_STARTED",
 "ID#testDanglingIndices(org.elasticsearch.gateway.GatewayIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDanglingIndices(org.elasticsearch.gateway.GatewayIndexStateIT)",
  "startTimestamp": 1459371642349,
  "executionTime": 4070
 }
]

[
 "TEST_STARTED",
 "ID#testJustMasterNodeAndJustDataNode(org.elasticsearch.gateway.GatewayIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testJustMasterNodeAndJustDataNode(org.elasticsearch.gateway.GatewayIndexStateIT)",
  "startTimestamp": 1459371646419,
  "executionTime": 893
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.GatewayIndexStateIT",
  "startTimestamp": 1459371625077,
  "executionTime": 22343
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.update.UpdateIT",
   "displayName": "org.elasticsearch.update.UpdateIT",
   "methodName": null,
   "className": "org.elasticsearch.update.UpdateIT",
   "children": [
    {
     "id": "ID#testContextVariables(org.elasticsearch.update.UpdateIT)",
     "displayName": "testContextVariables(org.elasticsearch.update.UpdateIT)",
     "methodName": "testContextVariables",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpsert(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpsert(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpsert",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testIndexAutoCreation(org.elasticsearch.update.UpdateIT)",
     "displayName": "testIndexAutoCreation(org.elasticsearch.update.UpdateIT)",
     "methodName": "testIndexAutoCreation",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpdateRequestWithBothScriptAndDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpsertFields(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpsertFields(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpsertFields",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpdateRequestWithScriptAndShouldUpsertDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testNotUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testNotUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testNotUpsertDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testVersionedUpdate(org.elasticsearch.update.UpdateIT)",
     "displayName": "testVersionedUpdate(org.elasticsearch.update.UpdateIT)",
     "methodName": "testVersionedUpdate",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)",
     "displayName": "testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)",
     "methodName": "testStressUpdateDeleteConcurrency",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)",
     "displayName": "testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)",
     "methodName": "testConcurrentUpdateWithRetryOnConflict",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpsertDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpdate(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpdate(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpdate",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testScriptedUpsert(org.elasticsearch.update.UpdateIT)",
     "displayName": "testScriptedUpsert(org.elasticsearch.update.UpdateIT)",
     "methodName": "testScriptedUpsert",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371647435
 }
]

[
 "TEST_STARTED",
 "ID#testContextVariables(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testContextVariables(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371647464,
  "executionTime": 2373
 }
]

[
 "TEST_STARTED",
 "ID#testUpsert(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpsert(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371649838,
  "executionTime": 1032
 }
]

[
 "TEST_STARTED",
 "ID#testIndexAutoCreation(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexAutoCreation(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371650871,
  "executionTime": 437
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371651309,
  "executionTime": 939
 }
]

[
 "TEST_STARTED",
 "ID#testUpsertFields(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpsertFields(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371652249,
  "executionTime": 1863
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371654113,
  "executionTime": 623
 }
]

[
 "TEST_STARTED",
 "ID#testNotUpsertDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotUpsertDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371654736,
  "executionTime": 789
 }
]

[
 "TEST_STARTED",
 "ID#testVersionedUpdate(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVersionedUpdate(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371655525,
  "executionTime": 749
 }
]

[
 "TEST_STARTED",
 "ID#testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,335][WARN ][org.elasticsearch.index.shard] [node_s1] [test][5] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,355][WARN ][org.elasticsearch.index.shard] [node_s1] [test][7] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,371][WARN ][org.elasticsearch.index.shard] [node_s1] [test][3] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,391][WARN ][org.elasticsearch.index.shard] [node_s1] [test][1] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,426][WARN ][org.elasticsearch.index.shard] [node_s0] [test][4] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,446][WARN ][org.elasticsearch.index.shard] [node_s0] [test][6] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,456][WARN ][org.elasticsearch.index.shard] [node_s0] [test][2] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,472][WARN ][org.elasticsearch.index.shard] [node_s0] [test][0] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:56,549][WARN ][org.elasticsearch.index.shard] [node_s0] [test][8] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:57,343][ERROR][org.elasticsearch.update ] Actual version [93] Expected version [93] Total failures [124]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:57,344][ERROR][org.elasticsearch.update ] Actual version [13] Expected version [13] Total failures [204]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:57,345][ERROR][org.elasticsearch.update ] Actual version [95] Expected version [95] Total failures [122]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:57,346][ERROR][org.elasticsearch.update ] Actual version [46] Expected version [46] Total failures [171]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:57,347][ERROR][org.elasticsearch.update ] Actual version [1] Expected version [1] Total failures [216]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:00:57,348][ERROR][org.elasticsearch.update ] Actual version [34] Expected version [34] Total failures [183]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371656275,
  "executionTime": 1528
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371657804,
  "executionTime": 2374
 }
]

[
 "TEST_STARTED",
 "ID#testUpsertDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpsertDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371660178,
  "executionTime": 1154
 }
]

[
 "TEST_STARTED",
 "ID#testUpdate(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdate(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371661333,
  "executionTime": 2283
 }
]

[
 "TEST_STARTED",
 "ID#testScriptedUpsert(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScriptedUpsert(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459371663616,
  "executionTime": 562
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.update.UpdateIT",
  "startTimestamp": 1459371647435,
  "executionTime": 16776
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.versioning.ConcurrentDocumentOperationIT",
   "displayName": "org.elasticsearch.versioning.ConcurrentDocumentOperationIT",
   "methodName": null,
   "className": "org.elasticsearch.versioning.ConcurrentDocumentOperationIT",
   "children": [
    {
     "id": "ID#testConcurrentOperationOnSameDoc(org.elasticsearch.versioning.ConcurrentDocumentOperationIT)",
     "displayName": "testConcurrentOperationOnSameDoc(org.elasticsearch.versioning.ConcurrentDocumentOperationIT)",
     "methodName": "testConcurrentOperationOnSameDoc",
     "className": "org.elasticsearch.versioning.ConcurrentDocumentOperationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371664219
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentOperationOnSameDoc(org.elasticsearch.versioning.ConcurrentDocumentOperationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentOperationOnSameDoc(org.elasticsearch.versioning.ConcurrentDocumentOperationIT)",
  "startTimestamp": 1459371664241,
  "executionTime": 461
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.versioning.ConcurrentDocumentOperationIT",
  "startTimestamp": 1459371664219,
  "executionTime": 494
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT",
   "displayName": "org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT",
   "children": [
    {
     "id": "ID#testConcurrentDynamicMapping(org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT)",
     "displayName": "testConcurrentDynamicMapping(org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT)",
     "methodName": "testConcurrentDynamicMapping",
     "className": "org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371664721
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentDynamicMapping(org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentDynamicMapping(org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT)",
  "startTimestamp": 1459371664735,
  "executionTime": 11056
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.mapping.ConcurrentDynamicTemplateIT",
  "startTimestamp": 1459371664721,
  "executionTime": 11118
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.recovery.IndexRecoveryIT",
   "displayName": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
   "children": [
    {
     "id": "ID#testDisconnectsWhileRecovering(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "displayName": "testDisconnectsWhileRecovering(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "methodName": "testDisconnectsWhileRecovering",
     "className": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
     "children": []
    },
    {
     "id": "ID#testRerouteRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "displayName": "testRerouteRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "methodName": "testRerouteRecovery",
     "className": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
     "children": []
    },
    {
     "id": "ID#testGatewayRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "displayName": "testGatewayRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "methodName": "testGatewayRecovery",
     "className": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
     "children": []
    },
    {
     "id": "ID#testReplicaRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "displayName": "testReplicaRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "methodName": "testReplicaRecovery",
     "className": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
     "children": []
    },
    {
     "id": "ID#testGatewayRecoveryTestActiveOnly(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "displayName": "testGatewayRecoveryTestActiveOnly(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "methodName": "testGatewayRecoveryTestActiveOnly",
     "className": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "displayName": "testSnapshotRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
     "methodName": "testSnapshotRecovery",
     "className": "org.elasticsearch.indices.recovery.IndexRecoveryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371675858
 }
]

[
 "TEST_STARTED",
 "ID#testDisconnectsWhileRecovering(org.elasticsearch.indices.recovery.IndexRecoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisconnectsWhileRecovering(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
  "startTimestamp": 1459371675881,
  "executionTime": 2004
 }
]

[
 "TEST_STARTED",
 "ID#testRerouteRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:17,887][INFO ][org.elasticsearch.indices.recovery] [IndexRecoveryIT#testRerouteRecovery]: setup test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:17,890][INFO ][org.elasticsearch.indices.recovery] [IndexRecoveryIT#testRerouteRecovery]: starting test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:17,891][INFO ][org.elasticsearch.indices.recovery] --> start node A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:17,947][DEBUG][org.elasticsearch.indices.recovery] [node_t0] using max_bytes_per_sec[28mb], concurrent_streams [5], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:17,960][INFO ][org.elasticsearch.indices.recovery] --> create index on node: node_t0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:17,960][INFO ][org.elasticsearch.indices.recovery] --> creating test index: test-idx-1%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:18,039][DEBUG][org.elasticsearch.indices.recovery] indices [_all] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:18,039][INFO ][org.elasticsearch.indices.recovery] --> indexing sample data%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:18,078][INFO ][org.elasticsearch.indices.recovery] Index [777] docs async: [false] bulk: [true] partitions [6]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,219][INFO ][org.elasticsearch.indices.recovery] --> start node B%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,279][DEBUG][org.elasticsearch.indices.recovery] [node_t1] using max_bytes_per_sec[40mb], concurrent_streams [5], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,323][DEBUG][org.elasticsearch.indices.recovery] indices [_all] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,323][INFO ][org.elasticsearch.indices.recovery] --> slowing down recoveries%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,325][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.max_bytes_per_sec] from [40mb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,334][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.file_chunk_size] from [512kb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,335][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.max_bytes_per_sec] from [28mb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,335][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.file_chunk_size] from [512kb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,337][INFO ][org.elasticsearch.indices.recovery] --> move shard from: node_t0 to: node_t1%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,364][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] started recovery from {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local], id [210]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,364][TRACE][org.elasticsearch.indices.recovery] [node_t1] collecting local files for [test-idx-1][0] [210]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,384][INFO ][org.elasticsearch.indices.recovery] --> waiting for recovery to start both on source and target%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,386][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] starting recovery from {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,386][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] starting recovery to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,386][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [2] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,390][INFO ][org.elasticsearch.indices.recovery] --> request recoveries%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,391][INFO ][org.elasticsearch.indices.recovery] --> request node recovery stats%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,400][INFO ][org.elasticsearch.indices.recovery] --> checking throttling increases%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,421][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,421][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,421][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,421][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: recovering [segments_2], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,421][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: recovering_files [4] with total_size [176.6kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,979][INFO ][org.elasticsearch.indices.recovery] --> speeding up recoveries%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,980][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.max_bytes_per_sec] from [17.6kb] to [20mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,981][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.file_chunk_size] from [17.6kb] to [512kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,982][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.max_bytes_per_sec] from [17.6kb] to [20mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:19,982][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.file_chunk_size] from [17.6kb] to [512kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,738][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: remote engine start took [81.4ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase1] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase2] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] no translog operations to send to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery [phase2] to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: took [309.6micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,820][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] finalizing recovery to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,821][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] finalizing recovery to {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]: took [587.2micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,821][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] marking recovery from {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local] as done, id [210]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,823][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery completed from {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local], took[1.4s]%0A   phase1: recovered_files [4] with total_size of [176.6kb], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [81ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,936][DEBUG][org.elasticsearch.indices.recovery] indices [_all] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,937][INFO ][org.elasticsearch.indices.recovery] --> bump replica count%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,987][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] started recovery from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local], id [211]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,987][TRACE][org.elasticsearch.indices.recovery] [node_t0] collecting local files for [test-idx-1][0] [211]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,991][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] starting recovery from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,991][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] starting recovery to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:20,991][TRACE][org.elasticsearch.indices.recovery] [node_t1] captured translog id [1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,008][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,008][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,008][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,008][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: recovering [segments_3], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,008][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: recovering_files [4] with total_size [176.6kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,067][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,090][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: remote engine start took [23.2ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,090][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,090][TRACE][org.elasticsearch.indices.recovery] [node_t1] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,090][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase2] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,090][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] no translog operations to send to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,091][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,091][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase2] to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: took [243micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,091][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] finalizing recovery to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,091][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] finalizing recovery to {node_t0}{VGm5gavKS7afi73yz9Cc4Q}{local}{local[276]}[mode=>local]: took [560.7micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,092][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] marking recovery from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local] as done, id [211]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,092][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test-idx-1][0] recovery completed from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local], took[104ms]%0A   phase1: recovered_files [4] with total_size of [176.6kb], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [23ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,122][DEBUG][org.elasticsearch.indices.recovery] indices [_all] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,123][INFO ][org.elasticsearch.indices.recovery] --> start node C%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,185][DEBUG][org.elasticsearch.indices.recovery] [node_t2] using max_bytes_per_sec[40mb], concurrent_streams [5], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,202][INFO ][org.elasticsearch.indices.recovery] [node_t2] updating [indices.recovery.max_bytes_per_sec] from [40mb] to [20mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,231][INFO ][org.elasticsearch.indices.recovery] --> slowing down recoveries%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,232][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.max_bytes_per_sec] from [20mb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,232][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.file_chunk_size] from [512kb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,232][INFO ][org.elasticsearch.indices.recovery] [node_t2] updating [indices.recovery.max_bytes_per_sec] from [20mb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,232][INFO ][org.elasticsearch.indices.recovery] [node_t2] updating [indices.recovery.file_chunk_size] from [512kb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,233][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.max_bytes_per_sec] from [20mb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,233][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.file_chunk_size] from [512kb] to [17.6kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,241][INFO ][org.elasticsearch.indices.recovery] --> move replica shard from: node_t0 to: node_t2%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,259][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test-idx-1][0] started recovery from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local], id [212]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,259][TRACE][org.elasticsearch.indices.recovery] [node_t2] collecting local files for [test-idx-1][0] [212]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,265][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test-idx-1][0] starting recovery from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,266][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] starting recovery to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,266][TRACE][org.elasticsearch.indices.recovery] [node_t1] captured translog id [1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,266][INFO ][org.elasticsearch.indices.recovery] --> speeding up recoveries%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,277][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.max_bytes_per_sec] from [17.6kb] to [20mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,277][INFO ][org.elasticsearch.indices.recovery] [node_t1] updating [indices.recovery.file_chunk_size] from [17.6kb] to [512kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,280][INFO ][org.elasticsearch.indices.recovery] [node_t2] updating [indices.recovery.max_bytes_per_sec] from [17.6kb] to [20mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,280][INFO ][org.elasticsearch.indices.recovery] [node_t2] updating [indices.recovery.file_chunk_size] from [17.6kb] to [512kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,281][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,281][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,281][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,281][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: recovering [segments_3], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,281][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: recovering_files [4] with total_size [176.6kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,281][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.max_bytes_per_sec] from [17.6kb] to [20mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,282][INFO ][org.elasticsearch.indices.recovery] [node_t0] updating [indices.recovery.file_chunk_size] from [17.6kb] to [512kb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,430][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,465][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: remote engine start took [35.5ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,465][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase1] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,465][TRACE][org.elasticsearch.indices.recovery] [node_t1] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,465][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase2] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,466][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] no translog operations to send to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,466][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,466][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] recovery [phase2] to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: took [251.9micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,466][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] finalizing recovery to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,466][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test-idx-1][0] finalizing recovery to {node_t2}{pqc8RwI0TlW2lc0FiG_IVA}{local}{local[280]}[mode=>local]: took [542.4micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,467][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test-idx-1][0] marking recovery from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local] as done, id [212]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,467][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test-idx-1][0] recovery completed from {node_t1}{DuYspanuS8CYK3hlQN2Njw}{local}{local[278]}[mode=>local], took[208ms]%0A   phase1: recovered_files [4] with total_size of [176.6kb], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [35ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,579][DEBUG][org.elasticsearch.indices.recovery] indices [_all] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,580][INFO ][org.elasticsearch.indices.recovery] [IndexRecoveryIT#testRerouteRecovery]: finished test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,580][INFO ][org.elasticsearch.indices.recovery] [IndexRecoveryIT#testRerouteRecovery]: cleaning up after test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,580][TRACE][org.elasticsearch.indices.recovery] Check consistency for [3] nodes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:21,695][INFO ][org.elasticsearch.indices.recovery] [IndexRecoveryIT#testRerouteRecovery]: cleaned up after test%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRerouteRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
  "startTimestamp": 1459371677885,
  "executionTime": 3811
 }
]

[
 "TEST_STARTED",
 "ID#testGatewayRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGatewayRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
  "startTimestamp": 1459371681696,
  "executionTime": 1485
 }
]

[
 "TEST_STARTED",
 "ID#testReplicaRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicaRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
  "startTimestamp": 1459371683182,
  "executionTime": 2484
 }
]

[
 "TEST_STARTED",
 "ID#testGatewayRecoveryTestActiveOnly(org.elasticsearch.indices.recovery.IndexRecoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGatewayRecoveryTestActiveOnly(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
  "startTimestamp": 1459371685666,
  "executionTime": 1746
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotRecovery(org.elasticsearch.indices.recovery.IndexRecoveryIT)",
  "startTimestamp": 1459371687412,
  "executionTime": 1927
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.recovery.IndexRecoveryIT",
  "startTimestamp": 1459371675858,
  "executionTime": 13716
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.scroll.SearchScrollIT",
   "displayName": "org.elasticsearch.search.scroll.SearchScrollIT",
   "methodName": null,
   "className": "org.elasticsearch.search.scroll.SearchScrollIT",
   "children": [
    {
     "id": "ID#testStringSortMissingAscTerminates(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testStringSortMissingAscTerminates(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testStringSortMissingAscTerminates",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testScrollAndUpdateIndex(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testScrollAndUpdateIndex(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testScrollAndUpdateIndex",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testSimpleScrollQueryThenFetchClearAllScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testSimpleScrollQueryThenFetchClearAllScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testSimpleScrollQueryThenFetchClearAllScrollIds",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testParseClearScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testParseClearScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testParseClearScrollRequest",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testClearIllegalScrollId(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testClearIllegalScrollId(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testClearIllegalScrollId",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testSimpleScrollQueryThenFetch_clearScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testSimpleScrollQueryThenFetch_clearScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testSimpleScrollQueryThenFetch_clearScrollIds",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testParseClearScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testParseClearScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testParseClearScrollRequestWithUnknownParamThrowsException",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testDeepScrollingDoesNotBlowUp(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testDeepScrollingDoesNotBlowUp(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testDeepScrollingDoesNotBlowUp",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testParseClearScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testParseClearScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testParseClearScrollRequestWithInvalidJsonThrowsException",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testSimpleScrollQueryThenFetch(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testSimpleScrollQueryThenFetch(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testSimpleScrollQueryThenFetch",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testParseSearchScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testParseSearchScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testParseSearchScrollRequest",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testClearNonExistentScrollId(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testClearNonExistentScrollId(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testClearNonExistentScrollId",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testThatNonExistingScrollIdReturnsCorrectException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testThatNonExistingScrollIdReturnsCorrectException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testThatNonExistingScrollIdReturnsCorrectException",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testParseSearchScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testParseSearchScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testParseSearchScrollRequestWithUnknownParamThrowsException",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testCloseAndReopenOrDeleteWithActiveScroll(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testCloseAndReopenOrDeleteWithActiveScroll(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testCloseAndReopenOrDeleteWithActiveScroll",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    },
    {
     "id": "ID#testParseSearchScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "displayName": "testParseSearchScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
     "methodName": "testParseSearchScrollRequestWithInvalidJsonThrowsException",
     "className": "org.elasticsearch.search.scroll.SearchScrollIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371689591
 }
]

[
 "TEST_STARTED",
 "ID#testStringSortMissingAscTerminates(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringSortMissingAscTerminates(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371689629,
  "executionTime": 856
 }
]

[
 "TEST_STARTED",
 "ID#testScrollAndUpdateIndex(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScrollAndUpdateIndex(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371690486,
  "executionTime": 6255
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleScrollQueryThenFetchClearAllScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleScrollQueryThenFetchClearAllScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371696742,
  "executionTime": 1286
 }
]

[
 "TEST_STARTED",
 "ID#testParseClearScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseClearScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371698029,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371698077,
  "executionTime": 955
 }
]

[
 "TEST_STARTED",
 "ID#testClearIllegalScrollId(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearIllegalScrollId(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371699032,
  "executionTime": 380
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleScrollQueryThenFetch_clearScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleScrollQueryThenFetch_clearScrollIds(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371699412,
  "executionTime": 927
 }
]

[
 "TEST_STARTED",
 "ID#testParseClearScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseClearScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371700339,
  "executionTime": 61
 }
]

[
 "TEST_STARTED",
 "ID#testDeepScrollingDoesNotBlowUp(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeepScrollingDoesNotBlowUp(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371700401,
  "executionTime": 975
 }
]

[
 "TEST_STARTED",
 "ID#testParseClearScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseClearScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371701376,
  "executionTime": 58
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleScrollQueryThenFetch(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleScrollQueryThenFetch(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371701434,
  "executionTime": 908
 }
]

[
 "TEST_STARTED",
 "ID#testParseSearchScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseSearchScrollRequest(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371702342,
  "executionTime": 52
 }
]

[
 "TEST_STARTED",
 "ID#testClearNonExistentScrollId(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearNonExistentScrollId(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371702394,
  "executionTime": 1016
 }
]

[
 "TEST_STARTED",
 "ID#testThatNonExistingScrollIdReturnsCorrectException(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatNonExistingScrollIdReturnsCorrectException(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371703411,
  "executionTime": 795
 }
]

[
 "TEST_STARTED",
 "ID#testParseSearchScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseSearchScrollRequestWithUnknownParamThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371704207,
  "executionTime": 52
 }
]

[
 "TEST_STARTED",
 "ID#testCloseAndReopenOrDeleteWithActiveScroll(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseAndReopenOrDeleteWithActiveScroll(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371704260,
  "executionTime": 1440
 }
]

[
 "TEST_STARTED",
 "ID#testParseSearchScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseSearchScrollRequestWithInvalidJsonThrowsException(org.elasticsearch.search.scroll.SearchScrollIT)",
  "startTimestamp": 1459371705701,
  "executionTime": 51
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.scroll.SearchScrollIT",
  "startTimestamp": 1459371689591,
  "executionTime": 16189
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.tribe.TribeIT",
   "displayName": "org.elasticsearch.tribe.TribeIT",
   "methodName": null,
   "className": "org.elasticsearch.tribe.TribeIT",
   "children": [
    {
     "id": "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testCloseAndOpenIndex",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testOnConflictPrefer",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testGlobalReadWriteBlocks",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testOnConflictDrop",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testIndexWriteBlocks",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testTribeOnOneCluster",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371705796
 }
]

[
 "TEST_STARTED",
 "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:47,144][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459371706004,
  "executionTime": 4442
 }
]

[
 "TEST_STARTED",
 "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:51,894][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459371710446,
  "executionTime": 4932
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:55,906][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459371715378,
  "executionTime": 1128
 }
]

[
 "TEST_STARTED",
 "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:01:57,950][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459371716506,
  "executionTime": 3689
 }
]

[
 "TEST_STARTED",
 "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:01,152][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459371720195,
  "executionTime": 2444
 }
]

[
 "TEST_STARTED",
 "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:02,849][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459371722639,
  "executionTime": 3165
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.tribe.TribeIT",
  "startTimestamp": 1459371705796,
  "executionTime": 20058
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
   "displayName": "org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
   "children": [
    {
     "id": "ID#testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)",
     "displayName": "testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)",
     "methodName": "testRegexpFilter",
     "className": "org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371725864
 }
]

[
 "TEST_STARTED",
 "ID#testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)",
  "startTimestamp": 1459371725892,
  "executionTime": 1418
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
  "startTimestamp": 1459371725864,
  "executionTime": 1468
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.explain.ExplainActionIT",
   "displayName": "org.elasticsearch.explain.ExplainActionIT",
   "methodName": null,
   "className": "org.elasticsearch.explain.ExplainActionIT",
   "children": [
    {
     "id": "ID#testSimple(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testSimple(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testStreamExplain(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testStreamExplain(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testStreamExplain",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWithFields",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWitSource",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWithFilteredAliasFetchSource",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainDateRangeInQueryString",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWithFilteredAlias",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371727344
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459371727371,
  "executionTime": 1982
 }
]

[
 "TEST_STARTED",
 "ID#testStreamExplain(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamExplain(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459371729353,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459371729445,
  "executionTime": 1071
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459371730517,
  "executionTime": 1557
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459371732074,
  "executionTime": 745
 }
]

[
 "TEST_STARTED",
 "ID#testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459371732819,
  "executionTime": 1122
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459371733942,
  "executionTime": 2242
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.explain.ExplainActionIT",
  "startTimestamp": 1459371727344,
  "executionTime": 8880
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.termvectors.GetTermVectorsIT",
   "displayName": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
   "methodName": null,
   "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
   "children": [
    {
     "id": "ID#testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testNotIndexedField",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testArtificialVsExisting",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testNoSuchDoc",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testSimpleWildCards",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testDfs",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testSimpleTermVectors",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testDuelWithAndWithoutTermVectors",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testDuelESLucene",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testArtificialNoDoc",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testFilterLength",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testPerFieldAnalyzer",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testExistingFieldButNotInDocNPE",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testRandomPayloadWithDelimitedPayloadTokenFilter",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testSimpleTermVectorsWithGenerate",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testExistingFieldWithNoTermVectorsNoNPE",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testFilterTermFreq",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testArtificialNonExistingField",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testTermVectorsWithVersion",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testFilterDocFreq",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testRandomSingleTermVectors",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371736489
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371736535,
  "executionTime": 1646
 }
]

[
 "TEST_STARTED",
 "ID#testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371738182,
  "executionTime": 1790
 }
]

[
 "TEST_STARTED",
 "ID#testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371739972,
  "executionTime": 851
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371740823,
  "executionTime": 526
 }
]

[
 "TEST_STARTED",
 "ID#testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371741350,
  "executionTime": 1387
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371742737,
  "executionTime": 3941
 }
]

[
 "TEST_STARTED",
 "ID#testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371746678,
  "executionTime": 2679
 }
]

[
 "TEST_STARTED",
 "ID#testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371749357,
  "executionTime": 2854
 }
]

[
 "TEST_STARTED",
 "ID#testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371752212,
  "executionTime": 1157
 }
]

[
 "TEST_STARTED",
 "ID#testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371753370,
  "executionTime": 1071
 }
]

[
 "TEST_STARTED",
 "ID#testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371754441,
  "executionTime": 1565
 }
]

[
 "TEST_STARTED",
 "ID#testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371756007,
  "executionTime": 625
 }
]

[
 "TEST_STARTED",
 "ID#testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371756632,
  "executionTime": 813
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371757446,
  "executionTime": 5345
 }
]

[
 "TEST_STARTED",
 "ID#testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371762791,
  "executionTime": 1394
 }
]

[
 "TEST_STARTED",
 "ID#testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371764185,
  "executionTime": 677
 }
]

[
 "TEST_STARTED",
 "ID#testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371764862,
  "executionTime": 172
 }
]

[
 "TEST_STARTED",
 "ID#testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371765034,
  "executionTime": 1128
 }
]

[
 "TEST_STARTED",
 "ID#testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371766162,
  "executionTime": 1128
 }
]

[
 "TEST_STARTED",
 "ID#testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1459371767290,
  "executionTime": 5542
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.termvectors.GetTermVectorsIT",
  "startTimestamp": 1459371736489,
  "executionTime": 36387
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.broadcast.BroadcastActionsIT",
   "displayName": "org.elasticsearch.broadcast.BroadcastActionsIT",
   "methodName": null,
   "className": "org.elasticsearch.broadcast.BroadcastActionsIT",
   "children": [
    {
     "id": "ID#testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)",
     "displayName": "testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)",
     "methodName": "testBroadcastOperations",
     "className": "org.elasticsearch.broadcast.BroadcastActionsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371772962
 }
]

[
 "TEST_STARTED",
 "ID#testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)",
  "startTimestamp": 1459371772987,
  "executionTime": 1356
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.broadcast.BroadcastActionsIT",
  "startTimestamp": 1459371772962,
  "executionTime": 1420
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT",
   "displayName": "org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT",
   "methodName": null,
   "className": "org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT",
   "children": [
    {
     "id": "ID#testClusterState(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
     "displayName": "testClusterState(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
     "methodName": "testClusterState",
     "className": "org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT",
     "children": []
    },
    {
     "id": "ID#testClusterStateWithBlocks(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
     "displayName": "testClusterStateWithBlocks(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
     "methodName": "testClusterStateWithBlocks",
     "className": "org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371774474
 }
]

[
 "TEST_STARTED",
 "ID#testClusterState(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testClusterState(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
  "startTimestamp": 1459371774476,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testClusterState(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterState(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
  "startTimestamp": 1459371774476,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testClusterStateWithBlocks(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testClusterStateWithBlocks(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
  "startTimestamp": 1459371774477,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testClusterStateWithBlocks(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterStateWithBlocks(org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT)",
  "startTimestamp": 1459371774477,
  "executionTime": 0
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bwcompat.ClusterStateBackwardsCompatIT",
  "startTimestamp": 1459371774474,
  "executionTime": 3
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT",
   "displayName": "org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT",
   "methodName": null,
   "className": "org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT",
   "children": [
    {
     "id": "ID#testUpgradeStartClusterOn_0_20_6(org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT)",
     "displayName": "testUpgradeStartClusterOn_0_20_6(org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT)",
     "methodName": "testUpgradeStartClusterOn_0_20_6",
     "className": "org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371774735
 }
]

[
 "TEST_STARTED",
 "ID#testUpgradeStartClusterOn_0_20_6(org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:56,730][ERROR][org.elasticsearch.gateway] [node_t0] failed to read local state, exiting...%0AElasticsearchException[java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?]; nested: IllegalStateException[unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?];%0A%09at org.elasticsearch.ExceptionsHelper.maybeThrowRuntimeAndSuppress(ExceptionsHelper.java:163)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:309)%0A%09at org.elasticsearch.gateway.MetaStateService.loadIndexState(MetaStateService.java:112)%0A%09at org.elasticsearch.gateway.MetaStateService.loadFullState(MetaStateService.java:97)%0A%09at org.elasticsearch.gateway.GatewayMetaState.loadMetaState(GatewayMetaState.java:101)%0A%09at org.elasticsearch.gateway.GatewayMetaState.pre20Upgrade(GatewayMetaState.java:227)%0A%09at org.elasticsearch.gateway.GatewayMetaState.<init>(GatewayMetaState.java:89)%0A%09at sun.reflect.GeneratedConstructorAccessor424.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.inject(SingleParameterInjector.java:42)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:66)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:85)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.inject(SingleParameterInjector.java:42)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:66)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:85)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT.testUpgradeStartClusterOn_0_20_6(RecoveryWithUnsupportedIndicesIT.java:33)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(S"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "tatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?%0A%09at org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:84)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:101)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:123)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.fromXContent(IndexMetaData.java:916)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:186)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:294)%0A%09... 88 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:56,744][ERROR][org.elasticsearch.gateway] [node_t0] failed to read local state, exiting...%0AElasticsearchException[java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?]; nested: IllegalStateException[unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?];%0A%09at org.elasticsearch.ExceptionsHelper.maybeThrowRuntimeAndSuppress(ExceptionsHelper.java:163)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:309)%0A%09at org.elasticsearch.gateway.MetaStateService.loadIndexState(MetaStateService.java:112)%0A%09at org.elasticsearch.gateway.MetaStateService.loadFullState(MetaStateService.java:97)%0A%09at org.elasticsearch.gateway.GatewayMetaState.loadMetaState(GatewayMetaState.java:101)%0A%09at org.elasticsearch.gateway.GatewayMetaState.pre20Upgrade(GatewayMetaState.java:227)%0A%09at org.elasticsearch.gateway.GatewayMetaState.<init>(GatewayMetaState.java:89)%0A%09at sun.reflect.GeneratedConstructorAccessor424.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.inject(SingleParameterInjector.java:42)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:66)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:85)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT.testUpgradeStartClusterOn_0_20_6(RecoveryWithUnsupportedIndicesIT.java:33)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?%0A%09at org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:84)%0A%09at org.elastic"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "search.common.compress.CompressedXContent.<init>(CompressedXContent.java:101)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:123)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.fromXContent(IndexMetaData.java:916)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:186)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:294)%0A%09... 79 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:56,760][ERROR][org.elasticsearch.gateway] [node_t0] failed to read local state, exiting...%0AElasticsearchException[java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?]; nested: IllegalStateException[unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?];%0A%09at org.elasticsearch.ExceptionsHelper.maybeThrowRuntimeAndSuppress(ExceptionsHelper.java:163)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:309)%0A%09at org.elasticsearch.gateway.MetaStateService.loadIndexState(MetaStateService.java:112)%0A%09at org.elasticsearch.gateway.MetaStateService.loadFullState(MetaStateService.java:97)%0A%09at org.elasticsearch.gateway.GatewayMetaState.loadMetaState(GatewayMetaState.java:101)%0A%09at org.elasticsearch.gateway.GatewayMetaState.pre20Upgrade(GatewayMetaState.java:227)%0A%09at org.elasticsearch.gateway.GatewayMetaState.<init>(GatewayMetaState.java:89)%0A%09at sun.reflect.GeneratedConstructorAccessor424.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT.testUpgradeStartClusterOn_0_20_6(RecoveryWithUnsupportedIndicesIT.java:33)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?%0A%09at org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:84)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:101)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:123)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.fromXContent(IndexMetaData.java:916)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:186)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:294)%0A%09... 70 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:56,772][ERROR][org.elasticsearch.gateway] [node_t0] failed to read local state, exiting...%0AElasticsearchException[java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?]; nested: IllegalStateException[unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?];%0A%09at org.elasticsearch.ExceptionsHelper.maybeThrowRuntimeAndSuppress(ExceptionsHelper.java:163)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:309)%0A%09at org.elasticsearch.gateway.MetaStateService.loadIndexState(MetaStateService.java:112)%0A%09at org.elasticsearch.gateway.MetaStateService.loadFullState(MetaStateService.java:97)%0A%09at org.elasticsearch.gateway.GatewayMetaState.loadMetaState(GatewayMetaState.java:101)%0A%09at org.elasticsearch.gateway.GatewayMetaState.pre20Upgrade(GatewayMetaState.java:227)%0A%09at org.elasticsearch.gateway.GatewayMetaState.<init>(GatewayMetaState.java:89)%0A%09at sun.reflect.GeneratedConstructorAccessor424.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.inject(SingleParameterInjector.java:42)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:66)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:85)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:190)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT.testUpgradeStartClusterOn_0_20_6(RecoveryWithUnsupportedIndicesIT.java:33)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?%0A%09at org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:84)%0A%09at org.elastic"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "search.common.compress.CompressedXContent.<init>(CompressedXContent.java:101)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:123)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.fromXContent(IndexMetaData.java:916)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:186)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:294)%0A%09... 79 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:56,786][ERROR][org.elasticsearch.gateway] [node_t0] failed to read local state, exiting...%0AElasticsearchException[java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?]; nested: IllegalStateException[unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?];%0A%09at org.elasticsearch.ExceptionsHelper.maybeThrowRuntimeAndSuppress(ExceptionsHelper.java:163)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:309)%0A%09at org.elasticsearch.gateway.MetaStateService.loadIndexState(MetaStateService.java:112)%0A%09at org.elasticsearch.gateway.MetaStateService.loadFullState(MetaStateService.java:97)%0A%09at org.elasticsearch.gateway.GatewayMetaState.loadMetaState(GatewayMetaState.java:101)%0A%09at org.elasticsearch.gateway.GatewayMetaState.pre20Upgrade(GatewayMetaState.java:227)%0A%09at org.elasticsearch.gateway.GatewayMetaState.<init>(GatewayMetaState.java:89)%0A%09at sun.reflect.GeneratedConstructorAccessor424.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:190)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT.testUpgradeStartClusterOn_0_20_6(RecoveryWithUnsupportedIndicesIT.java:33)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?%0A%09at org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:84)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:101)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:123)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.fromXContent(IndexMetaData.java:916)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:186)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:294)%0A%09... 70 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:02:56,795][ERROR][org.elasticsearch.gateway] [node_t0] failed to read local state, exiting...%0AElasticsearchException[java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?]; nested: IllegalStateException[unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?];%0A%09at org.elasticsearch.ExceptionsHelper.maybeThrowRuntimeAndSuppress(ExceptionsHelper.java:163)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:309)%0A%09at org.elasticsearch.gateway.MetaStateService.loadIndexState(MetaStateService.java:112)%0A%09at org.elasticsearch.gateway.MetaStateService.loadFullState(MetaStateService.java:97)%0A%09at org.elasticsearch.gateway.GatewayMetaState.loadMetaState(GatewayMetaState.java:101)%0A%09at org.elasticsearch.gateway.GatewayMetaState.pre20Upgrade(GatewayMetaState.java:227)%0A%09at org.elasticsearch.gateway.GatewayMetaState.<init>(GatewayMetaState.java:89)%0A%09at sun.reflect.GeneratedConstructorAccessor424.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.inject(SingleParameterInjector.java:42)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:66)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:85)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.inject(SingleParameterInjector.java:42)%0A%09at org.elasticsearch.common.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:66)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:85)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:190)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT.testUpgradeStartClusterOn_0_20_6(RecoveryWithUnsupportedIndicesIT.java:33)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(S"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "tatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?%0A%09at org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:84)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:101)%0A%09at org.elasticsearch.common.compress.CompressedXContent.<init>(CompressedXContent.java:123)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.fromXContent(IndexMetaData.java:916)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:186)%0A%09at org.elasticsearch.gateway.MetaStateService$2.fromXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.loadLatestState(MetaDataStateFormat.java:294)%0A%09... 88 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpgradeStartClusterOn_0_20_6(org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT)",
  "startTimestamp": 1459371774753,
  "executionTime": 2289
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bwcompat.RecoveryWithUnsupportedIndicesIT",
  "startTimestamp": 1459371774735,
  "executionTime": 3459
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.client.transport.TransportClientRetryIT",
   "displayName": "org.elasticsearch.client.transport.TransportClientRetryIT",
   "methodName": null,
   "className": "org.elasticsearch.client.transport.TransportClientRetryIT",
   "children": [
    {
     "id": "ID#testRetry(org.elasticsearch.client.transport.TransportClientRetryIT)",
     "displayName": "testRetry(org.elasticsearch.client.transport.TransportClientRetryIT)",
     "methodName": "testRetry",
     "className": "org.elasticsearch.client.transport.TransportClientRetryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371778271
 }
]

[
 "TEST_STARTED",
 "ID#testRetry(org.elasticsearch.client.transport.TransportClientRetryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRetry(org.elasticsearch.client.transport.TransportClientRetryIT)",
  "startTimestamp": 1459371778297,
  "executionTime": 225
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.client.transport.TransportClientRetryIT",
  "startTimestamp": 1459371778271,
  "executionTime": 262
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.ClusterServiceIT",
   "displayName": "org.elasticsearch.cluster.ClusterServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.ClusterServiceIT",
   "children": [
    {
     "id": "ID#testPrioritizedTasks(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testPrioritizedTasks(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testPrioritizedTasks",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testLocalNodeMasterListenerCallbacks(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testLocalNodeMasterListenerCallbacks(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testLocalNodeMasterListenerCallbacks",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testAckedUpdateTaskTimeoutZero(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testAckedUpdateTaskTimeoutZero(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testAckedUpdateTaskTimeoutZero",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testAckedUpdateTaskSameClusterState(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testAckedUpdateTaskSameClusterState(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testAckedUpdateTaskSameClusterState",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testLongClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testLongClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testLongClusterStateUpdateLogging",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testAckedUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testAckedUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testAckedUpdateTask",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testAckedUpdateTaskNoAckExpected(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testAckedUpdateTaskNoAckExpected(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testAckedUpdateTaskNoAckExpected",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testClusterStateUpdateLogging",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testClusterStateBatchedUpdates(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testClusterStateBatchedUpdates(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testClusterStateBatchedUpdates",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testPendingUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testPendingUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testPendingUpdateTask",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testMasterAwareExecution(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testMasterAwareExecution(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testMasterAwareExecution",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    },
    {
     "id": "ID#testTimeoutUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
     "displayName": "testTimeoutUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
     "methodName": "testTimeoutUpdateTask",
     "className": "org.elasticsearch.cluster.ClusterServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371778813
 }
]

[
 "TEST_STARTED",
 "ID#testPrioritizedTasks(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrioritizedTasks(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371778832,
  "executionTime": 170
 }
]

[
 "TEST_STARTED",
 "ID#testLocalNodeMasterListenerCallbacks(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:00,112][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{f2h0o8M-QXWcbMsNmcyZfQ}{127.0.0.1}{127.0.0.1:9441}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:01,013][WARN ][org.elasticsearch.discovery.zen] [node_t1] not enough master nodes, current nodes: {{node_t1}{f2h0o8M-QXWcbMsNmcyZfQ}{127.0.0.1}{127.0.0.1:9441}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:01,016][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_1#}{127.0.0.1}{127.0.0.1:9440}]%0ARemoteTransportException[[node_t2][127.0.0.1:9440][internal:discovery/zen/unicast]]; nested: IllegalStateException[received ping request while not started];%0ACaused by: java.lang.IllegalStateException: received ping request while not started%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.handlePingRequest(UnicastZenPing.java:497)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.access$2400(UnicastZenPing.java:83)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$UnicastPingRequestHandler.messageReceived(UnicastZenPing.java:522)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$UnicastPingRequestHandler.messageReceived(UnicastZenPing.java:518)%0A%09at org.elasticsearch.transport.netty.MessageChannelHandler.handleRequest(MessageChannelHandler.java:244)%0A%09at org.elasticsearch.transport.netty.MessageChannelHandler.messageReceived(MessageChannelHandler.java:114)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.elasticsearch.common.netty.OpenChannelsHandler.handleUpstream(OpenChannelsHandler.java:75)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)%0A%09at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)%0A%09at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:01,017][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_6#}{::1}{[::1]:9440}]%0ARemoteTransportException[[node_t2][[::1]:9440][internal:discovery/zen/unicast]]; nested: IllegalStateException[received ping request while not started];%0ACaused by: java.lang.IllegalStateException: received ping request while not started%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.handlePingRequest(UnicastZenPing.java:497)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.access$2400(UnicastZenPing.java:83)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$UnicastPingRequestHandler.messageReceived(UnicastZenPing.java:522)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$UnicastPingRequestHandler.messageReceived(UnicastZenPing.java:518)%0A%09at org.elasticsearch.transport.netty.MessageChannelHandler.handleRequest(MessageChannelHandler.java:244)%0A%09at org.elasticsearch.transport.netty.MessageChannelHandler.messageReceived(MessageChannelHandler.java:114)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.elasticsearch.common.netty.OpenChannelsHandler.handleUpstream(OpenChannelsHandler.java:75)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)%0A%09at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)%0A%09at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:01,514][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = shut_down), current nodes: {{node_t3}{qoDH7YEhRz6Y4lgMS7dPZg}{127.0.0.1}{127.0.0.1:9440}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocalNodeMasterListenerCallbacks(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371779003,
  "executionTime": 2523
 }
]

[
 "TEST_STARTED",
 "ID#testAckedUpdateTaskTimeoutZero(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAckedUpdateTaskTimeoutZero(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371781526,
  "executionTime": 126
 }
]

[
 "TEST_STARTED",
 "ID#testAckedUpdateTaskSameClusterState(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAckedUpdateTaskSameClusterState(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371781652,
  "executionTime": 241
 }
]

[
 "TEST_STARTED",
 "ID#testLongClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,248][WARN ][org.elasticsearch.cluster.service] [node_t0] cluster state update task [test2] took 104ms above the warn threshold of 10ms%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,249][WARN ][org.elasticsearch.cluster.service] [node_t0] cluster state update task [test2] took 105ms above the warn threshold of 10ms%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,350][WARN ][org.elasticsearch.cluster.service] [node_t0] cluster state update task [test3] took 100ms above the warn threshold of 10ms%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,451][WARN ][org.elasticsearch.cluster.service] [node_t0] cluster state update task [test4] took 100ms above the warn threshold of 10ms%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371781893,
  "executionTime": 571
 }
]

[
 "TEST_STARTED",
 "ID#testAckedUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAckedUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371782464,
  "executionTime": 140
 }
]

[
 "TEST_STARTED",
 "ID#testAckedUpdateTaskNoAckExpected(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAckedUpdateTaskNoAckExpected(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371782605,
  "executionTime": 180
 }
]

[
 "TEST_STARTED",
 "ID#testClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,787][INFO ][org.elasticsearch.cluster] [ClusterServiceIT#testClusterStateUpdateLogging]: setup test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,790][INFO ][org.elasticsearch.cluster] [ClusterServiceIT#testClusterStateUpdateLogging]: starting test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,890][DEBUG][org.elasticsearch.cluster.routing.allocation.decider] [node_t0] using node_concurrent_recoveries [5], node_initial_primaries_recoveries [4]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,890][DEBUG][org.elasticsearch.cluster.routing.allocation.decider] [node_t0] using [cluster.routing.allocation.allow_rebalance] with [indices_all_active]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,891][DEBUG][org.elasticsearch.cluster.routing.allocation.decider] [node_t0] using [cluster_concurrent_rebalance] with [2]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,940][INFO ][org.elasticsearch.cluster] [node_t0] initialized test service%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,950][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [local-disco-initial_connect(master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,950][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [local-disco-initial_connect(master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,951][TRACE][org.elasticsearch.cluster.service] [node_t0] cluster state updated, source [local-disco-initial_connect(master)]%0Aversion: 1%0Astate uuid: NxMyVNXUSbSTNc8H1f2dHw%0Afrom_diff: false%0Ameta data version: 0%0Ablocks: %0A   _global_:%0A      1,state not recovered / initialized, blocks READ,WRITE,METADATA_READ,METADATA_WRITE%0Anodes: %0A   {node_t0}{jPnknTyiTyyBYSxlepW7iw}{127.0.0.1}{127.0.0.1:9460}[mode=>network], local, master%0Arouting_table (version 0):%0Arouting_nodes:%0A-----node_id[jPnknTyiTyyBYSxlepW7iw][V]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,951][INFO ][org.elasticsearch.cluster.service] [node_t0] new_master {node_t0}{jPnknTyiTyyBYSxlepW7iw}{127.0.0.1}{127.0.0.1:9460}[mode=>network], reason: local-disco-initial_connect(master)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,951][DEBUG][org.elasticsearch.cluster.service] [node_t0] publishing cluster state version [1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,951][DEBUG][org.elasticsearch.cluster.service] [node_t0] set local cluster state to version 1%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,951][TRACE][org.elasticsearch.cluster.routing] [node_t0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,952][INFO ][org.elasticsearch.cluster] [node_t0] on master [{node_t0}{jPnknTyiTyyBYSxlepW7iw}{127.0.0.1}{127.0.0.1:9460}[mode=>network]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,952][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [local-disco-initial_connect(master)]: took 1ms done applying updated cluster_state (version: 1, uuid: NxMyVNXUSbSTNc8H1f2dHw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,952][TRACE][org.elasticsearch.cluster] [node_t0] I have been elected master, scheduling a ClusterInfoUpdateJob%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,952][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [gateway_initial_state_recovery]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,953][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [gateway_initial_state_recovery]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,953][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [gateway_initial_state_recovery]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,954][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [test1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,954][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test1]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,954][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test1]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,954][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [test2]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,954][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test2]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,954][TRACE][org.elasticsearch.cluster.service] [node_t0] failed to execute cluster state update in 0s, state:%0Aversion [1], source [test2]%0Anodes: %0A   {node_t0}{jPnknTyiTyyBYSxlepW7iw}{127.0.0.1}{127.0.0.1:9460}[mode=>network], local, master%0Arouting_table (version 0):%0Arouting_nodes:%0A-----node_id[jPnknTyiTyyBYSxlepW7iw][V]%0A---- unassigned%0A%0Ajava.lang.IllegalArgumentException: Testing handling of exceptions in the cluster state task%0A%09at org.elasticsearch.cluster.ClusterServiceIT$16.execute(ClusterServiceIT.java:885)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test2]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [test3]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test3]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][TRACE][org.elasticsearch.cluster.service] [node_t0] cluster state updated, source [test3]%0Aversion: 3%0Astate uuid: dJ8qmEVhRGibCvh4w_v6sg%0Afrom_diff: false%0Ameta data version: 0%0Ablocks: %0A   _global_:%0A      1,state not recovered / initialized, blocks READ,WRITE,METADATA_READ,METADATA_WRITE%0Anodes: %0A   {node_t0}{jPnknTyiTyyBYSxlepW7iw}{127.0.0.1}{127.0.0.1:9460}[mode=>network], local, master%0Arouting_table (version 0):%0Arouting_nodes:%0A-----node_id[jPnknTyiTyyBYSxlepW7iw][V]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][DEBUG][org.elasticsearch.cluster.service] [node_t0] publishing cluster state version [3]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][DEBUG][org.elasticsearch.cluster.service] [node_t0] set local cluster state to version 3%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][TRACE][org.elasticsearch.cluster.routing] [node_t0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test3]: took 0s done applying updated cluster_state (version: 3, uuid: dJ8qmEVhRGibCvh4w_v6sg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [test4]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,955][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test4]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,956][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [test4]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,956][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [local-gateway-elected-state]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,956][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [local-gateway-elected-state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,956][INFO ][org.elasticsearch.cluster] [ClusterServiceIT#testClusterStateUpdateLogging]: finished test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,956][INFO ][org.elasticsearch.cluster] [ClusterServiceIT#testClusterStateUpdateLogging]: cleaning up after test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,956][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_t0] Start assigning unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,957][TRACE][org.elasticsearch.cluster] Check consistency for [1] nodes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,957][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_t0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,957][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_t0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,957][TRACE][org.elasticsearch.cluster.service] [node_t0] cluster state updated, source [local-gateway-elected-state]%0Aversion: 4%0Astate uuid: J_T6TOzcSRmDC0iO_zheew%0Afrom_diff: false%0Ameta data version: 1%0Anodes: %0A   {node_t0}{jPnknTyiTyyBYSxlepW7iw}{127.0.0.1}{127.0.0.1:9460}[mode=>network], local, master%0Arouting_table (version 1):%0Arouting_nodes:%0A-----node_id[jPnknTyiTyyBYSxlepW7iw][V]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,957][DEBUG][org.elasticsearch.cluster.service] [node_t0] publishing cluster state version [4]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,957][DEBUG][org.elasticsearch.cluster.service] [node_t0] set local cluster state to version 4%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,957][TRACE][org.elasticsearch.cluster.routing] [node_t0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,975][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [local-gateway-elected-state]: took 18ms done applying updated cluster_state (version: 4, uuid: J_T6TOzcSRmDC0iO_zheew)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,975][TRACE][org.elasticsearch.cluster.service] [node_t0] will process [delete_repository [*]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,975][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [delete_repository [*]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,975][DEBUG][org.elasticsearch.cluster.service] [node_t0] processing [delete_repository [*]]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:02,980][INFO ][org.elasticsearch.cluster] [ClusterServiceIT#testClusterStateUpdateLogging]: cleaned up after test%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterStateUpdateLogging(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371782785,
  "executionTime": 195
 }
]

[
 "TEST_STARTED",
 "ID#testClusterStateBatchedUpdates(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterStateBatchedUpdates(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371782981,
  "executionTime": 151
 }
]

[
 "TEST_STARTED",
 "ID#testPendingUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPendingUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371783132,
  "executionTime": 420
 }
]

[
 "TEST_STARTED",
 "ID#testMasterAwareExecution(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMasterAwareExecution(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371783552,
  "executionTime": 326
 }
]

[
 "TEST_STARTED",
 "ID#testTimeoutUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTimeoutUpdateTask(org.elasticsearch.cluster.ClusterServiceIT)",
  "startTimestamp": 1459371783879,
  "executionTime": 144
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.ClusterServiceIT",
  "startTimestamp": 1459371778813,
  "executionTime": 5343
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.UpdateSettingsValidationIT",
   "displayName": "org.elasticsearch.cluster.UpdateSettingsValidationIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.UpdateSettingsValidationIT",
   "children": [
    {
     "id": "ID#testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)",
     "displayName": "testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)",
     "methodName": "testUpdateSettingsValidation",
     "className": "org.elasticsearch.cluster.UpdateSettingsValidationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371784314
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)",
  "startTimestamp": 1459371784331,
  "executionTime": 699
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.UpdateSettingsValidationIT",
  "startTimestamp": 1459371784314,
  "executionTime": 730
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT",
   "displayName": "org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT",
   "children": [
    {
     "id": "ID#testLoadByShortKeyShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)",
     "displayName": "testLoadByShortKeyShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)",
     "methodName": "testLoadByShortKeyShardsAllocator",
     "className": "org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT",
     "children": []
    },
    {
     "id": "ID#testLoadDefaultShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)",
     "displayName": "testLoadDefaultShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)",
     "methodName": "testLoadDefaultShardsAllocator",
     "className": "org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371785071
 }
]

[
 "TEST_STARTED",
 "ID#testLoadByShortKeyShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:05,118][WARN ][org.elasticsearch.cluster] [node_t0] even_shard allocator has been removed in 2.0 using balanced instead%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:05,164][WARN ][org.elasticsearch.test.transport] [node_t0] Transport response handler not found of id [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:05,164][WARN ][org.elasticsearch.gateway] [node_t0] failed to fetch state from node%0AFailedNodeException[Failed node [NAA_Y9ETRXio3Z4bFnIi6g]]; nested: TransportException[transport stopped, action: internal:gateway/local/meta_state[n]];%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onFailure(TransportNodesAction.java:188)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$700(TransportNodesAction.java:95)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$2.handleException(TransportNodesAction.java:161)%0A%09at org.elasticsearch.transport.TransportService$2.run(TransportService.java:198)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: TransportException[transport stopped, action: internal:gateway/local/meta_state[n]]%0A%09... 4 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadByShortKeyShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)",
  "startTimestamp": 1459371785088,
  "executionTime": 145
 }
]

[
 "TEST_STARTED",
 "ID#testLoadDefaultShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLoadDefaultShardsAllocator(org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT)",
  "startTimestamp": 1459371785234,
  "executionTime": 87
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.allocation.ShardsAllocatorModuleIT",
  "startTimestamp": 1459371785071,
  "executionTime": 258
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
   "displayName": "org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
   "children": [
    {
     "id": "ID#testSingleShardAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "displayName": "testSingleShardAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "methodName": "testSingleShardAllocation",
     "className": "org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
     "children": []
    },
    {
     "id": "ID#testMultipleIndicesAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "displayName": "testMultipleIndicesAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "methodName": "testMultipleIndicesAllocation",
     "className": "org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
     "children": []
    },
    {
     "id": "ID#testClusterSearchShardsWithBlocks(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "displayName": "testClusterSearchShardsWithBlocks(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "methodName": "testClusterSearchShardsWithBlocks",
     "className": "org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
     "children": []
    },
    {
     "id": "ID#testMultipleShardsSingleNodeAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "displayName": "testMultipleShardsSingleNodeAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
     "methodName": "testMultipleShardsSingleNodeAllocation",
     "className": "org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371785584
 }
]

[
 "TEST_STARTED",
 "ID#testSingleShardAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleShardAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
  "startTimestamp": 1459371785608,
  "executionTime": 599
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleIndicesAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleIndicesAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
  "startTimestamp": 1459371786207,
  "executionTime": 2645
 }
]

[
 "TEST_STARTED",
 "ID#testClusterSearchShardsWithBlocks(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterSearchShardsWithBlocks(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
  "startTimestamp": 1459371788853,
  "executionTime": 2559
 }
]

[
 "TEST_STARTED",
 "ID#testMultipleShardsSingleNodeAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultipleShardsSingleNodeAllocation(org.elasticsearch.cluster.shards.ClusterSearchShardsIT)",
  "startTimestamp": 1459371791412,
  "executionTime": 560
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.shards.ClusterSearchShardsIT",
  "startTimestamp": 1459371785584,
  "executionTime": 6446
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
   "displayName": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
   "children": [
    {
     "id": "ID#testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testFieldStatsIndexLevel",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testIncompatibleFieldTypes",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testIncompatibleFilter",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testRandom",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testFieldStatsFiltering",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371792157
 }
]

[
 "TEST_STARTED",
 "ID#testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1459371792182,
  "executionTime": 5071
 }
]

[
 "TEST_STARTED",
 "ID#testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1459371797253,
  "executionTime": 1501
 }
]

[
 "TEST_STARTED",
 "ID#testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1459371798754,
  "executionTime": 2680
 }
]

[
 "TEST_STARTED",
 "ID#testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1459371801435,
  "executionTime": 2204
 }
]

[
 "TEST_STARTED",
 "ID#testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1459371803639,
  "executionTime": 5169
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
  "startTimestamp": 1459371792157,
  "executionTime": 16671
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.http.netty.HttpPublishPortIT",
   "displayName": "org.elasticsearch.http.netty.HttpPublishPortIT",
   "methodName": null,
   "className": "org.elasticsearch.http.netty.HttpPublishPortIT",
   "children": [
    {
     "id": "ID#testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)",
     "displayName": "testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)",
     "methodName": "testHttpPublishPort",
     "className": "org.elasticsearch.http.netty.HttpPublishPortIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371809028
 }
]

[
 "TEST_STARTED",
 "ID#testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)",
  "startTimestamp": 1459371809052,
  "executionTime": 229
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.http.netty.HttpPublishPortIT",
  "startTimestamp": 1459371809028,
  "executionTime": 268
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
   "displayName": "org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
   "children": [
    {
     "id": "ID#testGeoPointMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "displayName": "testGeoPointMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "methodName": "testGeoPointMultiField",
     "className": "org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testIpMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "displayName": "testIpMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "methodName": "testIpMultiField",
     "className": "org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testMultiFields(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "displayName": "testMultiFields(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "methodName": "testMultiFields",
     "className": "org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testTokenCountMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "displayName": "testTokenCountMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "methodName": "testTokenCountMultiField",
     "className": "org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testCompletionMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "displayName": "testCompletionMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
     "methodName": "testCompletionMultiField",
     "className": "org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371809536
 }
]

[
 "TEST_STARTED",
 "ID#testGeoPointMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeoPointMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
  "startTimestamp": 1459371809558,
  "executionTime": 1425
 }
]

[
 "TEST_STARTED",
 "ID#testIpMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIpMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
  "startTimestamp": 1459371810984,
  "executionTime": 1012
 }
]

[
 "TEST_STARTED",
 "ID#testMultiFields(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiFields(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
  "startTimestamp": 1459371811996,
  "executionTime": 2825
 }
]

[
 "TEST_STARTED",
 "ID#testTokenCountMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTokenCountMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
  "startTimestamp": 1459371814821,
  "executionTime": 553
 }
]

[
 "TEST_STARTED",
 "ID#testCompletionMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompletionMultiField(org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT)",
  "startTimestamp": 1459371815374,
  "executionTime": 1200
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.multifield.MultiFieldsIntegrationIT",
  "startTimestamp": 1459371809536,
  "executionTime": 7064
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.query.plugin.CustomQueryParserIT",
   "displayName": "org.elasticsearch.index.query.plugin.CustomQueryParserIT",
   "methodName": null,
   "className": "org.elasticsearch.index.query.plugin.CustomQueryParserIT",
   "children": [
    {
     "id": "ID#testCustomDummyQueryWithinBooleanQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "displayName": "testCustomDummyQueryWithinBooleanQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "methodName": "testCustomDummyQueryWithinBooleanQuery",
     "className": "org.elasticsearch.index.query.plugin.CustomQueryParserIT",
     "children": []
    },
    {
     "id": "ID#testConstantScoreParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "displayName": "testConstantScoreParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "methodName": "testConstantScoreParsesFilter",
     "className": "org.elasticsearch.index.query.plugin.CustomQueryParserIT",
     "children": []
    },
    {
     "id": "ID#testBooleanParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "displayName": "testBooleanParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "methodName": "testBooleanParsesFilter",
     "className": "org.elasticsearch.index.query.plugin.CustomQueryParserIT",
     "children": []
    },
    {
     "id": "ID#testCustomDummyQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "displayName": "testCustomDummyQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
     "methodName": "testCustomDummyQuery",
     "className": "org.elasticsearch.index.query.plugin.CustomQueryParserIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371816856
 }
]

[
 "TEST_STARTED",
 "ID#testCustomDummyQueryWithinBooleanQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomDummyQueryWithinBooleanQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
  "startTimestamp": 1459371816880,
  "executionTime": 396
 }
]

[
 "TEST_STARTED",
 "ID#testConstantScoreParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConstantScoreParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
  "startTimestamp": 1459371817277,
  "executionTime": 357
 }
]

[
 "TEST_STARTED",
 "ID#testBooleanParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBooleanParsesFilter(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
  "startTimestamp": 1459371817634,
  "executionTime": 201
 }
]

[
 "TEST_STARTED",
 "ID#testCustomDummyQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomDummyQuery(org.elasticsearch.index.query.plugin.CustomQueryParserIT)",
  "startTimestamp": 1459371817835,
  "executionTime": 456
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.query.plugin.CustomQueryParserIT",
  "startTimestamp": 1459371816856,
  "executionTime": 1449
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
   "displayName": "org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
   "children": [
    {
     "id": "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "displayName": "testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "methodName": "testGetMappingsWhereThereAreNone",
     "className": "org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
     "children": []
    },
    {
     "id": "ID#testSimpleGetFieldMappings(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "displayName": "testSimpleGetFieldMappings(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "methodName": "testSimpleGetFieldMappings",
     "className": "org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
     "children": []
    },
    {
     "id": "ID#testSimpleGetFieldMappingsWithDefaults(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "displayName": "testSimpleGetFieldMappingsWithDefaults(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "methodName": "testSimpleGetFieldMappingsWithDefaults",
     "className": "org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
     "children": []
    },
    {
     "id": "ID#testSimpleGetFieldMappingsWithPretty(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "displayName": "testSimpleGetFieldMappingsWithPretty(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "methodName": "testSimpleGetFieldMappingsWithPretty",
     "className": "org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
     "children": []
    },
    {
     "id": "ID#testGetFieldMappingsWithBlocks(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "displayName": "testGetFieldMappingsWithBlocks(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
     "methodName": "testGetFieldMappingsWithBlocks",
     "className": "org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371818368
 }
]

[
 "TEST_STARTED",
 "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
  "startTimestamp": 1459371818385,
  "executionTime": 940
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleGetFieldMappings(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleGetFieldMappings(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
  "startTimestamp": 1459371819325,
  "executionTime": 821
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleGetFieldMappingsWithDefaults(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleGetFieldMappingsWithDefaults(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
  "startTimestamp": 1459371820146,
  "executionTime": 698
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleGetFieldMappingsWithPretty(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleGetFieldMappingsWithPretty(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
  "startTimestamp": 1459371820844,
  "executionTime": 384
 }
]

[
 "TEST_STARTED",
 "ID#testGetFieldMappingsWithBlocks(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetFieldMappingsWithBlocks(org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT)",
  "startTimestamp": 1459371821229,
  "executionTime": 856
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.mapping.DedicatedMasterGetFieldMappingIT",
  "startTimestamp": 1459371818368,
  "executionTime": 3826
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
   "displayName": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
   "children": [
    {
     "id": "ID#testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "displayName": "testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "methodName": "testGetMappingsWithBlocks",
     "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
     "children": []
    },
    {
     "id": "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "displayName": "testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "methodName": "testGetMappingsWhereThereAreNone",
     "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "displayName": "testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "methodName": "testSimpleGetMappings",
     "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371822394
 }
]

[
 "TEST_STARTED",
 "ID#testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
  "startTimestamp": 1459371822413,
  "executionTime": 960
 }
]

[
 "TEST_STARTED",
 "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
  "startTimestamp": 1459371823374,
  "executionTime": 244
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
  "startTimestamp": 1459371823619,
  "executionTime": 508
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
  "startTimestamp": 1459371822394,
  "executionTime": 1750
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT",
   "displayName": "org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT",
   "children": [
    {
     "id": "ID#testNoopFielddataBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)",
     "displayName": "testNoopFielddataBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)",
     "methodName": "testNoopFielddataBreaker",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT",
     "children": []
    },
    {
     "id": "ID#testNoopRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)",
     "displayName": "testNoopRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)",
     "methodName": "testNoopRequestBreaker",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371824165
 }
]

[
 "TEST_STARTED",
 "ID#testNoopFielddataBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoopFielddataBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)",
  "startTimestamp": 1459371824182,
  "executionTime": 1246
 }
]

[
 "TEST_STARTED",
 "ID#testNoopRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoopRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT)",
  "startTimestamp": 1459371825428,
  "executionTime": 1054
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerNoopIT",
  "startTimestamp": 1459371824165,
  "executionTime": 2335
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
   "displayName": "org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
   "children": [
    {
     "id": "ID#testMemoryBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "displayName": "testMemoryBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "methodName": "testMemoryBreaker",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
     "children": []
    },
    {
     "id": "ID#testParentChecking(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "displayName": "testParentChecking(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "methodName": "testParentChecking",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
     "children": []
    },
    {
     "id": "ID#testRamAccountingTermsEnum(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "displayName": "testRamAccountingTermsEnum(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "methodName": "testRamAccountingTermsEnum",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
     "children": []
    },
    {
     "id": "ID#testRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "displayName": "testRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "methodName": "testRequestBreaker",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
     "children": []
    },
    {
     "id": "ID#testCustomCircuitBreakerRegistration(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "displayName": "testCustomCircuitBreakerRegistration(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
     "methodName": "testCustomCircuitBreakerRegistration",
     "className": "org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371826691
 }
]

[
 "TEST_STARTED",
 "ID#testMemoryBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:47,352][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 19435 [18.9kb] for data of [test] would be larger than configured breaker: 100 [100b], breaking%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMemoryBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
  "startTimestamp": 1459371826708,
  "executionTime": 768
 }
]

[
 "TEST_STARTED",
 "ID#testParentChecking(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,466][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3412 [3.3kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,466][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3024 [2.9kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,465][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3273 [3.1kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,465][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3520 [3.4kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,467][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3711 [3.6kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,467][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3363 [3.2kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,468][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3567 [3.4kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,468][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3276 [3.1kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,468][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3320 [3.2kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3024 [2.9kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3567 [3.4kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3412 [3.3kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3711 [3.6kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3273 [3.1kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3363 [3.2kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3320 [3.2kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3276 [3.1kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:48,470][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 3520 [3.4kb] for data of [test] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParentChecking(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
  "startTimestamp": 1459371827477,
  "executionTime": 1467
 }
]

[
 "TEST_STARTED",
 "ID#testRamAccountingTermsEnum(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:49,635][WARN ][org.elasticsearch.indices.breaker.fielddata] [fielddata] New used memory 26072 [25.4kb] for data of [test] would be larger than configured breaker: 100 [100b], breaking%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRamAccountingTermsEnum(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
  "startTimestamp": 1459371828944,
  "executionTime": 807
 }
]

[
 "TEST_STARTED",
 "ID#testRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,691][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,691][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,691][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,691][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,692][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,691][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,692][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,692][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,692][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:50,693][WARN ][org.elasticsearch.indices.breaker.request] [request] New used memory 16440 [16kb] for data of [<reused_arrays>] would be larger than configured breaker: 10 [10b], breaking%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequestBreaker(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
  "startTimestamp": 1459371829751,
  "executionTime": 1575
 }
]

[
 "TEST_STARTED",
 "ID#testCustomCircuitBreakerRegistration(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:03:51,490][WARN ][org.elasticsearch.indices.breaker.customBreaker] [customBreaker] New used memory 16 [16b] for data of [test] would be larger than configured breaker: 8 [8b], breaking%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCustomCircuitBreakerRegistration(org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT)",
  "startTimestamp": 1459371831327,
  "executionTime": 186
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.memory.breaker.CircuitBreakerServiceIT",
  "startTimestamp": 1459371826691,
  "executionTime": 4889
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
   "displayName": "org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
   "children": [
    {
     "id": "ID#testAutoExpandNumberReplicas1ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "displayName": "testAutoExpandNumberReplicas1ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "methodName": "testAutoExpandNumberReplicas1ToData",
     "className": "org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
     "children": []
    },
    {
     "id": "ID#testAutoExpandNumberReplicas2(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "displayName": "testAutoExpandNumberReplicas2(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "methodName": "testAutoExpandNumberReplicas2",
     "className": "org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
     "children": []
    },
    {
     "id": "ID#testSimpleUpdateNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "displayName": "testSimpleUpdateNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "methodName": "testSimpleUpdateNumberOfReplicas",
     "className": "org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
     "children": []
    },
    {
     "id": "ID#testUpdateWithInvalidNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "displayName": "testUpdateWithInvalidNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "methodName": "testUpdateWithInvalidNumberOfReplicas",
     "className": "org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
     "children": []
    },
    {
     "id": "ID#testAutoExpandNumberOfReplicas0ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "displayName": "testAutoExpandNumberOfReplicas0ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
     "methodName": "testAutoExpandNumberOfReplicas0ToData",
     "className": "org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371831735
 }
]

[
 "TEST_STARTED",
 "ID#testAutoExpandNumberReplicas1ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAutoExpandNumberReplicas1ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
  "startTimestamp": 1459371831760,
  "executionTime": 2365
 }
]

[
 "TEST_STARTED",
 "ID#testAutoExpandNumberReplicas2(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAutoExpandNumberReplicas2(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
  "startTimestamp": 1459371834125,
  "executionTime": 1772
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleUpdateNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleUpdateNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
  "startTimestamp": 1459371835898,
  "executionTime": 3059
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateWithInvalidNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateWithInvalidNumberOfReplicas(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
  "startTimestamp": 1459371838957,
  "executionTime": 631
 }
]

[
 "TEST_STARTED",
 "ID#testAutoExpandNumberOfReplicas0ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAutoExpandNumberOfReplicas0ToData(org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT)",
  "startTimestamp": 1459371839588,
  "executionTime": 1015
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.settings.UpdateNumberOfReplicasIT",
  "startTimestamp": 1459371831735,
  "executionTime": 8981
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT",
   "displayName": "org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT",
   "children": [
    {
     "id": "ID#testCloseAllRequiresName(org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT)",
     "displayName": "testCloseAllRequiresName(org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT)",
     "methodName": "testCloseAllRequiresName",
     "className": "org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371840798
 }
]

[
 "TEST_STARTED",
 "ID#testCloseAllRequiresName(org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseAllRequiresName(org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT)",
  "startTimestamp": 1459371840821,
  "executionTime": 3389
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.state.CloseIndexDisableCloseAllIT",
  "startTimestamp": 1459371840798,
  "executionTime": 3433
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.state.RareClusterStateIT",
   "displayName": "org.elasticsearch.indices.state.RareClusterStateIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.state.RareClusterStateIT",
   "children": [
    {
     "id": "ID#testDelayedMappingPropagationOnPrimary(org.elasticsearch.indices.state.RareClusterStateIT)",
     "displayName": "testDelayedMappingPropagationOnPrimary(org.elasticsearch.indices.state.RareClusterStateIT)",
     "methodName": "testDelayedMappingPropagationOnPrimary",
     "className": "org.elasticsearch.indices.state.RareClusterStateIT",
     "children": []
    },
    {
     "id": "ID#testDelayedMappingPropagationOnReplica(org.elasticsearch.indices.state.RareClusterStateIT)",
     "displayName": "testDelayedMappingPropagationOnReplica(org.elasticsearch.indices.state.RareClusterStateIT)",
     "methodName": "testDelayedMappingPropagationOnReplica",
     "className": "org.elasticsearch.indices.state.RareClusterStateIT",
     "children": []
    },
    {
     "id": "ID#testDeleteCreateInOneBulk(org.elasticsearch.indices.state.RareClusterStateIT)",
     "displayName": "testDeleteCreateInOneBulk(org.elasticsearch.indices.state.RareClusterStateIT)",
     "methodName": "testDeleteCreateInOneBulk",
     "className": "org.elasticsearch.indices.state.RareClusterStateIT",
     "children": []
    },
    {
     "id": "ID#testUnassignedShardAndEmptyNodesInRoutingTable(org.elasticsearch.indices.state.RareClusterStateIT)",
     "displayName": "testUnassignedShardAndEmptyNodesInRoutingTable(org.elasticsearch.indices.state.RareClusterStateIT)",
     "methodName": "testUnassignedShardAndEmptyNodesInRoutingTable",
     "className": "org.elasticsearch.indices.state.RareClusterStateIT",
     "children": []
    },
    {
     "id": "ID#testAssignmentWithJustAddedNodes(org.elasticsearch.indices.state.RareClusterStateIT)",
     "displayName": "testAssignmentWithJustAddedNodes(org.elasticsearch.indices.state.RareClusterStateIT)",
     "methodName": "testAssignmentWithJustAddedNodes",
     "className": "org.elasticsearch.indices.state.RareClusterStateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371844361
 }
]

[
 "TEST_STARTED",
 "ID#testDelayedMappingPropagationOnPrimary(org.elasticsearch.indices.state.RareClusterStateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:07,561][WARN ][org.elasticsearch.discovery.zen.publish] [node_t1] timed out waiting for all nodes to process published state [1] (timeout [0s], pending nodes: [{node_t0}{WDz2a7uGT_2vcu3b34tbLg}{127.0.0.1}{127.0.0.1:9400}[mode=>network]])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:07,566][WARN ][org.elasticsearch.discovery.zen.publish] [node_t1] timed out waiting for all nodes to process published state [2] (timeout [0s], pending nodes: [{node_t0}{WDz2a7uGT_2vcu3b34tbLg}{127.0.0.1}{127.0.0.1:9400}[mode=>network]])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:07,575][WARN ][org.elasticsearch.discovery.zen.publish] [node_t1] timed out waiting for all nodes to process published state [3] (timeout [0s], pending nodes: [{node_t0}{WDz2a7uGT_2vcu3b34tbLg}{127.0.0.1}{127.0.0.1:9400}[mode=>network]])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:07,633][WARN ][org.elasticsearch.discovery.zen.publish] [node_t1] timed out waiting for all nodes to process published state [4] (timeout [0s], pending nodes: [{node_t0}{WDz2a7uGT_2vcu3b34tbLg}{127.0.0.1}{127.0.0.1:9400}[mode=>network]])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:07,676][WARN ][org.elasticsearch.discovery.zen.publish] [node_t1] timed out waiting for all nodes to process published state [5] (timeout [0s], pending nodes: [{node_t0}{WDz2a7uGT_2vcu3b34tbLg}{127.0.0.1}{127.0.0.1:9400}[mode=>network]])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:07,824][WARN ][org.elasticsearch.discovery.zen.publish] [node_t1] timed out waiting for all nodes to process published state [6] (timeout [0s], pending nodes: [{node_t0}{WDz2a7uGT_2vcu3b34tbLg}{127.0.0.1}{127.0.0.1:9400}[mode=>network]])%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDelayedMappingPropagationOnPrimary(org.elasticsearch.indices.state.RareClusterStateIT)",
  "startTimestamp": 1459371844381,
  "executionTime": 3519
 }
]

[
 "TEST_STARTED",
 "ID#testDelayedMappingPropagationOnReplica(org.elasticsearch.indices.state.RareClusterStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDelayedMappingPropagationOnReplica(org.elasticsearch.indices.state.RareClusterStateIT)",
  "startTimestamp": 1459371847900,
  "executionTime": 3845
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteCreateInOneBulk(org.elasticsearch.indices.state.RareClusterStateIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testDeleteCreateInOneBulk(org.elasticsearch.indices.state.RareClusterStateIT)",
  "startTimestamp": 1459371851745,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testDeleteCreateInOneBulk(org.elasticsearch.indices.state.RareClusterStateIT)",
  "message": "'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/14932))",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/14932))\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$400(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:763)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/14932))",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteCreateInOneBulk(org.elasticsearch.indices.state.RareClusterStateIT)",
  "startTimestamp": 1459371851745,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testUnassignedShardAndEmptyNodesInRoutingTable(org.elasticsearch.indices.state.RareClusterStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnassignedShardAndEmptyNodesInRoutingTable(org.elasticsearch.indices.state.RareClusterStateIT)",
  "startTimestamp": 1459371851746,
  "executionTime": 3218
 }
]

[
 "TEST_STARTED",
 "ID#testAssignmentWithJustAddedNodes(org.elasticsearch.indices.state.RareClusterStateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:15,029][DEBUG][org.elasticsearch.gateway] [node_t0] using initial_shards [quorum]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:15,054][DEBUG][org.elasticsearch.gateway] [node_t0] took 0s to load state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,074][TRACE][org.elasticsearch.gateway] [node_t0] performing state recovery from [9B7XP-w4SDe-OX6gjQ3JSw]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,075][TRACE][org.elasticsearch.gateway] [node_t0] successful state recovery, importing cluster state...%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,076][TRACE][org.elasticsearch.gateway] [node_t0] [_global] writing state, reason [changed]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,083][INFO ][org.elasticsearch.gateway] [node_t0] recovered [0] indices into cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,109][TRACE][org.elasticsearch.gateway] [node_t0] [index] writing state, reason [freshly created]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,153][TRACE][org.elasticsearch.gateway] [node_t0] [index] writing state, reason [version changed from [1] to [2]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,171][TRACE][org.elasticsearch.gateway] [node_t0] [index] writing state, reason [version changed from [2] to [3]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,178][TRACE][org.elasticsearch.gateway] [node_t0] [index][0] fetching [shard_started] from [_non_existent, 9B7XP-w4SDe-OX6gjQ3JSw]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,178][DEBUG][org.elasticsearch.gateway] [node_t0] failed to execute on node [_non_existent]%0ANoSuchNodeException[No such node [_non_existent]]%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.start(TransportNodesAction.java:140)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$100(TransportNodesAction.java:95)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction.doExecute(TransportNodesAction.java:69)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction.doExecute(TransportNodesAction.java:45)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.gateway.TransportNodesListGatewayStartedShards.list(TransportNodesListGatewayStartedShards.java:79)%0A%09at org.elasticsearch.gateway.AsyncShardFetch.asyncFetch(AsyncShardFetch.java:275)%0A%09at org.elasticsearch.gateway.AsyncShardFetch.fetchData(AsyncShardFetch.java:125)%0A%09at org.elasticsearch.gateway.GatewayAllocator$InternalPrimaryShardAllocator.fetchData(GatewayAllocator.java:157)%0A%09at org.elasticsearch.gateway.PrimaryShardAllocator.allocateUnassigned(PrimaryShardAllocator.java:65)%0A%09at org.elasticsearch.gateway.GatewayAllocator.allocateUnassigned(GatewayAllocator.java:121)%0A%09at org.elasticsearch.cluster.routing.allocation.allocator.ShardsAllocators.allocateUnassigned(ShardsAllocators.java:72)%0A%09at org.elasticsearch.cluster.routing.allocation.AllocationService.reroute(AllocationService.java:304)%0A%09at org.elasticsearch.cluster.routing.allocation.AllocationService.reroute(AllocationService.java:268)%0A%09at org.elasticsearch.cluster.routing.allocation.AllocationService.reroute(AllocationService.java:254)%0A%09at org.elasticsearch.indices.state.RareClusterStateIT$1.execute(RareClusterStateIT.java:131)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,179][TRACE][org.elasticsearch.gateway] [node_t0] [index][0], node[null], [P], v[0], s[UNASSIGNED], unassigned_info[[reason=CLUSTER_RECOVERED], at[2016-03-30T21:04:18.178Z]]: ignoring allocation, still fetching shard started state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,179][TRACE][org.elasticsearch.gateway] [node_t0] [index][0] loading local shard state info%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,180][TRACE][org.elasticsearch.gateway] [node_t0] found state file: [id:0, legacy:false, file:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.indices.state.RareClusterStateIT_F7928424F380CF7C-001/tempDir-004/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[2384909641678833841]-HASH=[462E1198545AF]-cluster/nodes/0/indices/index/0/_state/state-0.st]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,180][WARN ][org.elasticsearch.cluster.service] [node_t0] failed to connect to node [{_non_existent}{dummy}{_dummy_addr_}]%0AConnectTransportException[[][_dummy_addr_] general node connection failure]; nested: ClassCastException[org.elasticsearch.common.transport.DummyTransportAddress cannot be cast to org.elasticsearch.common.transport.InetSocketTransportAddress];%0A%09at org.elasticsearch.transport.netty.NettyTransport.connectToNode(NettyTransport.java:933)%0A%09at org.elasticsearch.transport.netty.NettyTransport.connectToNode(NettyTransport.java:889)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.connectToNode(MockTransportService.java:407)%0A%09at org.elasticsearch.transport.TransportService.connectToNode(TransportService.java:243)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:500)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.ClassCastException: org.elasticsearch.common.transport.DummyTransportAddress cannot be cast to org.elasticsearch.common.transport.InetSocketTransportAddress%0A%09at org.elasticsearch.transport.netty.NettyTransport.connectToChannels(NettyTransport.java:962)%0A%09at org.elasticsearch.transport.netty.NettyTransport.connectToNode(NettyTransport.java:916)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,182][TRACE][org.elasticsearch.gateway] [node_t0] state id [0] read from [state-0.st]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,182][TRACE][org.elasticsearch.gateway] [node_t0] [index] writing state, reason [version changed from [3] to [4]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,182][TRACE][org.elasticsearch.gateway] [node_t0] found state file: [id:0, legacy:false, file:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.indices.state.RareClusterStateIT_F7928424F380CF7C-001/tempDir-004/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[2384909641678833841]-HASH=[462E1198545AF]-cluster/nodes/0/indices/index/0/_state/state-0.st]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,184][TRACE][org.elasticsearch.gateway] [node_t0] state id [0] read from [state-0.st]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,184][DEBUG][org.elasticsearch.gateway] [node_t0] [index][0] loaded data path [/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.indices.state.RareClusterStateIT_F7928424F380CF7C-001/tempDir-004/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[2384909641678833841]-HASH=[462E1198545AF]-cluster/nodes/0/indices/index/0], state path [/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.indices.state.RareClusterStateIT_F7928424F380CF7C-001/tempDir-004/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[2384909641678833841]-HASH=[462E1198545AF]-cluster/nodes/0/indices/index/0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,187][DEBUG][org.elasticsearch.gateway] [node_t0] [index][0] shard state info found: [version [2], primary [true], allocation [[id=oe2Iynb0Suimxp-qbbr54A]]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,187][TRACE][org.elasticsearch.gateway] [node_t0] [index][0] processing fetched [shard_started] results%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,187][TRACE][org.elasticsearch.gateway] [node_t0] [index][0] marking 9B7XP-w4SDe-OX6gjQ3JSw as done for [shard_started]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,187][TRACE][org.elasticsearch.gateway] [node_t0] [index][0] processing failure FailedNodeException[Failed node [_non_existent]]; nested: NoSuchNodeException[No such node [_non_existent]]; for [shard_started]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,187][WARN ][org.elasticsearch.gateway] [node_t0] [index][0]: failed to list shard for shard_started on node [_non_existent]%0AFailedNodeException[Failed node [_non_existent]]; nested: NoSuchNodeException[No such node [_non_existent]];%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onFailure(TransportNodesAction.java:188)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.start(TransportNodesAction.java:140)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$100(TransportNodesAction.java:95)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction.doExecute(TransportNodesAction.java:69)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction.doExecute(TransportNodesAction.java:45)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.gateway.TransportNodesListGatewayStartedShards.list(TransportNodesListGatewayStartedShards.java:79)%0A%09at org.elasticsearch.gateway.AsyncShardFetch.asyncFetch(AsyncShardFetch.java:275)%0A%09at org.elasticsearch.gateway.AsyncShardFetch.fetchData(AsyncShardFetch.java:125)%0A%09at org.elasticsearch.gateway.GatewayAllocator$InternalPrimaryShardAllocator.fetchData(GatewayAllocator.java:157)%0A%09at org.elasticsearch.gateway.PrimaryShardAllocator.allocateUnassigned(PrimaryShardAllocator.java:65)%0A%09at org.elasticsearch.gateway.GatewayAllocator.allocateUnassigned(GatewayAllocator.java:121)%0A%09at org.elasticsearch.cluster.routing.allocation.allocator.ShardsAllocators.allocateUnassigned(ShardsAllocators.java:72)%0A%09at org.elasticsearch.cluster.routing.allocation.AllocationService.reroute(AllocationService.java:304)%0A%09at org.elasticsearch.cluster.routing.allocation.AllocationService.reroute(AllocationService.java:268)%0A%09at org.elasticsearch.cluster.routing.allocation.AllocationService.reroute(AllocationService.java:254)%0A%09at org.elasticsearch.indices.state.RareClusterStateIT$1.execute(RareClusterStateIT.java:131)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: NoSuchNodeException[No such node [_non_existent]]%0A%09... 24 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,188][TRACE][org.elasticsearch.gateway] [node_t0] [index][0] scheduling reroute for post_response%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,191][TRACE][org.elasticsearch.gateway] [node_t0] [[index][0], node[null], [P], v[0], s[UNASSIGNED], unassigned_info[[reason=CLUSTER_RECOVERED], at[2016-03-30T21:04:18.178Z]]] on node [{node_t0}{9B7XP-w4SDe-OX6gjQ3JSw}{127.0.0.1}{127.0.0.1:9460}[mode=>network]] has version [2] of shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,192][TRACE][org.elasticsearch.gateway] [node_t0] [index][0], node[null], [P], v[0], s[UNASSIGNED], unassigned_info[[reason=CLUSTER_RECOVERED], at[2016-03-30T21:04:18.178Z]] candidates for allocation: [[node_t0] -> 2, ]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,192][DEBUG][org.elasticsearch.gateway] [node_t0] [index][0] found 1 allocations of [index][0], node[null], [P], v[0], s[UNASSIGNED], unassigned_info[[reason=CLUSTER_RECOVERED], at[2016-03-30T21:04:18.178Z]], highest version: [2]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,193][DEBUG][org.elasticsearch.gateway] [node_t0] [index][0]: allocating [[index][0], node[null], [P], v[0], s[UNASSIGNED], unassigned_info[[reason=CLUSTER_RECOVERED], at[2016-03-30T21:04:18.178Z]]] to [{node_t0}{9B7XP-w4SDe-OX6gjQ3JSw}{127.0.0.1}{127.0.0.1:9460}[mode=>network]] on primary allocation%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:04:18,227][TRACE][org.elasticsearch.gateway] [node_t0] [index] writing state, reason [version changed from [4] to [5]]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAssignmentWithJustAddedNodes(org.elasticsearch.indices.state.RareClusterStateIT)",
  "startTimestamp": 1459371854964,
  "executionTime": 3305
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.state.RareClusterStateIT",
  "startTimestamp": 1459371844361,
  "executionTime": 13950
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.stats.IndexStatsIT",
   "displayName": "org.elasticsearch.indices.stats.IndexStatsIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.stats.IndexStatsIT",
   "children": [
    {
     "id": "ID#testThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testThrottleStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testMultiIndex(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testMultiIndex(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testMultiIndex",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testQueryCache(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testQueryCache(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testQueryCache",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testFieldDataFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testFieldDataFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testFieldDataFieldsParam",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testSegmentsStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testSegmentsStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testSegmentsStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testAllFlags(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testAllFlags(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testAllFlags",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testSimpleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testSimpleStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testFilterCacheStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testFilterCacheStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testFilterCacheStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testEncodeDecodeCommonStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testEncodeDecodeCommonStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testEncodeDecodeCommonStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testFieldDataStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testFieldDataStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testFieldDataStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testNonThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testNonThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testNonThrottleStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testFlagOrdinalOrder(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testFlagOrdinalOrder(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testFlagOrdinalOrder",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testClearAllCaches(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testClearAllCaches(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testClearAllCaches",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testTypesParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testTypesParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testTypesParam",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testMergeStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testMergeStats(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testMergeStats",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testCompletionFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testCompletionFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testCompletionFieldsParam",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    },
    {
     "id": "ID#testGroupsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "displayName": "testGroupsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
     "methodName": "testGroupsParam",
     "className": "org.elasticsearch.indices.stats.IndexStatsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371858414
 }
]

[
 "TEST_STARTED",
 "ID#testThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371858441,
  "executionTime": 12021
 }
]

[
 "TEST_STARTED",
 "ID#testMultiIndex(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiIndex(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371870462,
  "executionTime": 883
 }
]

[
 "TEST_STARTED",
 "ID#testQueryCache(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryCache(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371871345,
  "executionTime": 1584
 }
]

[
 "TEST_STARTED",
 "ID#testFieldDataFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldDataFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371872929,
  "executionTime": 1318
 }
]

[
 "TEST_STARTED",
 "ID#testSegmentsStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSegmentsStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371874247,
  "executionTime": 2330
 }
]

[
 "TEST_STARTED",
 "ID#testAllFlags(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllFlags(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371876577,
  "executionTime": 2041
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371878619,
  "executionTime": 2713
 }
]

[
 "TEST_STARTED",
 "ID#testFilterCacheStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterCacheStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371881332,
  "executionTime": 1275
 }
]

[
 "TEST_STARTED",
 "ID#testEncodeDecodeCommonStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEncodeDecodeCommonStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371882607,
  "executionTime": 111
 }
]

[
 "TEST_STARTED",
 "ID#testFieldDataStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldDataStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371882718,
  "executionTime": 1016
 }
]

[
 "TEST_STARTED",
 "ID#testNonThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonThrottleStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371883734,
  "executionTime": 1225
 }
]

[
 "TEST_STARTED",
 "ID#testFlagOrdinalOrder(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFlagOrdinalOrder(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371884960,
  "executionTime": 94
 }
]

[
 "TEST_STARTED",
 "ID#testClearAllCaches(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClearAllCaches(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371885055,
  "executionTime": 483
 }
]

[
 "TEST_STARTED",
 "ID#testTypesParam(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTypesParam(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371885539,
  "executionTime": 2808
 }
]

[
 "TEST_STARTED",
 "ID#testMergeStats(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMergeStats(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371888347,
  "executionTime": 10540
 }
]

[
 "TEST_STARTED",
 "ID#testCompletionFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCompletionFieldsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371898888,
  "executionTime": 2837
 }
]

[
 "TEST_STARTED",
 "ID#testGroupsParam(org.elasticsearch.indices.stats.IndexStatsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGroupsParam(org.elasticsearch.indices.stats.IndexStatsIT)",
  "startTimestamp": 1459371901725,
  "executionTime": 737
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.stats.IndexStatsIT",
  "startTimestamp": 1459371858414,
  "executionTime": 44093
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.percolator.TTLPercolatorIT",
   "displayName": "org.elasticsearch.percolator.TTLPercolatorIT",
   "methodName": null,
   "className": "org.elasticsearch.percolator.TTLPercolatorIT",
   "children": [
    {
     "id": "ID#testEnsureTTLDoesNotCreateIndex(org.elasticsearch.percolator.TTLPercolatorIT)",
     "displayName": "testEnsureTTLDoesNotCreateIndex(org.elasticsearch.percolator.TTLPercolatorIT)",
     "methodName": "testEnsureTTLDoesNotCreateIndex",
     "className": "org.elasticsearch.percolator.TTLPercolatorIT",
     "children": []
    },
    {
     "id": "ID#testPercolatingWithTimeToLive(org.elasticsearch.percolator.TTLPercolatorIT)",
     "displayName": "testPercolatingWithTimeToLive(org.elasticsearch.percolator.TTLPercolatorIT)",
     "methodName": "testPercolatingWithTimeToLive",
     "className": "org.elasticsearch.percolator.TTLPercolatorIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371902738
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureTTLDoesNotCreateIndex(org.elasticsearch.percolator.TTLPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureTTLDoesNotCreateIndex(org.elasticsearch.percolator.TTLPercolatorIT)",
  "startTimestamp": 1459371902763,
  "executionTime": 3474
 }
]

[
 "TEST_STARTED",
 "ID#testPercolatingWithTimeToLive(org.elasticsearch.percolator.TTLPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPercolatingWithTimeToLive(org.elasticsearch.percolator.TTLPercolatorIT)",
  "startTimestamp": 1459371906238,
  "executionTime": 2111
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.percolator.TTLPercolatorIT",
  "startTimestamp": 1459371902738,
  "executionTime": 5664
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.recovery.RelocationIT",
   "displayName": "org.elasticsearch.recovery.RelocationIT",
   "methodName": null,
   "className": "org.elasticsearch.recovery.RelocationIT",
   "children": [
    {
     "id": "ID#testSimpleRelocationNoIndexing(org.elasticsearch.recovery.RelocationIT)",
     "displayName": "testSimpleRelocationNoIndexing(org.elasticsearch.recovery.RelocationIT)",
     "methodName": "testSimpleRelocationNoIndexing",
     "className": "org.elasticsearch.recovery.RelocationIT",
     "children": []
    },
    {
     "id": "ID#testRelocationWhileIndexingRandom(org.elasticsearch.recovery.RelocationIT)",
     "displayName": "testRelocationWhileIndexingRandom(org.elasticsearch.recovery.RelocationIT)",
     "methodName": "testRelocationWhileIndexingRandom",
     "className": "org.elasticsearch.recovery.RelocationIT",
     "children": []
    },
    {
     "id": "ID#testCancellationCleansTempFiles(org.elasticsearch.recovery.RelocationIT)",
     "displayName": "testCancellationCleansTempFiles(org.elasticsearch.recovery.RelocationIT)",
     "methodName": "testCancellationCleansTempFiles",
     "className": "org.elasticsearch.recovery.RelocationIT",
     "children": []
    },
    {
     "id": "ID#testRelocationWhileRefreshing(org.elasticsearch.recovery.RelocationIT)",
     "displayName": "testRelocationWhileRefreshing(org.elasticsearch.recovery.RelocationIT)",
     "methodName": "testRelocationWhileRefreshing",
     "className": "org.elasticsearch.recovery.RelocationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371908547
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleRelocationNoIndexing(org.elasticsearch.recovery.RelocationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:08,640][DEBUG][org.elasticsearch.indices.recovery] [node_t0] using max_bytes_per_sec[40mb], concurrent_streams [3], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,328][DEBUG][org.elasticsearch.indices.recovery] [node_t1] using max_bytes_per_sec[62mb], concurrent_streams [3], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,380][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] started recovery from {node_t0}{mvNcgmepQTebkA1i0WTA-g}{local}{local[466]}[mode=>local], id [443]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,380][TRACE][org.elasticsearch.indices.recovery] [node_t1] collecting local files for [test][0] [443]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,384][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] starting recovery from {node_t0}{mvNcgmepQTebkA1i0WTA-g}{local}{local[466]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,384][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,384][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [2] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,391][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,391][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,391][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,391][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: recovering [segments_2], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,391][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: recovering_files [4] with total_size [3.4kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,492][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,637][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: remote engine start took [145.7ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,637][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,638][TRACE][org.elasticsearch.indices.recovery] [node_t0] snapshot translog for recovery. current size is [10]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,638][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,650][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] sent final batch of [10][440b] (total: [10]) translog operations to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,650][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: took [12.4ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,650][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,859][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t1}{2Gscg4nlQTKisTfpKICeWA}{local}{local[468]}[mode=>local]: took [209.1ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,860][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] marking recovery from {node_t0}{mvNcgmepQTebkA1i0WTA-g}{local}{local[466]}[mode=>local] as done, id [443]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:09,860][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] recovery completed from {node_t0}{mvNcgmepQTebkA1i0WTA-g}{local}{local[466]}[mode=>local], took[480ms]%0A   phase1: recovered_files [4] with total_size of [3.4kb], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [145ms]%0A         : recovered [10] transaction log operations, took [12ms]%0A%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleRelocationNoIndexing(org.elasticsearch.recovery.RelocationIT)",
  "startTimestamp": 1459371908564,
  "executionTime": 1473
 }
]

[
 "TEST_STARTED",
 "ID#testRelocationWhileIndexingRandom(org.elasticsearch.recovery.RelocationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,114][DEBUG][org.elasticsearch.indices.recovery] [node_t0] using max_bytes_per_sec[113mb], concurrent_streams [4], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,220][DEBUG][org.elasticsearch.indices.recovery] [node_t1] using max_bytes_per_sec[55mb], concurrent_streams [4], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,271][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] started recovery from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local], id [444]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,272][TRACE][org.elasticsearch.indices.recovery] [node_t1] collecting local files for [test][0] [444]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,273][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] starting recovery from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,274][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,274][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,278][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: recovering [segments_1], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,278][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: recovering_files [1] with total_size [130b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,333][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,383][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: remote engine start took [50.1ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,383][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,383][TRACE][org.elasticsearch.indices.recovery] [node_t0] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,383][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,383][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] no translog operations to send to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,383][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,384][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: took [229.7micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,384][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,384][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t1}{CHV_XTyTTtuYOhKI0z0tiQ}{local}{local[472]}[mode=>local]: took [387.4micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,384][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] marking recovery from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local] as done, id [444]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,384][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] recovery completed from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local], took[112ms]%0A   phase1: recovered_files [1] with total_size of [130b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [50ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:10,472][DEBUG][org.elasticsearch.indices.recovery] [node_t2] using max_bytes_per_sec[40mb], concurrent_streams [4], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,596][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] started recovery from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local], id [445]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,596][TRACE][org.elasticsearch.indices.recovery] [node_t2] collecting local files for [test][0] [445]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,602][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] starting recovery from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,602][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,602][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,607][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: recovering [segments_1], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,607][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: recovering_files [1] with total_size [130b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,625][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,682][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: remote engine start took [56.9ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,682][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,682][TRACE][org.elasticsearch.indices.recovery] [node_t0] snapshot translog for recovery. current size is [364]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,682][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,888][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] sent final batch of [364][83.5kb] (total: [364]) translog operations to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,888][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: took [205.6ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:14,888][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:15,266][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t2}{9CeYdMzPT2yacT4OzdRsPw}{local}{local[473]}[mode=>local]: took [377.8ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:15,266][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] marking recovery from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local] as done, id [445]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:15,266][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] recovery completed from {node_t0}{oKHhyPeyTda9QQB8GOlFXQ}{local}{local[470]}[mode=>local], took[670ms]%0A   phase1: recovered_files [1] with total_size of [130b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [56ms]%0A         : recovered [364] transaction log operations, took [205ms]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:18,769][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [14]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRelocationWhileIndexingRandom(org.elasticsearch.recovery.RelocationIT)",
  "startTimestamp": 1459371910038,
  "executionTime": 8745
 }
]

[
 "TEST_STARTED",
 "ID#testCancellationCleansTempFiles(org.elasticsearch.recovery.RelocationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:18,863][DEBUG][org.elasticsearch.indices.recovery] [node_t0] using max_bytes_per_sec[40mb], concurrent_streams [4], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:19,031][DEBUG][org.elasticsearch.indices.recovery] [node_t1] using max_bytes_per_sec[15mb], concurrent_streams [4], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:19,159][DEBUG][org.elasticsearch.indices.recovery] [node_t2] using max_bytes_per_sec[40mb], concurrent_streams [4], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,221][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] started recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [446]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,221][TRACE][org.elasticsearch.indices.recovery] [node_t2] collecting local files for [test][0] [446]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,222][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] starting recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,223][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,223][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [2] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_1.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_1.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_1.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [segments_2], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0_1.liv], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,234][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering_files [8] with total_size [8.3kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,427][DEBUG][org.elasticsearch.indices.recovery] [node_t0] Failed to transfer file [name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]] on recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,437][WARN ][org.elasticsearch.indices.recovery] [node_t0] 0 Remote file corruption on node {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local], recovering name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]. local checksum OK%0Aorg.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,440][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] Got exception on recovery%0ARemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,442][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] failing recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [446]. Send shard failure: [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,443][WARN ][org.elasticsearch.indices.cluster] [node_t2] [[test][0]] marking and sending shard failed due to [failed recovery]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,446][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] closing IndexOutput file [VerifyingIndexOutput(out=MockIndexOutputWrapper(FSIndexOutput(path=\"/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.recovery.RelocationIT_F7928424F380CF7C-001/tempDir-003/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[-1872730973068554045]-HASH=[462EFF59DD44D]-cluster/nodes/2/indices/test/0/index/recovery.1459371920220.segments_2\")))]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,446][WARN ][org.elasticsearch.cluster.action.shard] [node_t0] [test][0] received shard failed for [test][0], node[KiCL2q9sQbOOLvzo3MxWkw], [R], v[3], s[INITIALIZING], a[id=wK4EWq8jRqK-JQARDfJQ-Q], unassigned_info[[reason=REPLICA_ADDED], at[2016-03-30T21:05:20.190Z]], indexUUID [ViysPQ8tQsijUsp5c1zZHQ], message [failed recovery], failure [RecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]; ]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,446][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220.segments_2]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,449][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220._0_1.liv]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,450][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220._0.si]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,452][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220._1.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,459][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220._1.si]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,470][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220._0.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,472][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220._1.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,482][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920220._0.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,495][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] started recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [447]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,503][TRACE][org.elasticsearch.indices.recovery] [node_t1] collecting local files for [test][0] [447]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,515][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] starting recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,516][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,516][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [2] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,556][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_1.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_1.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_1.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [segments_2], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0_1.liv], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,557][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering_files [8] with total_size [8.3kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,739][DEBUG][org.elasticsearch.indices.recovery] [node_t0] Failed to transfer file [name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]] on recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,750][WARN ][org.elasticsearch.indices.recovery] [node_t0] 0 Remote file corruption on node {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local], recovering name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]. local checksum OK%0Aorg.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,752][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] Got exception on recovery%0ARemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,753][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] failing recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [447]. Send shard failure: [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,753][WARN ][org.elasticsearch.indices.cluster] [node_t1] [[test][0]] marking and sending shard failed due to [failed recovery]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]]; nested: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,758][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] closing IndexOutput file [VerifyingIndexOutput(out=MockIndexOutputWrapper(FSIndexOutput(path=\"/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.recovery.RelocationIT_F7928424F380CF7C-001/tempDir-003/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[-1872730973068554045]-HASH=[462EFF59DD44D]-cluster/nodes/1/indices/test/0/index/recovery.1459371920495.segments_2\")))]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,758][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495._0.si]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,758][WARN ][org.elasticsearch.cluster.action.shard] [node_t0] [test][0] received shard failed for [test][0], node[NjZvErxCTE6AtwBObgLE5w], [R], v[5], s[INITIALIZING], a[id=A6fRhUccRpWFNV2LoKnPQA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T21:05:20.448Z], details[failed recovery, failure RecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]; ]], indexUUID [ViysPQ8tQsijUsp5c1zZHQ], message [failed recovery], failure [RecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]]; nested: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]; ]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]]; nested: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,759][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495._1.si]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,761][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495._1.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,761][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495._0.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,773][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495._1.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,784][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495._0.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,786][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495.segments_2]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,787][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371920495._0_1.liv]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,828][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] started recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [448]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,829][TRACE][org.elasticsearch.indices.recovery] [node_t2] collecting local files for [test][0] [448]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,850][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] starting recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,850][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,850][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [2] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_1.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_1.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_1.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [segments_2], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering [_0_1.liv], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:20,946][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]: recovering_files [8] with total_size [8.3kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,013][DEBUG][org.elasticsearch.indices.recovery] [node_t0] Failed to transfer file [name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]] on recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,013][WARN ][org.elasticsearch.indices.recovery] [node_t0] 0 Remote file corruption on node {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local], recovering name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]. local checksum OK%0Aorg.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,025][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] Got exception on recovery%0ARemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,026][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] failing recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [448]. Send shard failure: [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,026][WARN ][org.elasticsearch.indices.cluster] [node_t2] [[test][0]] marking and sending shard failed due to [failed recovery]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,030][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] closing IndexOutput file [VerifyingIndexOutput(out=MockIndexOutputWrapper(FSIndexOutput(path=\"/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.recovery.RelocationIT_F7928424F380CF7C-001/tempDir-003/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[-1872730973068554045]-HASH=[462EFF59DD44D]-cluster/nodes/2/indices/test/0/index/recovery.1459371920828.segments_2\")))]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,031][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828._1.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,031][WARN ][org.elasticsearch.cluster.action.shard] [node_t0] [test][0] received shard failed for [test][0], node[KiCL2q9sQbOOLvzo3MxWkw], [R], v[7], s[INITIALIZING], a[id=FshlN7D4Tl6zFyb4wQzAGQ], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T21:05:20.760Z], details[failed recovery, failure RecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]]; nested: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]; ]], indexUUID [ViysPQ8tQsijUsp5c1zZHQ], message [failed recovery], failure [RecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]; ]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,042][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828._0_1.liv]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,043][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828.segments_2]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,053][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828._0.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,074][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828._0.si]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,085][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828._0.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,086][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828._1.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,090][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] cleaning temporary file [recovery.1459371920828._1.si]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,121][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] started recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [449]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,122][TRACE][org.elasticsearch.indices.recovery] [node_t1] collecting local files for [test][0] [449]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,143][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] starting recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,143][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,144][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [2] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_1.cfs], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_1.cfe], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_1.si], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [segments_2], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering [_0_1.liv], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,178][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]: recovering_files [8] with total_size [8.3kb], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,344][DEBUG][org.elasticsearch.indices.recovery] [node_t0] Failed to transfer file [name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]] on recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,344][WARN ][org.elasticsearch.indices.recovery] [node_t0] 0 Remote file corruption on node {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local], recovering name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]. local checksum OK%0Aorg.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,346][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] Got exception on recovery%0ARemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,348][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] failing recovery from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local], id [449]. Send shard failure: [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,349][WARN ][org.elasticsearch.indices.cluster] [node_t1] [[test][0]] marking and sending shard failed due to [failed recovery]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]]; nested: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,352][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] closing IndexOutput file [VerifyingIndexOutput(out=MockIndexOutputWrapper(FSIndexOutput(path=\"/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0/temp/org.elasticsearch.recovery.RelocationIT_F7928424F380CF7C-001/tempDir-003/data/TEST-CHILD_VM=[0]-CLUSTER_SEED=[-1872730973068554045]-HASH=[462EFF59DD44D]-cluster/nodes/1/indices/test/0/index/recovery.1459371921121.segments_2\")))]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,352][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121._0.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,352][WARN ][org.elasticsearch.cluster.action.shard] [node_t0] [test][0] received shard failed for [test][0], node[NjZvErxCTE6AtwBObgLE5w], [R], v[9], s[INITIALIZING], a[id=6n4gOekwTbeGP_v75VplFg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-30T21:05:21.042Z], details[failed recovery, failure RecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t2}{KiCL2q9sQbOOLvzo3MxWkw}{local}{local[479]}[mode=>local]]; nested: RemoteTransportException[[node_t2][local[479]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]; ]], indexUUID [ViysPQ8tQsijUsp5c1zZHQ], message [failed recovery], failure [RecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]]; nested: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]; ]%0ARecoveryFailedException[[test][0]: Recovery failed from {node_t0}{KfmlrJoySiaNnFA0Pe6FTQ}{local}{local[476]}[mode=>local] into {node_t1}{NjZvErxCTE6AtwBObgLE5w}{local}{local[478]}[mode=>local]]; nested: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.doRecovery(RecoveryTarget.java:260)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget.access$1100(RecoveryTarget.java:68)%0A%09at org.elasticsearch.indices.recovery.RecoveryTarget$RecoveryRunner.doRun(RecoveryTarget.java:510)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RemoteTransportException[[node_t1][local[478]][internal:index/shard/recovery/start_recovery]]; nested: RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0ACaused by: [test][[test][0]] RecoveryEngineException[Phase[1] phase1 failed]; nested: RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:136)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.recover(RecoverySource.java:117)%0A%09at org.elasticsearch.indices.recovery.RecoverySource.access$100(RecoverySource.java:46)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:126)%0A%09at org.elasticsearch.indices.recovery.RecoverySource$StartRecoveryTransportRequestHandler.messageReceived(RecoverySource.java:123)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] RecoverFilesRecoveryException[Failed to transfer [8] files with total size of [8.3kb]]; nested: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]];%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:315)%0A%09at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:134)%0A%09... 9 more%0ACaused by: RemoteTransportException[[File corruption occurred on recovery but checksums are ok]]%0A%09Suppressed: RemoteTransportException[[node_t0][local[476]][internal:index/shard/recovery/file_chunk]]; nested: CorruptIndexException[checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))];%0A%09Caused by: org.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=oqm3go actual=1ba9wfk (resource=name [segments_2], length [257], checksum [oqm3go], writtenBy [5.4.0]) (resource=VerifyingIndexOutput(segments_2))%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.readAndCompareChecksum(Store.java:1313)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeByte(Store.java:1292)%0A%09%09at org.elasticsearch.index.store.Store$LuceneVerifyingIndexOutput.writeBytes(Store.java:1321)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:457)%0A%09%09at org.elasticsearch.indices.recovery.RecoveryTarget$FileChunkTransportRequestHandler.messageReceived(RecoveryTarget.java:421)%0A%09%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,353][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121._0.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,354][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121._1.cfe]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,355][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121._1.cfs]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,358][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121.segments_2]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,360][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121._0_1.liv]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,365][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121._0.si]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,371][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] cleaning temporary file [recovery.1459371921121._1.si]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCancellationCleansTempFiles(org.elasticsearch.recovery.RelocationIT)",
  "startTimestamp": 1459371918784,
  "executionTime": 2857
 }
]

[
 "TEST_STARTED",
 "ID#testRelocationWhileRefreshing(org.elasticsearch.recovery.RelocationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,716][DEBUG][org.elasticsearch.indices.recovery] [node_t0] using max_bytes_per_sec[40mb], concurrent_streams [6], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:21,980][DEBUG][org.elasticsearch.indices.recovery] [node_t1] using max_bytes_per_sec[40mb], concurrent_streams [6], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,029][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] started recovery from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local], id [450]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,029][TRACE][org.elasticsearch.indices.recovery] [node_t1] collecting local files for [test][0] [450]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,048][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] starting recovery from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,048][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,049][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,069][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: recovering [segments_1], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,069][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: recovering_files [1] with total_size [130b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,135][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,188][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: remote engine start took [52.6ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,188][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,188][TRACE][org.elasticsearch.indices.recovery] [node_t0] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,188][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,188][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] no translog operations to send to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,189][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,189][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: took [317.8micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,189][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,189][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t1}{H_2DyR3hTtGNtxhp1NXOOw}{local}{local[484]}[mode=>local]: took [437.3micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,189][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] marking recovery from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local] as done, id [450]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,190][TRACE][org.elasticsearch.indices.recovery] [node_t1] [test][0] recovery completed from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local], took[160ms]%0A   phase1: recovered_files [1] with total_size of [130b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [52ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,276][DEBUG][org.elasticsearch.indices.recovery] [node_t2] using max_bytes_per_sec[158mb], concurrent_streams [6], file_chunk_size [512kb], translog_size [512kb], translog_ops [1000], and compress [true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,349][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] started recovery from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local], id [451]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,350][TRACE][org.elasticsearch.indices.recovery] [node_t2] collecting local files for [test][0] [451]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,364][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] starting recovery from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,365][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] starting recovery to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,366][TRACE][org.elasticsearch.indices.recovery] [node_t0] captured translog id [1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,423][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: recovering [segments_1], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,423][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: recovering_files [1] with total_size [130b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,496][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,560][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: remote engine start took [63.9ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,560][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase1] to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,560][TRACE][org.elasticsearch.indices.recovery] [node_t0] snapshot translog for recovery. current size is [25]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,561][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,572][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] sent final batch of [25][1.5kb] (total: [25]) translog operations to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,572][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] recovery [phase2] to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: took [11.9ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:22,573][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:23,037][TRACE][org.elasticsearch.indices.recovery] [node_t0] [test][0] finalizing recovery to {node_t2}{owtMUNQWQ4imlb1EPr7UYg}{local}{local[485]}[mode=>local]: took [464.7ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:23,038][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] marking recovery from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local] as done, id [451]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:23,038][TRACE][org.elasticsearch.indices.recovery] [node_t2] [test][0] recovery completed from {node_t0}{Uj5uMn0ETSCCG26ClNuOUQ}{local}{local[482]}[mode=>local], took[688ms]%0A   phase1: recovered_files [1] with total_size of [130b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [63ms]%0A         : recovered [25] transaction log operations, took [11ms]%0A%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRelocationWhileRefreshing(org.elasticsearch.recovery.RelocationIT)",
  "startTimestamp": 1459371921641,
  "executionTime": 3470
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.recovery.RelocationIT",
  "startTimestamp": 1459371908547,
  "executionTime": 16665
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.SearchWithRejectionsIT",
   "displayName": "org.elasticsearch.search.SearchWithRejectionsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.SearchWithRejectionsIT",
   "children": [
    {
     "id": "ID#testOpenContextsAfterRejections(org.elasticsearch.search.SearchWithRejectionsIT)",
     "displayName": "testOpenContextsAfterRejections(org.elasticsearch.search.SearchWithRejectionsIT)",
     "methodName": "testOpenContextsAfterRejections",
     "className": "org.elasticsearch.search.SearchWithRejectionsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371925482
 }
]

[
 "TEST_STARTED",
 "ID#testOpenContextsAfterRejections(org.elasticsearch.search.SearchWithRejectionsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOpenContextsAfterRejections(org.elasticsearch.search.SearchWithRejectionsIT)",
  "startTimestamp": 1459371925501,
  "executionTime": 4646
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.SearchWithRejectionsIT",
  "startTimestamp": 1459371925482,
  "executionTime": 4707
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.MetaDataIT",
   "displayName": "org.elasticsearch.search.aggregations.MetaDataIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.MetaDataIT",
   "children": [
    {
     "id": "ID#testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)",
     "displayName": "testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)",
     "methodName": "testMetaDataSetOnAggregationResult",
     "className": "org.elasticsearch.search.aggregations.MetaDataIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371930271
 }
]

[
 "TEST_STARTED",
 "ID#testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)",
  "startTimestamp": 1459371930297,
  "executionTime": 1599
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.MetaDataIT",
  "startTimestamp": 1459371930271,
  "executionTime": 1664
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.ChildrenIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
   "children": [
    {
     "id": "ID#testChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "displayName": "testChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "methodName": "testChildrenAggs",
     "className": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
     "children": []
    },
    {
     "id": "ID#testPostCollection(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "displayName": "testPostCollection(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "methodName": "testPostCollection",
     "className": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
     "children": []
    },
    {
     "id": "ID#testHierarchicalChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "displayName": "testHierarchicalChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "methodName": "testHierarchicalChildrenAggs",
     "className": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
     "children": []
    },
    {
     "id": "ID#testParentWithMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "displayName": "testParentWithMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "methodName": "testParentWithMultipleBuckets",
     "className": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
     "children": []
    },
    {
     "id": "ID#testNonExistingChildType(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "displayName": "testNonExistingChildType(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "methodName": "testNonExistingChildType",
     "className": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
     "children": []
    },
    {
     "id": "ID#testWithDeletes(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "displayName": "testWithDeletes(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
     "methodName": "testWithDeletes",
     "className": "org.elasticsearch.search.aggregations.bucket.ChildrenIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371932033
 }
]

[
 "TEST_STARTED",
 "ID#testChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
  "startTimestamp": 1459371934019,
  "executionTime": 68
 }
]

[
 "TEST_STARTED",
 "ID#testPostCollection(org.elasticsearch.search.aggregations.bucket.ChildrenIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostCollection(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
  "startTimestamp": 1459371934088,
  "executionTime": 575
 }
]

[
 "TEST_STARTED",
 "ID#testHierarchicalChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHierarchicalChildrenAggs(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
  "startTimestamp": 1459371934664,
  "executionTime": 441
 }
]

[
 "TEST_STARTED",
 "ID#testParentWithMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ChildrenIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParentWithMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
  "startTimestamp": 1459371935105,
  "executionTime": 30
 }
]

[
 "TEST_STARTED",
 "ID#testNonExistingChildType(org.elasticsearch.search.aggregations.bucket.ChildrenIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonExistingChildType(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
  "startTimestamp": 1459371935136,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testWithDeletes(org.elasticsearch.search.aggregations.bucket.ChildrenIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithDeletes(org.elasticsearch.search.aggregations.bucket.ChildrenIT)",
  "startTimestamp": 1459371935172,
  "executionTime": 4389
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.ChildrenIT",
  "startTimestamp": 1459371932033,
  "executionTime": 9116
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
   "children": [
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testWithSubAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testMultiValues",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testSimpleWithCustomKeys",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371941366
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1459371947915,
  "executionTime": 112
 }
]

[
 "TEST_STARTED",
 "ID#testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1459371948027,
  "executionTime": 187
 }
]

[
 "TEST_STARTED",
 "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1459371948214,
  "executionTime": 83
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1459371948298,
  "executionTime": 172
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1459371948471,
  "executionTime": 84
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1459371948555,
  "executionTime": 139
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1459371948694,
  "executionTime": 136
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:05:51,059][WARN ][org.elasticsearch.test.transport] [node_s1] Transport response handler not found of id [336]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
  "startTimestamp": 1459371941366,
  "executionTime": 9738
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.NestedIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.NestedIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
   "children": [
    {
     "id": "ID#testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testParentFilterResolvedCorrectly",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedOnObjectField",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNonExistingNestedField",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedAsSubAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedSameDocIdProcessedMultipleTime",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestNestedAggs",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedWithSubTermsAgg",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371951201
 }
]

[
 "TEST_STARTED",
 "ID#testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371953924,
  "executionTime": 497
 }
]

[
 "TEST_STARTED",
 "ID#testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371954421,
  "executionTime": 35
 }
]

[
 "TEST_STARTED",
 "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371954457,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371954485,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371954512,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371954541,
  "executionTime": 526
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371955067,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371955105,
  "executionTime": 31
 }
]

[
 "TEST_STARTED",
 "ID#testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459371955137,
  "executionTime": 25
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.NestedIT",
  "startTimestamp": 1459371951201,
  "executionTime": 5269
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
   "children": [
    {
     "id": "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "displayName": "testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "methodName": "testNonExistingNestedField",
     "className": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
     "children": []
    },
    {
     "id": "ID#testSimpleReverseNestedToNested1(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "displayName": "testSimpleReverseNestedToNested1(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "methodName": "testSimpleReverseNestedToNested1",
     "className": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
     "children": []
    },
    {
     "id": "ID#testReverseNestedAggWithoutNestedAgg(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "displayName": "testReverseNestedAggWithoutNestedAgg(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "methodName": "testReverseNestedAggWithoutNestedAgg",
     "className": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
     "children": []
    },
    {
     "id": "ID#testSimpleNested1ToRootToNested2(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "displayName": "testSimpleNested1ToRootToNested2(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "methodName": "testSimpleNested1ToRootToNested2",
     "className": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
     "children": []
    },
    {
     "id": "ID#testSameParentDocHavingMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "displayName": "testSameParentDocHavingMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "methodName": "testSameParentDocHavingMultipleBuckets",
     "className": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
     "children": []
    },
    {
     "id": "ID#testSimpleReverseNestedToRoot(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "displayName": "testSimpleReverseNestedToRoot(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
     "methodName": "testSimpleReverseNestedToRoot",
     "className": "org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371956518
 }
]

[
 "TEST_STARTED",
 "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
  "startTimestamp": 1459371958241,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleReverseNestedToNested1(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleReverseNestedToNested1(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
  "startTimestamp": 1459371958288,
  "executionTime": 76
 }
]

[
 "TEST_STARTED",
 "ID#testReverseNestedAggWithoutNestedAgg(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReverseNestedAggWithoutNestedAgg(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
  "startTimestamp": 1459371958364,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleNested1ToRootToNested2(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleNested1ToRootToNested2(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
  "startTimestamp": 1459371958401,
  "executionTime": 51
 }
]

[
 "TEST_STARTED",
 "ID#testSameParentDocHavingMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSameParentDocHavingMultipleBuckets(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
  "startTimestamp": 1459371958453,
  "executionTime": 584
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleReverseNestedToRoot(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleReverseNestedToRoot(org.elasticsearch.search.aggregations.bucket.ReverseNestedIT)",
  "startTimestamp": 1459371959038,
  "executionTime": 44
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.ReverseNestedIT",
  "startTimestamp": 1459371956518,
  "executionTime": 3359
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
   "displayName": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
   "children": [
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldNearDateLineWrapLongitude(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldNearDateLineWrapLongitude(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldNearDateLineWrapLongitude",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField_getProperty(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedField_getProperty(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedField_getProperty",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldAsSubAggToHighCardTermsAgg(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldAsSubAggToHighCardTermsAgg(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldAsSubAggToHighCardTermsAgg",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testMultiValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldWithZeroLon(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldWithZeroLon(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldWithZeroLon",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldNearDateLine(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldNearDateLine(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldNearDateLine",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371960054
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968335,
  "executionTime": 50
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldNearDateLineWrapLongitude(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldNearDateLineWrapLongitude(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968386,
  "executionTime": 51
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedField_getProperty(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedField_getProperty(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968438,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldAsSubAggToHighCardTermsAgg(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldAsSubAggToHighCardTermsAgg(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968479,
  "executionTime": 74
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968553,
  "executionTime": 55
 }
]

[
 "TEST_STARTED",
 "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968608,
  "executionTime": 64
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968673,
  "executionTime": 59
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldWithZeroLon(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldWithZeroLon(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968732,
  "executionTime": 43
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968775,
  "executionTime": 45
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldNearDateLine(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldNearDateLine(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
  "startTimestamp": 1459371968820,
  "executionTime": 49
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
  "startTimestamp": 1459371960054,
  "executionTime": 14963
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
   "children": [
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testDocCountopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricTopLevelDefaultPercents",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testBadPercents",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testBadPercents_asSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testNestedWithDecimal",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testWrongPercents",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371975177
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978296,
  "executionTime": 43
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978340,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978381,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978422,
  "executionTime": 45
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978468,
  "executionTime": 76
 }
]

[
 "TEST_STARTED",
 "ID#testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978544,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978585,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978622,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978663,
  "executionTime": 69
 }
]

[
 "TEST_STARTED",
 "ID#testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978732,
  "executionTime": 70
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978802,
  "executionTime": 60
 }
]

[
 "TEST_STARTED",
 "ID#testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1459371978862,
  "executionTime": 51
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
  "startTimestamp": 1459371975177,
  "executionTime": 4833
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "children": [
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testDocCountTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371980213
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459371981753,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459371981789,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459371981800,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459371981811,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459371981822,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459371981842,
  "executionTime": 9
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459371981851,
  "executionTime": 11
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
  "startTimestamp": 1459371980213,
  "executionTime": 2956
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT",
   "children": [
    {
     "id": "ID#testBasicDiff(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)",
     "displayName": "testBasicDiff(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)",
     "methodName": "testBasicDiff",
     "className": "org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT",
     "children": []
    },
    {
     "id": "ID#testInvalidLagSize(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)",
     "displayName": "testInvalidLagSize(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)",
     "methodName": "testInvalidLagSize",
     "className": "org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371983246
 }
]

[
 "TEST_STARTED",
 "ID#testBasicDiff(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicDiff(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)",
  "startTimestamp": 1459371987213,
  "executionTime": 105
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidLagSize(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidLagSize(org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT)",
  "startTimestamp": 1459371987318,
  "executionTime": 130
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 14:06:28,609][WARN ][org.elasticsearch.test.transport] [node_s1] Transport response handler not found of id [468]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffIT",
  "startTimestamp": 1459371983246,
  "executionTime": 5401
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
   "displayName": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
   "methodName": null,
   "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
   "children": [
    {
     "id": "ID#testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testTwoReplicas",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    },
    {
     "id": "ID#testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testNoReplicas",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    },
    {
     "id": "ID#testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testIndexCausesIndexCreation",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    },
    {
     "id": "ID#testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testOneReplica",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459371988783
 }
]

[
 "TEST_STARTED",
 "ID#testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1459371988802,
  "executionTime": 16377
 }
]

[
 "TEST_STARTED",
 "ID#testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1459372005180,
  "executionTime": 12624
 }
]

[
 "TEST_STARTED",
 "ID#testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1459372017805,
  "executionTime": 11040
 }
]

[
 "TEST_STARTED",
 "ID#testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1459372028845,
  "executionTime": 16386
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
  "startTimestamp": 1459371988783,
  "executionTime": 56548
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.basic.TransportSearchFailuresIT",
   "displayName": "org.elasticsearch.search.basic.TransportSearchFailuresIT",
   "methodName": null,
   "className": "org.elasticsearch.search.basic.TransportSearchFailuresIT",
   "children": [
    {
     "id": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)",
     "displayName": "testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)",
     "methodName": "testFailedSearchWithWrongQuery",
     "className": "org.elasticsearch.search.basic.TransportSearchFailuresIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459372045441
 }
]

[
 "TEST_STARTED",
 "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)",
  "startTimestamp": 1459372045460,
  "executionTime": 823
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.basic.TransportSearchFailuresIT",
  "startTimestamp": 1459372045441,
  "executionTime": 871
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
   "displayName": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
   "methodName": null,
   "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
   "children": [
    {
     "id": "ID#testValueMissingLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testValueMissingLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testValueMissingLin",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testParseGeoPoint(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testParseGeoPoint(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testParseGeoPoint",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testNoQueryGiven(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testNoQueryGiven(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testNoQueryGiven",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testParsingExceptionIfFieldDoesNotExist(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testParsingExceptionIfFieldDoesNotExist(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testParsingExceptionIfFieldDoesNotExist",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testManyDocsLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testManyDocsLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testManyDocsLin",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testBoostModeSettingWorks(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testBoostModeSettingWorks(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testBoostModeSettingWorks",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testDistanceScoreGeoLinGaussExpWithOffset(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testDistanceScoreGeoLinGaussExpWithOffset(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testDistanceScoreGeoLinGaussExpWithOffset",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testExceptionThrownIfScaleLE0(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testExceptionThrownIfScaleLE0(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testExceptionThrownIfScaleLE0",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testParsingExceptionIfFieldTypeDoesNotMatch(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testParsingExceptionIfFieldTypeDoesNotMatch(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testParsingExceptionIfFieldTypeDoesNotMatch",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testDateWithoutOrigin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testDateWithoutOrigin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testDateWithoutOrigin",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testCombineModes(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testCombineModes(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testCombineModes",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testParseDateMath(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testParseDateMath(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testParseDateMath",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testMultiFieldOptions(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testMultiFieldOptions(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testMultiFieldOptions",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    },
    {
     "id": "ID#testDistanceScoreGeoLinGaussExp(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "displayName": "testDistanceScoreGeoLinGaussExp(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
     "methodName": "testDistanceScoreGeoLinGaussExp",
     "className": "org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459372046445
 }
]

[
 "TEST_STARTED",
 "ID#testValueMissingLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testValueMissingLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372046463,
  "executionTime": 1213
 }
]

[
 "TEST_STARTED",
 "ID#testParseGeoPoint(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseGeoPoint(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372047677,
  "executionTime": 1293
 }
]

[
 "TEST_STARTED",
 "ID#testNoQueryGiven(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoQueryGiven(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372048971,
  "executionTime": 326
 }
]

[
 "TEST_STARTED",
 "ID#testParsingExceptionIfFieldDoesNotExist(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingExceptionIfFieldDoesNotExist(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372049297,
  "executionTime": 330
 }
]

[
 "TEST_STARTED",
 "ID#testManyDocsLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testManyDocsLin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372049627,
  "executionTime": 3724
 }
]

[
 "TEST_STARTED",
 "ID#testBoostModeSettingWorks(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBoostModeSettingWorks(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372053351,
  "executionTime": 728
 }
]

[
 "TEST_STARTED",
 "ID#testDistanceScoreGeoLinGaussExpWithOffset(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDistanceScoreGeoLinGaussExpWithOffset(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372054080,
  "executionTime": 2926
 }
]

[
 "TEST_STARTED",
 "ID#testExceptionThrownIfScaleLE0(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExceptionThrownIfScaleLE0(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372057007,
  "executionTime": 1057
 }
]

[
 "TEST_STARTED",
 "ID#testParsingExceptionIfFieldTypeDoesNotMatch(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParsingExceptionIfFieldTypeDoesNotMatch(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372058064,
  "executionTime": 533
 }
]

[
 "TEST_STARTED",
 "ID#testDateWithoutOrigin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDateWithoutOrigin(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372058597,
  "executionTime": 1478
 }
]

[
 "TEST_STARTED",
 "ID#testCombineModes(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCombineModes(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372060075,
  "executionTime": 935
 }
]

[
 "TEST_STARTED",
 "ID#testParseDateMath(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParseDateMath(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372061011,
  "executionTime": 748
 }
]

[
 "TEST_STARTED",
 "ID#testMultiFieldOptions(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiFieldOptions(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372061760,
  "executionTime": 788
 }
]

[
 "TEST_STARTED",
 "ID#testDistanceScoreGeoLinGaussExp(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDistanceScoreGeoLinGaussExp(org.elasticsearch.search.functionscore.DecayFunctionScoreIT)",
  "startTimestamp": 1459372062548,
  "executionTime": 1153
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.functionscore.DecayFunctionScoreIT",
  "startTimestamp": 1459372046445,
  "executionTime": 17292
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.geo.GeoFilterIT",
   "displayName": "org.elasticsearch.search.geo.GeoFilterIT",
   "methodName": null,
   "className": "org.elasticsearch.search.geo.GeoFilterIT",
   "children": [
    {
     "id": "ID#testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testGeohashCellFilter",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testNeighbors",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testShapeBuilders",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testShapeRelations",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testBulk(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testBulk(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testBulk",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459372063822
 }
]

[
 "TEST_STARTED",
 "ID#testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1459372063851,
  "executionTime": 884
 }
]

[
 "TEST_STARTED",
 "ID#testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1459372064735,
  "executionTime": 44
 }
]

[
 "TEST_STARTED",
 "ID#testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1459372064779,
  "executionTime": 1187
 }
]

[
 "TEST_STARTED",
 "ID#testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1459372065966,
  "executionTime": 3088
 }
]

[
 "TEST_STARTED",
 "ID#testBulk(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBulk(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1459372069054,
  "executionTime": 5514
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.geo.GeoFilterIT",
  "startTimestamp": 1459372063822,
  "executionTime": 10759
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.innerhits.InnerHitsIT",
   "displayName": "org.elasticsearch.search.innerhits.InnerHitsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
   "children": [
    {
     "id": "ID#testInnerHitsOnHasParent(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testInnerHitsOnHasParent(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testInnerHitsOnHasParent",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleNested(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testSimpleNested(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testSimpleNested",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testParentChildMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testParentChildMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testParentChildMultipleLayers",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedInnerHitsWithStoredFieldsAndNoSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testNestedInnerHitsWithStoredFieldsAndNoSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testNestedInnerHitsWithStoredFieldsAndNoSourceBackcompat",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedInnerHitsHiglightWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testNestedInnerHitsHiglightWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testNestedInnerHitsHiglightWithExcludeSourceBackcompat",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testRandomNested(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testRandomNested(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testRandomNested",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedInnerHitsWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testNestedInnerHitsWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testNestedInnerHitsWithExcludeSourceBackcompat",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testSimpleParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testSimpleParentChild",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testInnerHitsWithObjectFieldThatHasANestedField(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testInnerHitsWithObjectFieldThatHasANestedField(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testInnerHitsWithObjectFieldThatHasANestedField",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testPathOrTypeMustBeDefined(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testPathOrTypeMustBeDefined(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testPathOrTypeMustBeDefined",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testRandomParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testRandomParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testRandomParentChild",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testDontExplode(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testDontExplode(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testDontExplode",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedInnerHitsWithHighlightOnStoredFieldBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testNestedInnerHitsWithHighlightOnStoredFieldBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testNestedInnerHitsWithHighlightOnStoredFieldBackcompat",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testMatchesQueriesParentChildInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testMatchesQueriesParentChildInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testMatchesQueriesParentChildInnerHits",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testNestedMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testNestedMultipleLayers",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testRoyals(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testRoyals(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testRoyals",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testMatchesQueriesNestedInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testMatchesQueriesNestedInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testMatchesQueriesNestedInnerHits",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedDefinedAsObject(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "displayName": "testNestedDefinedAsObject(org.elasticsearch.search.innerhits.InnerHitsIT)",
     "methodName": "testNestedDefinedAsObject",
     "className": "org.elasticsearch.search.innerhits.InnerHitsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459372074661
 }
]

[
 "TEST_STARTED",
 "ID#testInnerHitsOnHasParent(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInnerHitsOnHasParent(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372074685,
  "executionTime": 1951
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleNested(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleNested(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372076636,
  "executionTime": 743
 }
]

[
 "TEST_STARTED",
 "ID#testParentChildMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParentChildMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372077380,
  "executionTime": 1960
 }
]

[
 "TEST_STARTED",
 "ID#testNestedInnerHitsWithStoredFieldsAndNoSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedInnerHitsWithStoredFieldsAndNoSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372079341,
  "executionTime": 1924
 }
]

[
 "TEST_STARTED",
 "ID#testNestedInnerHitsHiglightWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedInnerHitsHiglightWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372081266,
  "executionTime": 1046
 }
]

[
 "TEST_STARTED",
 "ID#testRandomNested(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomNested(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372082312,
  "executionTime": 1350
 }
]

[
 "TEST_STARTED",
 "ID#testNestedInnerHitsWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedInnerHitsWithExcludeSourceBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372083663,
  "executionTime": 1161
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372084824,
  "executionTime": 1570
 }
]

[
 "TEST_STARTED",
 "ID#testInnerHitsWithObjectFieldThatHasANestedField(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInnerHitsWithObjectFieldThatHasANestedField(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372086395,
  "executionTime": 1055
 }
]

[
 "TEST_STARTED",
 "ID#testPathOrTypeMustBeDefined(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testPathOrTypeMustBeDefined(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372087450,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testPathOrTypeMustBeDefined(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "message": "'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=need validation of type or path defined in InnerHitsBuilder))",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=need validation of type or path defined in InnerHitsBuilder))\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$400(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:763)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=need validation of type or path defined in InnerHitsBuilder))",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPathOrTypeMustBeDefined(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372087450,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testRandomParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomParentChild(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372087451,
  "executionTime": 2051
 }
]

[
 "TEST_STARTED",
 "ID#testDontExplode(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDontExplode(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372089503,
  "executionTime": 1932
 }
]

[
 "TEST_STARTED",
 "ID#testNestedInnerHitsWithHighlightOnStoredFieldBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedInnerHitsWithHighlightOnStoredFieldBackcompat(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372091435,
  "executionTime": 1917
 }
]

[
 "TEST_STARTED",
 "ID#testMatchesQueriesParentChildInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchesQueriesParentChildInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372093352,
  "executionTime": 2208
 }
]

[
 "TEST_STARTED",
 "ID#testNestedMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedMultipleLayers(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372095560,
  "executionTime": 2385
 }
]

[
 "TEST_STARTED",
 "ID#testRoyals(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRoyals(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372097945,
  "executionTime": 1556
 }
]

[
 "TEST_STARTED",
 "ID#testMatchesQueriesNestedInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchesQueriesNestedInnerHits(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372099501,
  "executionTime": 1642
 }
]

[
 "TEST_STARTED",
 "ID#testNestedDefinedAsObject(org.elasticsearch.search.innerhits.InnerHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedDefinedAsObject(org.elasticsearch.search.innerhits.InnerHitsIT)",
  "startTimestamp": 1459372101143,
  "executionTime": 1567
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.innerhits.InnerHitsIT",
  "startTimestamp": 1459372074661,
  "executionTime": 28149
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.preference.SearchPreferenceIT",
   "displayName": "org.elasticsearch.search.preference.SearchPreferenceIT",
   "methodName": null,
   "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
   "children": [
    {
     "id": "ID#testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testReplicaPreference",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testSimplePreference",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testStopOneNodePreferenceWithRedState",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testThatSpecifyingNonExistingNodesReturnsUsefulError",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testNoPreferenceRandom",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459372102869
 }
]

[
 "TEST_STARTED",
 "ID#testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459372102893,
  "executionTime": 1673
 }
]

[
 "TEST_STARTED",
 "ID#testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459372104566,
  "executionTime": 1245
 }
]

[
 "TEST_STARTED",
 "ID#testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459372105811,
  "executionTime": 462
 }
]

[
 "TEST_STARTED",
 "ID#testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459372106274,
  "executionTime": 1109
 }
]

[
 "TEST_STARTED",
 "ID#testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459372107383,
  "executionTime": 1432
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.preference.SearchPreferenceIT",
  "startTimestamp": 1459372102869,
  "executionTime": 5972
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
   "displayName": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
   "children": [
    {
     "id": "ID#testThatFuzzySuggesterSupportsTranspositions(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatFuzzySuggesterSupportsTranspositions(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatFuzzySuggesterSupportsTranspositions",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatWeightsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatWeightsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatWeightsAreWorking",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatIndexingInvalidFieldsInCompletionFieldResultsInException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatIndexingInvalidFieldsInCompletionFieldResultsInException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatIndexingInvalidFieldsInCompletionFieldResultsInException",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatFuzzySuggesterSupportsMinPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatFuzzySuggesterSupportsMinPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatFuzzySuggesterSupportsMinPrefixLength",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatStatsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatStatsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatStatsAreWorking",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatWeightCanBeAString(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatWeightCanBeAString(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatWeightCanBeAString",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testFuzzy(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testFuzzy(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testFuzzy",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testSuggestWithNumericPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testSuggestWithNumericPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testSuggestWithNumericPayload",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testPrefix(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testPrefix(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testPrefix",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testIndexingUnrelatedNullValue(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testIndexingUnrelatedNullValue(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testIndexingUnrelatedNullValue",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testPrunedSegments(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testPrunedSegments(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testPrunedSegments",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testDisabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testDisabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testDisabledPreserveSeparators",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatDisablingPositionIncrementsWorkForStopwords(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatDisablingPositionIncrementsWorkForStopwords(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatDisablingPositionIncrementsWorkForStopwords",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatSortingOnCompletionFieldReturnsUsefulException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatSortingOnCompletionFieldReturnsUsefulException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatSortingOnCompletionFieldReturnsUsefulException",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatSynonymsWork(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatSynonymsWork(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatSynonymsWork",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testEnabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testEnabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testEnabledPreserveSeparators",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testVeryLongInput(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testVeryLongInput(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testVeryLongInput",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testSuggestWithPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testSuggestWithPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testSuggestWithPayload",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testEarlyTermination(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testEarlyTermination(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testEarlyTermination",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatFuzzySuggesterSupportsNonPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatFuzzySuggesterSupportsNonPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatFuzzySuggesterSupportsNonPrefixLength",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testIssue5930(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testIssue5930(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testIssue5930",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatInputCanBeAStringInsteadOfAnArray(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatInputCanBeAStringInsteadOfAnArray(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatInputCanBeAStringInsteadOfAnArray",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testReservedChars(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testReservedChars(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testReservedChars",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatMultipleInputsAreSupported(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatMultipleInputsAreSupported(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatMultipleInputsAreSupported",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testSuggestFieldWithPercolateApi(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testSuggestFieldWithPercolateApi(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testSuggestFieldWithPercolateApi",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatUpgradeToMultiFieldTypeWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatUpgradeToMultiFieldTypeWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatUpgradeToMultiFieldTypeWorks",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testMissingPayloadField(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testMissingPayloadField(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testMissingPayloadField",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatShortSyntaxIsWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatShortSyntaxIsWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatShortSyntaxIsWorking",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatWeightMustBeAnInteger(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatWeightMustBeAnInteger(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatWeightMustBeAnInteger",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatSuggestStopFilterWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatSuggestStopFilterWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatSuggestStopFilterWorks",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testRegex(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testRegex(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testRegex",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testMalformedRequestPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testMalformedRequestPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testMalformedRequestPayload",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatFuzzySuggesterSupportsEditDistances(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatFuzzySuggesterSupportsEditDistances(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatFuzzySuggesterSupportsEditDistances",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatWeightAsStringMustBeInt(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatWeightAsStringMustBeInt(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatWeightAsStringMustBeInt",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatUpgradeToMultiFieldsWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatUpgradeToMultiFieldsWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatUpgradeToMultiFieldsWorks",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatWeightMustNotBeANonNumberString(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatWeightMustNotBeANonNumberString(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatWeightMustNotBeANonNumberString",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatFuzzySuggesterWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatFuzzySuggesterWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatFuzzySuggesterWorks",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testPayload",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    },
    {
     "id": "ID#testThatFuzzySuggesterIsUnicodeAware(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "displayName": "testThatFuzzySuggesterIsUnicodeAware(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
     "methodName": "testThatFuzzySuggesterIsUnicodeAware",
     "className": "org.elasticsearch.search.suggest.CompletionSuggestSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459372108927
 }
]

[
 "TEST_STARTED",
 "ID#testThatFuzzySuggesterSupportsTranspositions(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatFuzzySuggesterSupportsTranspositions(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372108956,
  "executionTime": 1038
 }
]

[
 "TEST_STARTED",
 "ID#testThatWeightsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatWeightsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372109994,
  "executionTime": 1211
 }
]

[
 "TEST_STARTED",
 "ID#testThatIndexingInvalidFieldsInCompletionFieldResultsInException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatIndexingInvalidFieldsInCompletionFieldResultsInException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372111206,
  "executionTime": 324
 }
]

[
 "TEST_STARTED",
 "ID#testThatFuzzySuggesterSupportsMinPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatFuzzySuggesterSupportsMinPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372111531,
  "executionTime": 481
 }
]

[
 "TEST_STARTED",
 "ID#testThatStatsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatStatsAreWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372112013,
  "executionTime": 374
 }
]

[
 "TEST_STARTED",
 "ID#testThatWeightCanBeAString(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatWeightCanBeAString(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372112388,
  "executionTime": 261
 }
]

[
 "TEST_STARTED",
 "ID#testFuzzy(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFuzzy(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372112649,
  "executionTime": 2008
 }
]

[
 "TEST_STARTED",
 "ID#testSuggestWithNumericPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSuggestWithNumericPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372114658,
  "executionTime": 965
 }
]

[
 "TEST_STARTED",
 "ID#testPrefix(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrefix(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372115623,
  "executionTime": 2867
 }
]

[
 "TEST_STARTED",
 "ID#testIndexingUnrelatedNullValue(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexingUnrelatedNullValue(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372118490,
  "executionTime": 529
 }
]

[
 "TEST_STARTED",
 "ID#testPrunedSegments(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrunedSegments(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372119019,
  "executionTime": 1925
 }
]

[
 "TEST_STARTED",
 "ID#testDisabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372120944,
  "executionTime": 1294
 }
]

[
 "TEST_STARTED",
 "ID#testThatDisablingPositionIncrementsWorkForStopwords(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatDisablingPositionIncrementsWorkForStopwords(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372122238,
  "executionTime": 564
 }
]

[
 "TEST_STARTED",
 "ID#testThatSortingOnCompletionFieldReturnsUsefulException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSortingOnCompletionFieldReturnsUsefulException(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372122802,
  "executionTime": 751
 }
]

[
 "TEST_STARTED",
 "ID#testThatSynonymsWork(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSynonymsWork(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372123553,
  "executionTime": 931
 }
]

[
 "TEST_STARTED",
 "ID#testEnabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnabledPreserveSeparators(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372124484,
  "executionTime": 521
 }
]

[
 "TEST_STARTED",
 "ID#testVeryLongInput(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVeryLongInput(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372125005,
  "executionTime": 457
 }
]

[
 "TEST_STARTED",
 "ID#testSuggestWithPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSuggestWithPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372125462,
  "executionTime": 466
 }
]

[
 "TEST_STARTED",
 "ID#testEarlyTermination(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEarlyTermination(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372125929,
  "executionTime": 1249
 }
]

[
 "TEST_STARTED",
 "ID#testThatFuzzySuggesterSupportsNonPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatFuzzySuggesterSupportsNonPrefixLength(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372127179,
  "executionTime": 531
 }
]

[
 "TEST_STARTED",
 "ID#testIssue5930(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIssue5930(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372127710,
  "executionTime": 613
 }
]

[
 "TEST_STARTED",
 "ID#testThatInputCanBeAStringInsteadOfAnArray(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatInputCanBeAStringInsteadOfAnArray(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372128323,
  "executionTime": 270
 }
]

[
 "TEST_STARTED",
 "ID#testReservedChars(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReservedChars(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372128593,
  "executionTime": 117
 }
]

[
 "TEST_STARTED",
 "ID#testThatMultipleInputsAreSupported(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatMultipleInputsAreSupported(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372128710,
  "executionTime": 545
 }
]

[
 "TEST_STARTED",
 "ID#testSuggestFieldWithPercolateApi(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSuggestFieldWithPercolateApi(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372129255,
  "executionTime": 1163
 }
]

[
 "TEST_STARTED",
 "ID#testThatUpgradeToMultiFieldTypeWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatUpgradeToMultiFieldTypeWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372130418,
  "executionTime": 468
 }
]

[
 "TEST_STARTED",
 "ID#testMissingPayloadField(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingPayloadField(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372130886,
  "executionTime": 536
 }
]

[
 "TEST_STARTED",
 "ID#testThatShortSyntaxIsWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatShortSyntaxIsWorking(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372131423,
  "executionTime": 284
 }
]

[
 "TEST_STARTED",
 "ID#testThatWeightMustBeAnInteger(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatWeightMustBeAnInteger(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372131707,
  "executionTime": 275
 }
]

[
 "TEST_STARTED",
 "ID#testThatSuggestStopFilterWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSuggestStopFilterWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372131982,
  "executionTime": 811
 }
]

[
 "TEST_STARTED",
 "ID#testRegex(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegex(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372132794,
  "executionTime": 517
 }
]

[
 "TEST_STARTED",
 "ID#testMalformedRequestPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMalformedRequestPayload(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372133311,
  "executionTime": 270
 }
]

[
 "TEST_STARTED",
 "ID#testThatFuzzySuggesterSupportsEditDistances(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatFuzzySuggesterSupportsEditDistances(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372133582,
  "executionTime": 763
 }
]

[
 "TEST_STARTED",
 "ID#testThatWeightAsStringMustBeInt(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatWeightAsStringMustBeInt(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)",
  "startTimestamp": 1459372134345,
  "executionTime": 338
 }
]

[
 "TEST_STARTED",
 "ID#testThatUpgradeToMultiFieldsWorks(org.elasticsearch.search.suggest.CompletionSuggestSearchIT)"
]

