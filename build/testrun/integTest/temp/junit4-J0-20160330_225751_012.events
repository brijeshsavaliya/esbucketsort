[
 "BOOTSTRAP",
 {
  "defaultCharset": "UTF-8",
  "pidString": "3331@BrijeshS-2.fios-router.home",
  "systemProperties": {
   "awt.toolkit": "sun.lwawt.macosx.LWCToolkit",
   "es.logger.level": "WARN",
   "file.encoding": "UTF-8",
   "file.encoding.pkg": "sun.io",
   "file.separator": "/",
   "ftp.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "gopherProxySet": "false",
   "http.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "java.awt.graphicsenv": "sun.awt.CGraphicsEnvironment",
   "java.awt.headless": "true",
   "java.awt.printerjob": "sun.lwawt.macosx.CPrinterJob",
   "java.class.path": "/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/classes/test:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/resources/test:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/classes/main:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/resources/main:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-core/5.4.0-snapshot-1715952/84685d37a34b4d87e2928566ed266a7f005ca67d/lucene-core-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-analyzers-common/5.4.0-snapshot-1715952/feaf885ed4155fb7202c1f90ac2eb40503961efc/lucene-analyzers-common-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-backward-codecs/5.4.0-snapshot-1715952/5b5b5c950b4fcac38cf48fab911f75da61e780fa/lucene-backward-codecs-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-grouping/5.4.0-snapshot-1715952/ff92011208ed5c28f041acc37bd77728a89fc6a5/lucene-grouping-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-highlighter/5.4.0-snapshot-1715952/5d46f26a6cb36aede89b8728b6fcbc427d4f9416/lucene-highlighter-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-join/5.4.0-snapshot-1715952/726ea07bbfdfbfbee80522353496fc6667dc33c9/lucene-join-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-memory/5.4.0-snapshot-1715952/d8d7a7b573a4cfc54745a126e905ccfd523b7a24/lucene-memory-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-misc/5.4.0-snapshot-1715952/cd9d4fb4492bd2680cea2f038a051311329f6443/lucene-misc-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-queries/5.4.0-snapshot-1715952/a1a04d191443e51f992ed3dd02d0e14fd48493c9/lucene-queries-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-queryparser/5.4.0-snapshot-1715952/c4d34b29b8b14ad3deb300a6d699e9d8965a3c2c/lucene-queryparser-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-sandbox/5.4.0-snapshot-1715952/bf45dbd653d66ce9d2c3f19b69997b8098d8b416/lucene-sandbox-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-spatial/5.4.0-snapshot-1715952/2bddfda70f5c657064d12860b03c2cd8a5029bfc/lucene-spatial-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-spatial3d/5.4.0-snapshot-1715952/881b8cd571fb3ccdcc69f1316468d816812513fb/lucene-spatial3d-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-suggest/5.4.0-snapshot-1715952/466e2bc02f45f04cbf516e5df78b9c2ebd99e944/lucene-suggest-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.elasticsearch/securesm/1.0/c0c6cf986ba0057390bfcc80c366a0e3157f944b/securesm-1.0.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/commons-cli/commons-cli/1.3.1/1303efbc4b181e5a58bf2e967dc156a3132b97c0/commons-cli-1.3.1.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.carrotsearch/hppc/0.7.1/8b5057f74ea378c0150a1860874a3ebdcb713767/hppc-0.7.1.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/joda-time/joda-time/2.8.2/d27c24204c5e507b16fec01006b3d0f1ec42aed4/joda-time-2.8.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.joda/joda-convert/1.2/35ec554f0cd00c956cc69051514d9488b1374dec/joda-convert-1.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.6.2/123f29333b2c6b3516b14252b6e93226bfcd6e37/jackson-core-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-smile/2.6.2/395d18c1a1dd730b8026ee59c4067e5d2b45ba6e/jackson-dataformat-smile-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.6.2/4ae23088dd3fae47c66843f2e4251d7255ee140e/jackson-dataformat-yaml-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-cbor/2.6.2/1e13c575f914c83761bb8e2aca7dfd9e4c647579/jackson-dataformat-cbor-2.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/io.netty/netty/3.10.5.Final/9ca7d55d246092bddd29b867706e2f6c7db701a0/netty-3.10.5.Final.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.tdunning/t-digest/3.0/84ccf145ac2215e6bfa63baa3101c0af41017cfc/t-digest-3.0.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.hdrhistogram/HdrHistogram/2.1.6/7495feb7f71ee124bd2a7e7d83590e296d71d80e/HdrHistogram-2.1.6.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.spatial4j/spatial4j/0.5/6e16edaf6b1ba76db7f08c2f3723fce3b358ecc3/spatial4j-0.5.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.vividsolutions/jts/1.13/3ccfb9b60f04d71add996a666ceb8902904fd805/jts-1.13.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/log4j/apache-log4j-extras/1.2.17/85863614d82185d7e51fe21c00aa9117a523a8b6/apache-log4j-extras-1.2.17.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.6.2/8619e95939167fb37245b5670135e4feb0ec7d50/slf4j-api-1.6.2.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/net.java.dev.jna/jna/4.1.0/1c12d070e602efd8021891cdd7fd18bc129372d4/jna-4.1.0.jar:/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/test-framework/build/libs/test-framework-3.0.0-SNAPSHOT.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.carrotsearch.randomizedtesting/randomizedtesting-runner/2.2.0/60de504132241be049564a3a34fd7dcc296e2ef0/randomizedtesting-runner-2.2.0.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-all/1.3/63a21ebc981131004ad02e0434e799fd7f3a8d5a/hamcrest-all-1.3.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-test-framework/5.4.0-snapshot-1715952/ae3156d5a2526b1b48ca821765cf7cd53faecef5/lucene-test-framework-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-codecs/5.4.0-snapshot-1715952/7b94152f1c9fd7ecb384fc9602318f74a4463a65/lucene-codecs-5.4.0-snapshot-1715952.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.3.6/4c47155e3e6c9a41a28db36680b828ced53b8af4/httpclient-4.3.6.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.3.3/f91b7a4aadc5cf486df6e4634748d7dd7a73f06d/httpcore-4.3.3.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.10/4b95f4897fa13f2cd904aee711aeafc0c5295cd8/commons-codec-1.10.jar:/Users/brijeshs/.gradle/caches/modules-2/files-2.1/com.carrotsearch.randomizedtesting/junit4-ant/2.2.0/d401c9c729deccd5db8a5df3102eb18793c2224/junit4-ant-2.2.0.jar",
   "java.class.version": "52.0",
   "java.endorsed.dirs": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/endorsed",
   "java.ext.dirs": "/Users/brijeshs/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java",
   "java.home": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre",
   "java.io.tmpdir": "./temp",
   "java.library.path": "/Applications/NetBeans/NetBeans 8.1.app/Contents/Resources/NetBeans/webcommon/bin::/Users/brijeshs/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.",
   "java.runtime.name": "Java(TM) SE Runtime Environment",
   "java.runtime.version": "1.8.0_40-b25",
   "java.specification.name": "Java Platform API Specification",
   "java.specification.vendor": "Oracle Corporation",
   "java.specification.version": "1.8",
   "java.vendor": "Oracle Corporation",
   "java.vendor.url": "http://java.oracle.com/",
   "java.vendor.url.bug": "http://bugreport.sun.com/bugreport/",
   "java.version": "1.8.0_40",
   "java.vm.info": "mixed mode",
   "java.vm.name": "Java HotSpot(TM) 64-Bit Server VM",
   "java.vm.specification.name": "Java Virtual Machine Specification",
   "java.vm.specification.vendor": "Oracle Corporation",
   "java.vm.specification.version": "1.8",
   "java.vm.vendor": "Oracle Corporation",
   "java.vm.version": "25.40-b25",
   "junit4.childvm.count": "4",
   "junit4.childvm.cwd": "/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0",
   "junit4.childvm.id": "0",
   "junit4.memory.total": "514850816",
   "junit4.pidString": "3331@BrijeshS-2.fios-router.home",
   "junit4.processors": "8",
   "line.separator": "\n",
   "os.arch": "x86_64",
   "os.name": "Mac OS X",
   "os.version": "10.10.5",
   "path.separator": ":",
   "socksNonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "sun.arch.data.model": "64",
   "sun.boot.class.path": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/classes",
   "sun.boot.library.path": "/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib",
   "sun.cpu.endian": "little",
   "sun.cpu.isalist": "",
   "sun.io.unicode.encoding": "UnicodeBig",
   "sun.java.command": "com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe -eventsfile /Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/temp/junit4-J0-20160330_225751_012.events @/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/temp/junit4-J0-20160330_225751_012.suites -stdin",
   "sun.java.launcher": "SUN_STANDARD",
   "sun.jnu.encoding": "UTF-8",
   "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers",
   "sun.os.patch.level": "unknown",
   "tests.artifact": "core",
   "tests.ifNoTests": "fail",
   "tests.maven": "true",
   "tests.prefix": "tests",
   "tests.security.manager": "true",
   "tests.seed": "9744F55C17012246",
   "tests.task": ":core:integTest",
   "user.country": "US",
   "user.dir": "/Users/brijeshs/Documents/elasticsearch_sort_netbeans/elasticsearch/core/build/testrun/integTest/J0",
   "user.home": "/Users/brijeshs",
   "user.language": "en",
   "user.name": "brijeshs",
   "user.timezone": "America/Los_Angeles"
  }
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.ClusterInfoServiceIT",
   "displayName": "org.elasticsearch.cluster.ClusterInfoServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
   "children": [
    {
     "id": "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "displayName": "testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "methodName": "testClusterInfoServiceInformationClearOnError",
     "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
     "children": []
    },
    {
     "id": "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "displayName": "testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "methodName": "testClusterInfoServiceCollectsInformation",
     "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403871988
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:57:52,597][WARN ][org.elasticsearch.bootstrap] Unable to lock JVM Memory: error=78,reason=Function not implemented%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:57:52,599][WARN ][org.elasticsearch.bootstrap] This can result in part of the JVM being swapped out.%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:20,119][WARN ][org.elasticsearch.cluster] [node_t0] Failed to execute NodeStatsAction for ClusterInfoUpdateJob%0AElasticsearchException[force exception on [cluster:monitor/nodes/stats]]%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT$BlockingActionFilter.apply(ClusterInfoServiceIT.java:105)%0A%09at org.elasticsearch.action.support.ActionFilter$Simple.apply(ActionFilter.java:63)%0A%09at org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:99)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:77)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.updateNodeStats(InternalClusterInfoService.java:271)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.refresh(InternalClusterInfoService.java:307)%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT.testClusterInfoServiceInformationClearOnError(ClusterInfoServiceIT.java:250)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:20,135][WARN ][org.elasticsearch.cluster] [node_t0] Failed to execute IndicesStatsAction for ClusterInfoUpdateJob%0AElasticsearchException[force exception on [indices:monitor/stats]]%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT$BlockingActionFilter.apply(ClusterInfoServiceIT.java:105)%0A%09at org.elasticsearch.action.support.ActionFilter$Simple.apply(ActionFilter.java:63)%0A%09at org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:99)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:77)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.updateIndicesStats(InternalClusterInfoService.java:285)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.refresh(InternalClusterInfoService.java:336)%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT.testClusterInfoServiceInformationClearOnError(ClusterInfoServiceIT.java:250)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
  "startTimestamp": 1459403877305,
  "executionTime": 23596
 }
]

[
 "TEST_STARTED",
 "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
  "startTimestamp": 1459403900902,
  "executionTime": 1333
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.ClusterInfoServiceIT",
  "startTimestamp": 1459403871988,
  "executionTime": 30349
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "children": [
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testDocCountTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403902388
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459403908207,
  "executionTime": 1268
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459403909475,
  "executionTime": 63
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459403909538,
  "executionTime": 93
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459403909632,
  "executionTime": 61
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459403909693,
  "executionTime": 57
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459403909751,
  "executionTime": 84
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1459403909835,
  "executionTime": 283
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
  "startTimestamp": 1459403902388,
  "executionTime": 9392
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
   "displayName": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
   "methodName": null,
   "className": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
   "children": [
    {
     "id": "ID#testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "displayName": "testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "methodName": "testNormalClusterForming",
     "className": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "displayName": "testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
     "methodName": "testMinimumMasterNodes",
     "className": "org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403911831
 }
]

[
 "TEST_STARTED",
 "ID#testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:40,262][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = shut_down), current nodes: {{node_t1}{bVQhG_-TQ3uiNi3xuYu6AA}{127.0.0.1}{127.0.0.1:30101}[mode=>network],{node_t2}{-L8glJcGSfeN4pgHkFhScw}{127.0.0.1}{127.0.0.1:30102}[mode=>network],{node_t3}{03ry3JdjS3CKWgZpCa_jgQ}{127.0.0.1}{127.0.0.1:30103}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:40,264][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = shut_down), current nodes: {{node_t1}{bVQhG_-TQ3uiNi3xuYu6AA}{127.0.0.1}{127.0.0.1:30101}[mode=>network],{node_t2}{-L8glJcGSfeN4pgHkFhScw}{127.0.0.1}{127.0.0.1:30102}[mode=>network],{node_t3}{03ry3JdjS3CKWgZpCa_jgQ}{127.0.0.1}{127.0.0.1:30103}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:40,265][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{bVQhG_-TQ3uiNi3xuYu6AA}{127.0.0.1}{127.0.0.1:30101}[mode=>network],{node_t2}{-L8glJcGSfeN4pgHkFhScw}{127.0.0.1}{127.0.0.1:30102}[mode=>network],{node_t3}{03ry3JdjS3CKWgZpCa_jgQ}{127.0.0.1}{127.0.0.1:30103}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNormalClusterForming(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
  "startTimestamp": 1459403911869,
  "executionTime": 8448
 }
]

[
 "TEST_STARTED",
 "ID#testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:43,815][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = shut_down), current nodes: {{node_t1}{yQobR_kaQIW-L971lOfeFA}{127.0.0.1}{127.0.0.1:30105}[mode=>network],{node_t2}{FH100_E5QEW5HASwgIO-qA}{127.0.0.1}{127.0.0.1:30106}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:43,815][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{yQobR_kaQIW-L971lOfeFA}{127.0.0.1}{127.0.0.1:30105}[mode=>network],{node_t2}{FH100_E5QEW5HASwgIO-qA}{127.0.0.1}{127.0.0.1:30106}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:43,821][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t2] failed to send ping to [{node_t0}{4t4GpQNwT4ynB8nmrn243A}{127.0.0.1}{127.0.0.1:30104}[mode=>network]]%0ASendRequestTransportException[[node_t0][127.0.0.1:30104][internal:discovery/zen/unicast]]; nested: NodeNotConnectedException[[node_t0][127.0.0.1:30104] Node not connected];%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:323)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPingRequestToNode(UnicastZenPing.java:440)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.sendPings(UnicastZenPing.java:426)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.ping(UnicastZenPing.java:240)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.ping(ZenPingService.java:106)%0A%09at org.elasticsearch.discovery.zen.ping.ZenPingService.pingAndWait(ZenPingService.java:84)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.findMaster(ZenDiscovery.java:857)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.innerJoinCluster(ZenDiscovery.java:368)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery.access$5000(ZenDiscovery.java:75)%0A%09at org.elasticsearch.discovery.zen.ZenDiscovery$JoinThreadControl$1.run(ZenDiscovery.java:1210)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: NodeNotConnectedException[[node_t0][127.0.0.1:30104] Node not connected]%0A%09at org.elasticsearch.transport.netty.NettyTransport.nodeChannel(NettyTransport.java:1128)%0A%09at org.elasticsearch.transport.netty.NettyTransport.sendRequest(NettyTransport.java:815)%0A%09at org.elasticsearch.test.transport.MockTransportService$LookupTestTransport.sendRequest(MockTransportService.java:422)%0A%09at org.elasticsearch.transport.TransportService.sendRequest(TransportService.java:312)%0A%09... 12 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMinimumMasterNodes(org.elasticsearch.discovery.ZenUnicastDiscoveryIT)",
  "startTimestamp": 1459403920318,
  "executionTime": 3527
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.ZenUnicastDiscoveryIT",
  "startTimestamp": 1459403911831,
  "executionTime": 12039
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
   "children": [
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testDocCountTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403923884
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459403925740,
  "executionTime": 45
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459403925785,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459403925813,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459403925840,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459403925865,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459403925895,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.SumBucketIT)",
  "startTimestamp": 1459403925918,
  "executionTime": 24
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.SumBucketIT",
  "startTimestamp": 1459403923884,
  "executionTime": 2549
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
   "displayName": "org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
   "children": [
    {
     "id": "ID#testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)",
     "displayName": "testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)",
     "methodName": "testRefreshWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403926444
 }
]

[
 "TEST_STARTED",
 "ID#testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRefreshWithBlocks(org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT)",
  "startTimestamp": 1459403926469,
  "executionTime": 1050
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.refresh.RefreshBlocksIT",
  "startTimestamp": 1459403926444,
  "executionTime": 1085
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
   "displayName": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
   "methodName": null,
   "className": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
   "children": [
    {
     "id": "ID#testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "displayName": "testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "methodName": "testRestoreUnsupportedSnapshots",
     "className": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
     "children": []
    },
    {
     "id": "ID#testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "displayName": "testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
     "methodName": "testRestoreOldSnapshots",
     "className": "org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403927545
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,500][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,500][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,504][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.5.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.5.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.5.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,613][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,613][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,614][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.5.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.5.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.5.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,681][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,682][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,682][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,799][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,799][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,799][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,863][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,863][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,864][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,933][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,933][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:48,935][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.8] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.8] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.8] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,007][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,007][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,007][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.1.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.1.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.1.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,084][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,084][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0.rc2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0.rc2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0.rc2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,165][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,165][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,166][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,256][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,256][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,257][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,343][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,344][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,344][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,418][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,418][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,419][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.6.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.6.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.6.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,506][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,506][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,600][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,600][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,601][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.9] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.9] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.9] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,702][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-0.20.6-and-1.1.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-0.20.6-and-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-0.20.6-and-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,766][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,766][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,852][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,852][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,919][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,919][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:49,920][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,004][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,004][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,004][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.5] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,096][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,096][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0.beta2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0.beta2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0.beta2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,164][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,164][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,164][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.6] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.6] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.6] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,245][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,245][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,246][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.4] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,339][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,339][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,339][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.5.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.5.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.5.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,410][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,410][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,411][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,496][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,496][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,497][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.5] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.5] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,598][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,598][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,599][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,703][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,703][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.0.rc1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.0.rc1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.0.rc1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,787][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,787][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,789][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.7.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.7.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.7.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,864][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,864][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:50,865][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,005][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,006][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,007][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,073][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,073][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,074][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,184][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,184][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,187][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.4] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,268][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,268][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,268][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.0.beta1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.0.beta1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.0.beta1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,339][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,340][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,340][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,411][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,411][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,412][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.1.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.1.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.1.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,509][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,509][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,512][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.3.7] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.3.7] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.3.7] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,594][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,594][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,596][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.6.1] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.6.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.6.1] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,710][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,711][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.0.3] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.0.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.0.3] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,781][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,781][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,781][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.4] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.4] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,872][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,872][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,873][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.6.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.6.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.6.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,965][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,965][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:51,966][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.1.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.1.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:52,026][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:52,027][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:52,027][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.2.2] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.2.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.2.2] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:52,096][WARN ][org.elasticsearch.snapshots] [node_t0] time cluster setting [discovery.zen.publish_timeout] with value [30000] is missing units; assuming default units (ms) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:52,096][WARN ][org.elasticsearch.snapshots] [node_t0] byte-sized cluster setting [indices.recovery.file_chunk_size] with value [524288] is missing units; assuming default units (b) but in future versions this will be a hard error%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:58:52,097][WARN ][org.elasticsearch.snapshots] [node_t0] [test_repo:test_1] failed to restore snapshot%0ASnapshotRestoreException[[test_repo:test_1] cannot restore index [index-1.4.0] because it cannot be upgraded]; nested: IllegalStateException[The index [index-1.4.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.];%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:209)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:401)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.lang.IllegalStateException: The index [index-1.4.0] was created before v2.0.0.beta1 and wasn't upgraded. This index should be open using a version before 3.0.0-SNAPSHOT and upgraded using the upgrade API.%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.checkSupportedVersion(MetaDataIndexUpgradeService.java:96)%0A%09at org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService.upgradeIndexMetaData(MetaDataIndexUpgradeService.java:72)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:207)%0A%09... 8 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreUnsupportedSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
  "startTimestamp": 1459403927570,
  "executionTime": 4686
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:02,886][WARN ][org.elasticsearch.bwcompat] Old repositories tests contain extra repo: 2.0.0-beta1%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreOldSnapshots(org.elasticsearch.bwcompat.RestoreBackwardsCompatIT)",
  "startTimestamp": 1459403932256,
  "executionTime": 10715
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bwcompat.RestoreBackwardsCompatIT",
  "startTimestamp": 1459403927545,
  "executionTime": 15554
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "displayName": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "children": [
    {
     "id": "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleUnknownIndex",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleWarmer",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleMapping",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleSettings",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testGetIndexWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleMixedFeatures",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleAlias",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testEmptyMixedFeatures",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403943113
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:03,528][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:03,738][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:03,887][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:03,969][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,016][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944020,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleWarmer(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944040,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944061,
  "executionTime": 56
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944118,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944127,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944175,
  "executionTime": 53
 }
]

[
 "TEST_STARTED",
 "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,255][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,279][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,292][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,316][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,336][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,353][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,372][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:04,399][WARN ][org.elasticsearch.gateway] [node_s0] [idx]: failed to write index state%0Ajava.lang.NullPointerException%0A%09at org.elasticsearch.common.xcontent.XContentBuilder.field(XContentBuilder.java:145)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:257)%0A%09at org.elasticsearch.search.warmer.IndexWarmersMetaData.toXContent(IndexWarmersMetaData.java:244)%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.toXContent(IndexMetaData.java:832)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:182)%0A%09at org.elasticsearch.gateway.MetaStateService$2.toXContent(MetaStateService.java:178)%0A%09at org.elasticsearch.gateway.MetaDataStateFormat.write(MetaDataStateFormat.java:120)%0A%09at org.elasticsearch.gateway.MetaStateService.writeIndex(MetaStateService.java:135)%0A%09at org.elasticsearch.gateway.GatewayMetaState.clusterChanged(GatewayMetaState.java:163)%0A%09at org.elasticsearch.gateway.Gateway.clusterChanged(Gateway.java:185)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:526)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:596)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944228,
  "executionTime": 173
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944401,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944415,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1459403944429,
  "executionTime": 39
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.get.GetIndexIT",
  "startTimestamp": 1459403943113,
  "executionTime": 1758
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.store.CorruptedTranslogIT",
   "displayName": "org.elasticsearch.index.store.CorruptedTranslogIT",
   "methodName": null,
   "className": "org.elasticsearch.index.store.CorruptedTranslogIT",
   "children": [
    {
     "id": "ID#testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)",
     "displayName": "testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)",
     "methodName": "testCorruptTranslogFiles",
     "className": "org.elasticsearch.index.store.CorruptedTranslogIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403944886
 }
]

[
 "TEST_STARTED",
 "ID#testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:05,118][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] wipe translog location - creating new translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:05,915][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,160][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=31921, numOps=414, translogFileGeneration= 1}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,171][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,182][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,193][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=kEJbWxGvSQi5q72XtZVa1A], unassigned_info[[reason=CLUSTER_RECOVERED], at[2016-03-31T05:59:06.070Z]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,238][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 2}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,239][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 2}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,247][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,248][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,250][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=dNyuXyhTQTCaNfl2YGh8aQ], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.194Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,281][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 3}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,282][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 3}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,283][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 3}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,292][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,293][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,295][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=EkL3SUGQTo6l7768yW6y0Q], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.251Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,323][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,324][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,325][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,325][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 4}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,335][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,336][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,338][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=9I8WyQhXRdSYf_FMaBJTYg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.296Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,408][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,409][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,410][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,410][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,411][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 5}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,421][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,424][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,425][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=zhFHLse6QRyGU_86q3yTzg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.339Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,458][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,459][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,459][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,460][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,461][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,461][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 6}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,474][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,476][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,477][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=BAM86aBtQyCsocbz3O-Kdw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.426Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,581][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 7}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,583][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 7}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,583][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 7}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,584][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 7}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,584][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 7}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,585][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 7}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,586][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 7}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,596][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,606][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,607][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=MdCFlzlPRtmqJ5b2rSkiWw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.478Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,682][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,683][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,683][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,684][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,684][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,685][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,686][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,686][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 8}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,697][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,708][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,710][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=h7yhpVEvToGcORbwT-KmCA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.608Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,774][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,775][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,775][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,776][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,776][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,777][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,778][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,780][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,780][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 9}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,791][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,808][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,809][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=dZdn0d8WRkKRAI6XZ_Grtg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.711Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,884][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,885][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,886][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,886][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,887][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,887][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,888][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,889][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,889][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,890][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 10}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,902][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,918][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:06,921][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=iaACmsugTcGu-H27HdmBiA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.811Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,002][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,003][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,004][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,005][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,006][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,006][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,007][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,007][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,008][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,009][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,010][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 11}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,024][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,034][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,036][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=YJjR-fw4QXaHNta_hi0Idg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:06.948Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,080][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] open uncommitted translog checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,081][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,081][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,082][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,083][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,084][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,085][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,085][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,086][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,086][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,087][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,090][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] recovered local translog from checkpoint Checkpoint{offset=43, numOps=0, translogFileGeneration= 12}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,105][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] translog closed%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,110][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test][0]] marking and sending shard failed due to [failed recovery]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:07,111][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard failed for [test][0], node[2acjjCBITLuazpOgb8cZMw], [P], v[3], s[INITIALIZING], a[id=Xp7wXp90TEqIs1TW24RoQQ], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-03-31T05:59:07.037Z], details[failed recovery, failure IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]], indexUUID [tY-1lpcwTDu_K1W4BTAKHA], message [failed recovery], failure [IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]; ]%0A[test][[test][0]] IndexShardRecoveryException[failed to recovery from gateway]; nested: EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:234)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$122(StoreRecovery.java:77)%0A%09at org.elasticsearch.index.shard.StoreRecovery$$Lambda$480/679343206.run(Unknown Source)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:75)%0A%09at org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1104)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$127(IndicesClusterStateService.java:637)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService$$Lambda$479/248889946.run(Unknown Source)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test][[test][0]] EngineCreationFailureException[failed to recover from translog]; nested: EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:156)%0A%09at org.elasticsearch.test.engine.MockInternalEngine.<init>(MockInternalEngine.java:36)%0A%09at org.elasticsearch.test.engine.MockEngineFactory.newReadWriteEngine(MockEngineFactory.java:45)%0A%09at org.elasticsearch.index.shard.IndexShard.newEngine(IndexShard.java:1435)%0A%09at org.elasticsearch.index.shard.IndexShard.createNewEngine(IndexShard.java:1430)%0A%09at org.elasticsearch.index.shard.IndexShard.internalPerformTranslogRecovery(IndexShard.java:860)%0A%09at org.elasticsearch.index.shard.IndexShard.performTranslogRecovery(IndexShard.java:838)%0A%09at org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:230)%0A%09... 10 more%0ACaused by: [test][[test][0]] EngineException[failed to recover from translog]; nested: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:231)%0A%09at org.elasticsearch.index.engine.InternalEngine.<init>(InternalEngine.java:153)%0A%09... 17 more%0ACaused by: TranslogCorruptedException[translog corruption while reading from stream]; nested: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428];%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1227)%0A%09at org.elasticsearch.index.translog.TranslogReader.read(TranslogReader.java:132)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.readOperation(TranslogReader.java:296)%0A%09at org.elasticsearch.index.translog.TranslogReader$ReaderSnapshot.next(TranslogReader.java:287)%0A%09at org.elasticsearch.index.translog.MultiSnapshot.next(MultiSnapshot.java:70)%0A%09at org.elasticsearch.index.engine.InternalEngine.recoverFromTranslog(InternalEngine.java:217)%0A%09... 18 more%0ACaused by: TranslogCorruptedException[translog stream is corrupted, expected: 0xad21bf6e, got: 0xc8468428]%0A%09at org.elasticsearch.index.translog.Translog.verifyChecksum(Translog.java:1185)%0A%09at org.elasticsearch.index.translog.Translog.readOperation(Translog.java:1217)%0A%09... 23 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCorruptTranslogFiles(org.elasticsearch.index.store.CorruptedTranslogIT)",
  "startTimestamp": 1459403944915,
  "executionTime": 2277
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.store.CorruptedTranslogIT",
  "startTimestamp": 1459403944886,
  "executionTime": 2318
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.routing.SimpleRoutingIT",
   "displayName": "org.elasticsearch.routing.SimpleRoutingIT",
   "methodName": null,
   "className": "org.elasticsearch.routing.SimpleRoutingIT",
   "children": [
    {
     "id": "ID#testSimpleCrudRouting(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testSimpleCrudRouting(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testSimpleCrudRouting",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    },
    {
     "id": "ID#testRequiredRoutingWithPathMappingBulk(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testRequiredRoutingWithPathMappingBulk(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testRequiredRoutingWithPathMappingBulk",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    },
    {
     "id": "ID#testRequiredRoutingMapping(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testRequiredRoutingMapping(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testRequiredRoutingMapping",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    },
    {
     "id": "ID#testRequiredRoutingWithPathNumericType(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testRequiredRoutingWithPathNumericType(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testRequiredRoutingWithPathNumericType",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    },
    {
     "id": "ID#testSimpleSearchRouting(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testSimpleSearchRouting(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testSimpleSearchRouting",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    },
    {
     "id": "ID#testRequiredRoutingBulk(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testRequiredRoutingBulk(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testRequiredRoutingBulk",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    },
    {
     "id": "ID#testRequiredRoutingWithPathMapping(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testRequiredRoutingWithPathMapping(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testRequiredRoutingWithPathMapping",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    },
    {
     "id": "ID#testRequiredRoutingMapping_variousAPIs(org.elasticsearch.routing.SimpleRoutingIT)",
     "displayName": "testRequiredRoutingMapping_variousAPIs(org.elasticsearch.routing.SimpleRoutingIT)",
     "methodName": "testRequiredRoutingMapping_variousAPIs",
     "className": "org.elasticsearch.routing.SimpleRoutingIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403947218
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleCrudRouting(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleCrudRouting(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403947243,
  "executionTime": 2347
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredRoutingWithPathMappingBulk(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredRoutingWithPathMappingBulk(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403949590,
  "executionTime": 829
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredRoutingMapping(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:10,582][WARN ][org.elasticsearch.action.index] [node_s0] unexpected error during the primary phase for action [indices:data/write/index], request [index {[test][type1][1], source[{\"field\":\"value1\"}]}]%0A[test] RoutingMissingException[routing is required for [test]/[type1]/[1]]%0A%09at org.elasticsearch.action.index.IndexRequest.process(IndexRequest.java:641)%0A%09at org.elasticsearch.action.index.TransportIndexAction.resolveRequest(TransportIndexAction.java:127)%0A%09at org.elasticsearch.action.index.TransportIndexAction.resolveRequest(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:421)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:130)%0A%09at org.elasticsearch.action.index.TransportIndexAction.innerExecute(TransportIndexAction.java:133)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:117)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$OperationTransportHandler.messageReceived(TransportReplicationAction.java:240)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$OperationTransportHandler.messageReceived(TransportReplicationAction.java:237)%0A%09at org.elasticsearch.transport.local.LocalTransport.handleRequest(LocalTransport.java:290)%0A%09at org.elasticsearch.transport.local.LocalTransport.messageReceived(LocalTransport.java:251)%0A%09at org.elasticsearch.transport.local.LocalTransport$1.run(LocalTransport.java:229)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:10,598][WARN ][org.elasticsearch.action.delete] [node_s0] unexpected error during the primary phase for action [indices:data/write/delete], request [delete {[test][type1][1]}]%0A[test] RoutingMissingException[routing is required for [test]/[type1]/[1]]%0A%09at org.elasticsearch.action.delete.TransportDeleteAction.resolveRequest(TransportDeleteAction.java:109)%0A%09at org.elasticsearch.action.delete.TransportDeleteAction.resolveRequest(TransportDeleteAction.java:53)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:421)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:130)%0A%09at org.elasticsearch.action.delete.TransportDeleteAction.innerExecute(TransportDeleteAction.java:118)%0A%09at org.elasticsearch.action.delete.TransportDeleteAction.doExecute(TransportDeleteAction.java:92)%0A%09at org.elasticsearch.action.delete.TransportDeleteAction.doExecute(TransportDeleteAction.java:53)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.client.node.NodeClient.doExecute(NodeClient.java:59)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.client.FilterClient.doExecute(FilterClient.java:52)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:337)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:60)%0A%09at org.elasticsearch.routing.SimpleRoutingIT.testRequiredRoutingMapping(SimpleRoutingIT.java:182)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredRoutingMapping(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403950419,
  "executionTime": 437
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredRoutingWithPathNumericType(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredRoutingWithPathNumericType(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403950856,
  "executionTime": 487
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleSearchRouting(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleSearchRouting(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403951343,
  "executionTime": 2479
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredRoutingBulk(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredRoutingBulk(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403953823,
  "executionTime": 1306
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredRoutingWithPathMapping(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:15,693][WARN ][org.elasticsearch.action.index] [node_s1] unexpected error during the primary phase for action [indices:data/write/index], request [index {[alias][type1][1], source[{\"field\":\"value1\",\"routing_field\":\"0\"}]}]%0AMapperParsingException[The provided routing value [1] doesn't match the routing key stored in the document: [0]]%0A%09at org.elasticsearch.action.index.IndexRequest.process(IndexRequest.java:618)%0A%09at org.elasticsearch.action.index.TransportIndexAction.resolveRequest(TransportIndexAction.java:127)%0A%09at org.elasticsearch.action.index.TransportIndexAction.resolveRequest(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:421)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:130)%0A%09at org.elasticsearch.action.index.TransportIndexAction.innerExecute(TransportIndexAction.java:133)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:117)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$OperationTransportHandler.messageReceived(TransportReplicationAction.java:240)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$OperationTransportHandler.messageReceived(TransportReplicationAction.java:237)%0A%09at org.elasticsearch.transport.local.LocalTransport.handleRequest(LocalTransport.java:290)%0A%09at org.elasticsearch.transport.local.LocalTransport.messageReceived(LocalTransport.java:251)%0A%09at org.elasticsearch.transport.local.LocalTransport$1.run(LocalTransport.java:229)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredRoutingWithPathMapping(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403955129,
  "executionTime": 786
 }
]

[
 "TEST_STARTED",
 "ID#testRequiredRoutingMapping_variousAPIs(org.elasticsearch.routing.SimpleRoutingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRequiredRoutingMapping_variousAPIs(org.elasticsearch.routing.SimpleRoutingIT)",
  "startTimestamp": 1459403955915,
  "executionTime": 1312
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.routing.SimpleRoutingIT",
  "startTimestamp": 1459403947218,
  "executionTime": 10034
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.TopHitsIT",
   "displayName": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
   "children": [
    {
     "id": "ID#testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testFieldCollapsing",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTopHitsInSecondLayerNested",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testPagination",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testBasicsGetProperty",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTopHitsInNested",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testIssue11119",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testInvalidSortField",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTopHitsInNestedSimple",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testFetchFeatures",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testSortByBucket",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testDontExplode",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testNestedFetchFeatures",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testBreadthFirst",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testTrackScores",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    },
    {
     "id": "ID#testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "displayName": "testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
     "methodName": "testEmptyIndex",
     "className": "org.elasticsearch.search.aggregations.metrics.TopHitsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403957276
 }
]

[
 "TEST_STARTED",
 "ID#testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldCollapsing(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403968106,
  "executionTime": 166
 }
]

[
 "TEST_STARTED",
 "ID#testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopHitsInSecondLayerNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403968272,
  "executionTime": 187
 }
]

[
 "TEST_STARTED",
 "ID#testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPagination(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403968459,
  "executionTime": 83
 }
]

[
 "TEST_STARTED",
 "ID#testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicsGetProperty(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403968542,
  "executionTime": 65
 }
]

[
 "TEST_STARTED",
 "ID#testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopHitsInNested(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403968607,
  "executionTime": 297
 }
]

[
 "TEST_STARTED",
 "ID#testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIssue11119(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403968904,
  "executionTime": 86
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403968991,
  "executionTime": 44
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidSortField(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969035,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTopHitsInNestedSimple(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969072,
  "executionTime": 74
 }
]

[
 "TEST_STARTED",
 "ID#testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969146,
  "executionTime": 307
 }
]

[
 "TEST_STARTED",
 "ID#testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortByBucket(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969454,
  "executionTime": 54
 }
]

[
 "TEST_STARTED",
 "ID#testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDontExplode(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969508,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedFetchFeatures(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969554,
  "executionTime": 112
 }
]

[
 "TEST_STARTED",
 "ID#testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreadthFirst(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969667,
  "executionTime": 38
 }
]

[
 "TEST_STARTED",
 "ID#testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTrackScores(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969705,
  "executionTime": 58
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyIndex(org.elasticsearch.search.aggregations.metrics.TopHitsIT)",
  "startTimestamp": 1459403969764,
  "executionTime": 67
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.TopHitsIT",
  "startTimestamp": 1459403957276,
  "executionTime": 16073
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
   "displayName": "org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
   "children": [
    {
     "id": "ID#testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)",
     "displayName": "testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)",
     "methodName": "testEnableRebalance",
     "className": "org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403973359
 }
]

[
 "TEST_STARTED",
 "ID#testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnableRebalance(org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT)",
  "startTimestamp": 1459403973384,
  "executionTime": 1359
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDeciderIT",
  "startTimestamp": 1459403973359,
  "executionTime": 1393
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "displayName": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "children": [
    {
     "id": "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
     "displayName": "testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
     "methodName": "testSimpleMultiSearch",
     "className": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403974762
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
  "startTimestamp": 1459403974787,
  "executionTime": 2034
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.msearch.SimpleMultiSearchIT",
  "startTimestamp": 1459403974762,
  "executionTime": 2080
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.scroll.DuelScrollIT",
   "displayName": "org.elasticsearch.search.scroll.DuelScrollIT",
   "methodName": null,
   "className": "org.elasticsearch.search.scroll.DuelScrollIT",
   "children": [
    {
     "id": "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelIndexOrderQueryAndFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelQueryAndFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelQueryThenFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelIndexOrderQueryThenFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403976854
 }
]

[
 "TEST_STARTED",
 "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459403976879,
  "executionTime": 1458
 }
]

[
 "TEST_STARTED",
 "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459403978338,
  "executionTime": 4231
 }
]

[
 "TEST_STARTED",
 "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459403982569,
  "executionTime": 1286
 }
]

[
 "TEST_STARTED",
 "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1459403983855,
  "executionTime": 2812
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.scroll.DuelScrollIT",
  "startTimestamp": 1459403976854,
  "executionTime": 9824
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.update.UpdateIT",
   "displayName": "org.elasticsearch.update.UpdateIT",
   "methodName": null,
   "className": "org.elasticsearch.update.UpdateIT",
   "children": [
    {
     "id": "ID#testScriptedUpsert(org.elasticsearch.update.UpdateIT)",
     "displayName": "testScriptedUpsert(org.elasticsearch.update.UpdateIT)",
     "methodName": "testScriptedUpsert",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testContextVariables(org.elasticsearch.update.UpdateIT)",
     "displayName": "testContextVariables(org.elasticsearch.update.UpdateIT)",
     "methodName": "testContextVariables",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpsert(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpsert(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpsert",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testNotUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testNotUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testNotUpsertDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpdateRequestWithScriptAndShouldUpsertDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)",
     "displayName": "testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)",
     "methodName": "testStressUpdateDeleteConcurrency",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testVersionedUpdate(org.elasticsearch.update.UpdateIT)",
     "displayName": "testVersionedUpdate(org.elasticsearch.update.UpdateIT)",
     "methodName": "testVersionedUpdate",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testIndexAutoCreation(org.elasticsearch.update.UpdateIT)",
     "displayName": "testIndexAutoCreation(org.elasticsearch.update.UpdateIT)",
     "methodName": "testIndexAutoCreation",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)",
     "displayName": "testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)",
     "methodName": "testConcurrentUpdateWithRetryOnConflict",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpdateRequestWithBothScriptAndDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpsertFields(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpsertFields(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpsertFields",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpsertDoc(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpsertDoc",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    },
    {
     "id": "ID#testUpdate(org.elasticsearch.update.UpdateIT)",
     "displayName": "testUpdate(org.elasticsearch.update.UpdateIT)",
     "methodName": "testUpdate",
     "className": "org.elasticsearch.update.UpdateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459403986692
 }
]

[
 "TEST_STARTED",
 "ID#testScriptedUpsert(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScriptedUpsert(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403986717,
  "executionTime": 1719
 }
]

[
 "TEST_STARTED",
 "ID#testContextVariables(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testContextVariables(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403988437,
  "executionTime": 429
 }
]

[
 "TEST_STARTED",
 "ID#testUpsert(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpsert(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403988867,
  "executionTime": 669
 }
]

[
 "TEST_STARTED",
 "ID#testNotUpsertDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotUpsertDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403989537,
  "executionTime": 592
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateRequestWithScriptAndShouldUpsertDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403990129,
  "executionTime": 852
 }
]

[
 "TEST_STARTED",
 "ID#testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:51,077][WARN ][org.elasticsearch.index.shard] [node_s2] [test][2] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:51,078][WARN ][org.elasticsearch.index.shard] [node_s1] [test][3] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:51,100][WARN ][org.elasticsearch.index.shard] [node_s1] [test][0] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:51,130][WARN ][org.elasticsearch.index.shard] [node_s0] [test][1] [index.merge.enabled] is set to false, this should only be used in tests and can cause serious problems in production environments%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:51,873][ERROR][org.elasticsearch.update ] Actual version [113] Expected version [113] Total failures [468]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:51,875][ERROR][org.elasticsearch.update ] Actual version [1] Expected version [1] Total failures [580]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 22:59:51,876][ERROR][org.elasticsearch.update ] Actual version [1] Expected version [1] Total failures [580]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStressUpdateDeleteConcurrency(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403990981,
  "executionTime": 1134
 }
]

[
 "TEST_STARTED",
 "ID#testVersionedUpdate(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVersionedUpdate(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403992115,
  "executionTime": 988
 }
]

[
 "TEST_STARTED",
 "ID#testIndexAutoCreation(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexAutoCreation(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403993104,
  "executionTime": 668
 }
]

[
 "TEST_STARTED",
 "ID#testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConcurrentUpdateWithRetryOnConflict(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403993772,
  "executionTime": 3450
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateRequestWithBothScriptAndDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403997222,
  "executionTime": 701
 }
]

[
 "TEST_STARTED",
 "ID#testUpsertFields(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpsertFields(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403997923,
  "executionTime": 1776
 }
]

[
 "TEST_STARTED",
 "ID#testUpsertDoc(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpsertDoc(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459403999700,
  "executionTime": 1025
 }
]

[
 "TEST_STARTED",
 "ID#testUpdate(org.elasticsearch.update.UpdateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdate(org.elasticsearch.update.UpdateIT)",
  "startTimestamp": 1459404000726,
  "executionTime": 1017
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.update.UpdateIT",
  "startTimestamp": 1459403986692,
  "executionTime": 15100
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
   "displayName": "org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
   "methodName": null,
   "className": "org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
   "children": [
    {
     "id": "ID#testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)",
     "displayName": "testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)",
     "methodName": "testDifferentPorts",
     "className": "org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404001819
 }
]

[
 "TEST_STARTED",
 "ID#testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:08,048][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{uIOckHIORRyya8hI65JsQQ}{127.0.0.1}{127.0.0.1:9441}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDifferentPorts(org.elasticsearch.transport.netty.NettyTransportPublishAddressIT)",
  "startTimestamp": 1459404001841,
  "executionTime": 6222
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.transport.netty.NettyTransportPublishAddressIT",
  "startTimestamp": 1459404001819,
  "executionTime": 6253
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.simple.SimpleSearchIT",
   "displayName": "org.elasticsearch.search.simple.SimpleSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.simple.SimpleSearchIT",
   "children": [
    {
     "id": "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeOkBySetting",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testInsaneFromAndSize",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSize",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSearchRandomPreference",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleId",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testLargeFromAndSizeSucceeds",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleDateRange",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testQueryNumericFieldWithRegex",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeBackwardsCompatibilityRecommendation",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSearchNullIndex",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeOkByDynamicSetting",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testLocaleDependentDate",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleIp",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleTerminateAfterCount",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testIpCidr",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404008086
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404008119,
  "executionTime": 2598
 }
]

[
 "TEST_STARTED",
 "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404010717,
  "executionTime": 1321
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404012039,
  "executionTime": 1220
 }
]

[
 "TEST_STARTED",
 "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404013259,
  "executionTime": 1745
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404015005,
  "executionTime": 1866
 }
]

[
 "TEST_STARTED",
 "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404016871,
  "executionTime": 2807
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404019678,
  "executionTime": 3089
 }
]

[
 "TEST_STARTED",
 "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404022767,
  "executionTime": 620
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404023387,
  "executionTime": 2875
 }
]

[
 "TEST_STARTED",
 "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404026262,
  "executionTime": 107
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404026369,
  "executionTime": 2660
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404029029,
  "executionTime": 1920
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404030950,
  "executionTime": 1834
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404032785,
  "executionTime": 1137
 }
]

[
 "TEST_STARTED",
 "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1459404033923,
  "executionTime": 1692
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.simple.SimpleSearchIT",
  "startTimestamp": 1459404008086,
  "executionTime": 27602
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
   "displayName": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
   "children": [
    {
     "id": "ID#testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testDeleteRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    },
    {
     "id": "ID#testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testPutRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    },
    {
     "id": "ID#testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testVerifyRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    },
    {
     "id": "ID#testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "displayName": "testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
     "methodName": "testGetRepositoryWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404035699
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459404035725,
  "executionTime": 345
 }
]

[
 "TEST_STARTED",
 "ID#testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:36,605][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [6]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:36,616][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [7]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459404036071,
  "executionTime": 570
 }
]

[
 "TEST_STARTED",
 "ID#testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testVerifyRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459404036641,
  "executionTime": 598
 }
]

[
 "TEST_STARTED",
 "ID#testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetRepositoryWithBlocks(org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT)",
  "startTimestamp": 1459404037240,
  "executionTime": 779
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.repositories.RepositoryBlocksIT",
  "startTimestamp": 1459404035699,
  "executionTime": 2441
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.tribe.TribeIT",
   "displayName": "org.elasticsearch.tribe.TribeIT",
   "methodName": null,
   "className": "org.elasticsearch.tribe.TribeIT",
   "children": [
    {
     "id": "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testTribeOnOneCluster",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testIndexWriteBlocks",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testCloseAndOpenIndex",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testOnConflictDrop",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testOnConflictPrefer",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testGlobalReadWriteBlocks",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404038154
 }
]

[
 "TEST_STARTED",
 "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:39,217][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459404038544,
  "executionTime": 4249
 }
]

[
 "TEST_STARTED",
 "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:44,339][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459404042793,
  "executionTime": 5349
 }
]

[
 "TEST_STARTED",
 "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:48,547][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459404048143,
  "executionTime": 3857
 }
]

[
 "TEST_STARTED",
 "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:53,545][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459404052000,
  "executionTime": 3781
 }
]

[
 "TEST_STARTED",
 "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:00:57,221][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459404055781,
  "executionTime": 4774
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:01:01,276][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1459404060555,
  "executionTime": 2304
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.tribe.TribeIT",
  "startTimestamp": 1459404038154,
  "executionTime": 24764
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.preference.SearchPreferenceIT",
   "displayName": "org.elasticsearch.search.preference.SearchPreferenceIT",
   "methodName": null,
   "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
   "children": [
    {
     "id": "ID#testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testThatSpecifyingNonExistingNodesReturnsUsefulError",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testSimplePreference",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testNoPreferenceRandom",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testStopOneNodePreferenceWithRedState",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    },
    {
     "id": "ID#testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "displayName": "testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
     "methodName": "testReplicaPreference",
     "className": "org.elasticsearch.search.preference.SearchPreferenceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404062929
 }
]

[
 "TEST_STARTED",
 "ID#testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatSpecifyingNonExistingNodesReturnsUsefulError(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459404062953,
  "executionTime": 2267
 }
]

[
 "TEST_STARTED",
 "ID#testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimplePreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459404065220,
  "executionTime": 1941
 }
]

[
 "TEST_STARTED",
 "ID#testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoPreferenceRandom(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459404067161,
  "executionTime": 886
 }
]

[
 "TEST_STARTED",
 "ID#testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStopOneNodePreferenceWithRedState(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459404068048,
  "executionTime": 662
 }
]

[
 "TEST_STARTED",
 "ID#testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicaPreference(org.elasticsearch.search.preference.SearchPreferenceIT)",
  "startTimestamp": 1459404068711,
  "executionTime": 1062
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.preference.SearchPreferenceIT",
  "startTimestamp": 1459404062929,
  "executionTime": 6891
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.state.SimpleIndexStateIT",
   "displayName": "org.elasticsearch.indices.state.SimpleIndexStateIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
   "children": [
    {
     "id": "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testConsistencyAfterIndexCreationFailure",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testSimpleOpenClose",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testFastCloseAfterCreateDoesNotClose",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404069829
 }
]

[
 "TEST_STARTED",
 "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1459404069851,
  "executionTime": 426
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:01:11,802][WARN ][org.elasticsearch.action.index] [node_s3] unexpected error during the primary phase for action [indices:data/write/index], request [index {[test][type1][1], source[{\"field1\":\"value1\"}]}]%0A[test] IndexClosedException[closed]%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:170)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:93)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteSingleIndex(IndexNameExpressionResolver.java:206)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:414)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:130)%0A%09at org.elasticsearch.action.index.TransportIndexAction.innerExecute(TransportIndexAction.java:133)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:117)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:70)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$OperationTransportHandler.messageReceived(TransportReplicationAction.java:240)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$OperationTransportHandler.messageReceived(TransportReplicationAction.java:237)%0A%09at org.elasticsearch.transport.local.LocalTransport.handleRequest(LocalTransport.java:290)%0A%09at org.elasticsearch.transport.local.LocalTransport.messageReceived(LocalTransport.java:251)%0A%09at org.elasticsearch.transport.local.LocalTransport$1.run(LocalTransport.java:229)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1459404070278,
  "executionTime": 3512
 }
]

[
 "TEST_STARTED",
 "ID#testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastCloseAfterCreateDoesNotClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1459404073791,
  "executionTime": 363
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:01:14,173][WARN ][org.elasticsearch.test.transport] [node_s1] Transport response handler not found of id [75]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.state.SimpleIndexStateIT",
  "startTimestamp": 1459404069829,
  "executionTime": 4389
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
   "displayName": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
   "methodName": null,
   "className": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
   "children": [
    {
     "id": "ID#testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "displayName": "testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "methodName": "testNodesInfos",
     "className": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
     "children": []
    },
    {
     "id": "ID#testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "displayName": "testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
     "methodName": "testAllocatedProcessors",
     "className": "org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404074231
 }
]

[
 "TEST_STARTED",
 "ID#testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodesInfos(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
  "startTimestamp": 1459404074253,
  "executionTime": 215
 }
]

[
 "TEST_STARTED",
 "ID#testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllocatedProcessors(org.elasticsearch.nodesinfo.SimpleNodesInfoIT)",
  "startTimestamp": 1459404074468,
  "executionTime": 267
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.nodesinfo.SimpleNodesInfoIT",
  "startTimestamp": 1459404074231,
  "executionTime": 518
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
   "displayName": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
   "children": [
    {
     "id": "ID#testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "displayName": "testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "methodName": "testExternalValuesWithMultifield",
     "className": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "displayName": "testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
     "methodName": "testExternalValues",
     "className": "org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404074769
 }
]

[
 "TEST_STARTED",
 "ID#testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalValuesWithMultifield(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
  "startTimestamp": 1459404074790,
  "executionTime": 2162
 }
]

[
 "TEST_STARTED",
 "ID#testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalValues(org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT)",
  "startTimestamp": 1459404076952,
  "executionTime": 3921
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.externalvalues.ExternalValuesMapperIntegrationIT",
  "startTimestamp": 1459404074769,
  "executionTime": 6133
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
   "displayName": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
   "children": [
    {
     "id": "ID#testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testDynamicUpdates",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithConflicts",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithNormsConflicts",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testPutMappingsWithBlocks",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingNoChanges",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingConcurrently",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateDefaultMappingSettings",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithoutTypeMultiObjects",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "displayName": "testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
     "methodName": "testUpdateMappingWithoutType",
     "className": "org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404080913
 }
]

[
 "TEST_STARTED",
 "ID#testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDynamicUpdates(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404080935,
  "executionTime": 15063
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404095998,
  "executionTime": 202
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithNormsConflicts(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404096200,
  "executionTime": 892
 }
]

[
 "TEST_STARTED",
 "ID#testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutMappingsWithBlocks(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404097093,
  "executionTime": 1703
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingNoChanges(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404098796,
  "executionTime": 341
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingConcurrently(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404099138,
  "executionTime": 7644
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateDefaultMappingSettings(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404106782,
  "executionTime": 411
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithoutTypeMultiObjects(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404107193,
  "executionTime": 100
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMappingWithoutType(org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT)",
  "startTimestamp": 1459404107294,
  "executionTime": 100
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.mapping.UpdateMappingIntegrationIT",
  "startTimestamp": 1459404080913,
  "executionTime": 26500
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.explain.ExplainActionIT",
   "displayName": "org.elasticsearch.explain.ExplainActionIT",
   "methodName": null,
   "className": "org.elasticsearch.explain.ExplainActionIT",
   "children": [
    {
     "id": "ID#testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWithFilteredAlias",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWithFields",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainDateRangeInQueryString",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testSimple(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWitSource",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testExplainWithFilteredAliasFetchSource",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    },
    {
     "id": "ID#testStreamExplain(org.elasticsearch.explain.ExplainActionIT)",
     "displayName": "testStreamExplain(org.elasticsearch.explain.ExplainActionIT)",
     "methodName": "testStreamExplain",
     "className": "org.elasticsearch.explain.ExplainActionIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404107421
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWithFilteredAlias(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459404107435,
  "executionTime": 841
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWithFields(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459404108277,
  "executionTime": 241
 }
]

[
 "TEST_STARTED",
 "ID#testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainDateRangeInQueryString(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459404108518,
  "executionTime": 351
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459404108870,
  "executionTime": 156
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWitSource(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459404109026,
  "executionTime": 241
 }
]

[
 "TEST_STARTED",
 "ID#testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplainWithFilteredAliasFetchSource(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459404109267,
  "executionTime": 363
 }
]

[
 "TEST_STARTED",
 "ID#testStreamExplain(org.elasticsearch.explain.ExplainActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStreamExplain(org.elasticsearch.explain.ExplainActionIT)",
  "startTimestamp": 1459404109630,
  "executionTime": 30
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.explain.ExplainActionIT",
  "startTimestamp": 1459404107421,
  "executionTime": 2257
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.AvgIT",
   "displayName": "org.elasticsearch.search.aggregations.metrics.AvgIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
   "children": [
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testSingleValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testSingleValuedFieldWithValueScript",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testScriptSingleValued(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testScriptSingleValued(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testScriptSingleValued",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testSingleValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testSingleValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testMultiValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testMultiValuedFieldWithValueScript",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testScriptSingleValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testScriptSingleValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testScriptSingleValuedWithParams",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testScriptMultiValued(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testScriptMultiValued(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testScriptMultiValued",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testSingleValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testSingleValuedFieldWithValueScriptWithParams",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testScriptMultiValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testScriptMultiValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testScriptMultiValuedWithParams",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField_WithFormatter(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testSingleValuedField_WithFormatter(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testSingleValuedField_WithFormatter",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testMultiValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testMultiValuedFieldWithValueScriptWithParams",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testSingleValuedFieldGetProperty",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testSingleValuedFieldPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "displayName": "testMultiValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)",
     "methodName": "testMultiValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.AvgIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404109699
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111297,
  "executionTime": 39
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111337,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111374,
  "executionTime": 65
 }
]

[
 "TEST_STARTED",
 "ID#testScriptSingleValued(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScriptSingleValued(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111440,
  "executionTime": 65
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111505,
  "executionTime": 70
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedFieldWithValueScript(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111575,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testScriptSingleValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScriptSingleValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111647,
  "executionTime": 76
 }
]

[
 "TEST_STARTED",
 "ID#testScriptMultiValued(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScriptMultiValued(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111723,
  "executionTime": 82
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111805,
  "executionTime": 60
 }
]

[
 "TEST_STARTED",
 "ID#testScriptMultiValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScriptMultiValuedWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111865,
  "executionTime": 109
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedField_WithFormatter(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedField_WithFormatter(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404111974,
  "executionTime": 126
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedFieldWithValueScriptWithParams(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404112100,
  "executionTime": 79
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldGetProperty(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404112179,
  "executionTime": 79
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedFieldPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404112259,
  "executionTime": 90
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.AvgIT)",
  "startTimestamp": 1459404112350,
  "executionTime": 76
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.AvgIT",
  "startTimestamp": 1459404109699,
  "executionTime": 3411
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.analyze.HunspellServiceIT",
   "displayName": "org.elasticsearch.indices.analyze.HunspellServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
   "children": [
    {
     "id": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testDicWithNoAff",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testLocaleDirectoryWithLocaleSpecificConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testLocaleDirectoryWithNodeLevelConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testDicWithTwoAffs",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404113120
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459404113141,
  "executionTime": 98
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459404113240,
  "executionTime": 3385
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459404116626,
  "executionTime": 1769
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:01:58,438][ERROR][org.elasticsearch.indices.analysis] [node_t0] exception while loading dictionary en_US%0Ajava.lang.IllegalStateException: failed to load hunspell dictionary for locale: en_US%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$92(HunspellService.java:87)%0A%09at org.elasticsearch.indices.analysis.HunspellService$$Lambda$11/1617779494.apply(Unknown Source)%0A%09at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)%0A%09at org.elasticsearch.indices.analysis.HunspellService.getDictionary(HunspellService.java:104)%0A%09at org.elasticsearch.indices.analysis.HunspellService.scanAndLoadDictionaries(HunspellService.java:128)%0A%09at org.elasticsearch.indices.analysis.HunspellService.<init>(HunspellService.java:91)%0A%09at org.elasticsearch.indices.analysis.AnalysisModule.configure(AnalysisModule.java:157)%0A%09at org.elasticsearch.common.inject.AbstractModule.configure(AbstractModule.java:59)%0A%09at org.elasticsearch.common.inject.spi.Elements$RecordingBinder.install(Elements.java:209)%0A%09at org.elasticsearch.common.inject.spi.Elements.getElements(Elements.java:79)%0A%09at org.elasticsearch.common.inject.InjectorShell$Builder.build(InjectorShell.java:148)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:99)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1456)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1449)%0A%09at org.elasticsearch.indices.analyze.HunspellServiceIT.testDicWithTwoAffs(HunspellServiceIT.java:101)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1660)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:866)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:902)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:916)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:875)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:777)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ElasticsearchException[Too many affix files exist for hunspell dictionary [en_US]]%0A%09at org.elasticsearch.indices.analysis.HunspellService.loadDictionary(HunspellService.java:170)%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$92(HunspellService.java:85)%0A%09... 58 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1459404118396,
  "executionTime": 144
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.analyze.HunspellServiceIT",
  "startTimestamp": 1459404113120,
  "executionTime": 5442
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
   "displayName": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
   "children": [
    {
     "id": "ID#testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedMultiSearchWithWrongQueryWithFunctionScore",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testDfsQueryThenFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryThenFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedMultiSearchWithWrongQuery",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testSimpleFacets",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedSearchWithWrongFrom",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testDfsQueryThenFetchWithSort",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testDfsQueryAndFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryThenFetchWithFrom",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryThenFetchWithSort",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testFailedSearchWithWrongQuery",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "displayName": "testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
     "methodName": "testQueryAndFetch",
     "className": "org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404118579
 }
]

[
 "TEST_STARTED",
 "ID#testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedMultiSearchWithWrongQueryWithFunctionScore(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404118603,
  "executionTime": 1861
 }
]

[
 "TEST_STARTED",
 "ID#testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfsQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404120465,
  "executionTime": 868
 }
]

[
 "TEST_STARTED",
 "ID#testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryThenFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404121334,
  "executionTime": 665
 }
]

[
 "TEST_STARTED",
 "ID#testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedMultiSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404121999,
  "executionTime": 1076
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleFacets(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404123075,
  "executionTime": 926
 }
]

[
 "TEST_STARTED",
 "ID#testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedSearchWithWrongFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404124001,
  "executionTime": 543
 }
]

[
 "TEST_STARTED",
 "ID#testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfsQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404124544,
  "executionTime": 878
 }
]

[
 "TEST_STARTED",
 "ID#testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfsQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404125422,
  "executionTime": 586
 }
]

[
 "TEST_STARTED",
 "ID#testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryThenFetchWithFrom(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404126008,
  "executionTime": 1063
 }
]

[
 "TEST_STARTED",
 "ID#testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryThenFetchWithSort(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404127071,
  "executionTime": 641
 }
]

[
 "TEST_STARTED",
 "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404127712,
  "executionTime": 594
 }
]

[
 "TEST_STARTED",
 "ID#testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryAndFetch(org.elasticsearch.search.basic.TransportTwoNodesSearchIT)",
  "startTimestamp": 1459404128307,
  "executionTime": 616
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.basic.TransportTwoNodesSearchIT",
  "startTimestamp": 1459404118579,
  "executionTime": 10378
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
   "displayName": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
   "methodName": null,
   "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
   "children": [
    {
     "id": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexUpgradeSingleNode",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testUpdate",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testRecoverFromPreviousVersion",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testNoRecoveryFromNewNodes",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testExistsFilter",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndicesStats",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testExternalVersion",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexAndSearch",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testInternalVersion",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testAnalyze",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexRollingUpgrade",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testGetTermVector",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testDeleteRoutingRequired",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testExplain",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testUnsupportedFeatures",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testMultiGet",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testScroll",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "displayName": "testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
     "methodName": "testIndexGetAndDelete",
     "className": "org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404128986
 }
]

[
 "TEST_STARTED",
 "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129018,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexUpgradeSingleNode(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129014,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129035,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdate(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129035,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129035,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverFromPreviousVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129035,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129036,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoRecoveryFromNewNodes(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129036,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129036,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistsFilter(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129036,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129036,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesStats(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129036,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129037,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129037,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129037,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexAndSearch(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129037,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129037,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInternalVersion(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129037,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129038,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAnalyze(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129038,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129038,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexRollingUpgrade(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129038,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129038,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetTermVector(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129038,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129039,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteRoutingRequired(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129038,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129039,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplain(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129039,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129039,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnsupportedFeatures(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129039,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129039,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiGet(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129039,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129040,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScroll(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129040,
  "executionTime": 0
 }
]

[
 "TEST_STARTED",
 "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129040,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:665)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:588)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexGetAndDelete(org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT)",
  "startTimestamp": 1459404129040,
  "executionTime": 0
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bwcompat.BasicBackwardsCompatibilityIT",
  "startTimestamp": 1459404128986,
  "executionTime": 54
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.SearchTimeoutIT",
   "displayName": "org.elasticsearch.search.SearchTimeoutIT",
   "methodName": null,
   "className": "org.elasticsearch.search.SearchTimeoutIT",
   "children": [
    {
     "id": "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
     "displayName": "testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
     "methodName": "testSimpleTimeout",
     "className": "org.elasticsearch.search.SearchTimeoutIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404129047
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
  "startTimestamp": 1459404129063,
  "executionTime": 1109
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.SearchTimeoutIT",
  "startTimestamp": 1459404129047,
  "executionTime": 1138
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.RejectionActionIT",
   "displayName": "org.elasticsearch.action.RejectionActionIT",
   "methodName": null,
   "className": "org.elasticsearch.action.RejectionActionIT",
   "children": [
    {
     "id": "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
     "displayName": "testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
     "methodName": "testSimulatedSearchRejectionLoad",
     "className": "org.elasticsearch.action.RejectionActionIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404130192
 }
]

[
 "TEST_STARTED",
 "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
  "startTimestamp": 1459404130205,
  "executionTime": 1239
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.RejectionActionIT",
  "startTimestamp": 1459404130192,
  "executionTime": 1272
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.MetaDataIT",
   "displayName": "org.elasticsearch.search.aggregations.MetaDataIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.MetaDataIT",
   "children": [
    {
     "id": "ID#testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)",
     "displayName": "testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)",
     "methodName": "testMetaDataSetOnAggregationResult",
     "className": "org.elasticsearch.search.aggregations.MetaDataIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404131478
 }
]

[
 "TEST_STARTED",
 "ID#testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetaDataSetOnAggregationResult(org.elasticsearch.search.aggregations.MetaDataIT)",
  "startTimestamp": 1459404131492,
  "executionTime": 1402
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.MetaDataIT",
  "startTimestamp": 1459404131478,
  "executionTime": 1436
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.NestedIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.NestedIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
   "children": [
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedWithSubTermsAgg",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNonExistingNestedField",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestNestedAggs",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedSameDocIdProcessedMultipleTime",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedOnObjectField",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testNestedAsSubAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    },
    {
     "id": "ID#testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "displayName": "testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)",
     "methodName": "testParentFilterResolvedCorrectly",
     "className": "org.elasticsearch.search.aggregations.bucket.NestedIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404132924
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133438,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedWithSubTermsAgg(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133449,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonExistingNestedField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133467,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestNestedAggs(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133485,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSameDocIdProcessedMultipleTime(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133508,
  "executionTime": 89
 }
]

[
 "TEST_STARTED",
 "ID#testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedOnObjectField(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133598,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedAsSubAggregation(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133610,
  "executionTime": 12
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133622,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParentFilterResolvedCorrectly(org.elasticsearch.search.aggregations.bucket.NestedIT)",
  "startTimestamp": 1459404133644,
  "executionTime": 204
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.NestedIT",
  "startTimestamp": 1459404132924,
  "executionTime": 1378
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.IndicesOptionsIntegrationIT",
   "displayName": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
   "children": [
    {
     "id": "ID#testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableSingleIndexThatIsClosed",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableSingleIndex",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testWildcardBehaviourSnapshotRestore",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteWarmerWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutAlias",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testCloseApiWildcards",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteIndexWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutAliasWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteWarmer",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableSnapshotRestore",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutWarmerWildcard",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testUpdateSettings",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testDeleteIndex",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testSpecifiedIndexUnavailableMultipleIndices",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutMapping",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testAllMissingStrict",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testWildcardBehaviour",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testAllMissingLenient",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testCloseApiSpecifiedIndices",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "displayName": "testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
     "methodName": "testPutWarmer",
     "className": "org.elasticsearch.indices.IndicesOptionsIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404134316
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableSingleIndexThatIsClosed(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404134334,
  "executionTime": 1169
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableSingleIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404135503,
  "executionTime": 998
 }
]

[
 "TEST_STARTED",
 "ID#testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:02:17,051][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap1] failed to restore snapshot%0A[bar*] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:115)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:02:23,460][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap3] failed to restore snapshot%0A[baz*] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:115)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWildcardBehaviourSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404136502,
  "executionTime": 9724
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404146226,
  "executionTime": 2973
 }
]

[
 "TEST_STARTED",
 "ID#testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutAlias(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404149199,
  "executionTime": 727
 }
]

[
 "TEST_STARTED",
 "ID#testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseApiWildcards(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404149926,
  "executionTime": 4156
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndexWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404154082,
  "executionTime": 5149
 }
]

[
 "TEST_STARTED",
 "ID#testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutAliasWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404159232,
  "executionTime": 3819
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404163052,
  "executionTime": 343
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:02:44,446][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap1] failed to restore snapshot%0A[test2] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:79)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:02:44,462][WARN ][org.elasticsearch.snapshots] [node_s0] [dummy-repo][snap1] failed to restore snapshot%0A[test2] IndexNotFoundException[no such index]%0A%09at org.elasticsearch.snapshots.SnapshotUtils.filterIndices(SnapshotUtils.java:79)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:157)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:160)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableSnapshotRestore(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404163395,
  "executionTime": 6470
 }
]

[
 "TEST_STARTED",
 "ID#testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutWarmerWildcard(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404169866,
  "executionTime": 1662
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateSettings(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404171529,
  "executionTime": 3894
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndex(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404175423,
  "executionTime": 397
 }
]

[
 "TEST_STARTED",
 "ID#testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSpecifiedIndexUnavailableMultipleIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404175821,
  "executionTime": 2796
 }
]

[
 "TEST_STARTED",
 "ID#testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutMapping(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404178617,
  "executionTime": 3258
 }
]

[
 "TEST_STARTED",
 "ID#testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllMissingStrict(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404181875,
  "executionTime": 812
 }
]

[
 "TEST_STARTED",
 "ID#testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWildcardBehaviour(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404182687,
  "executionTime": 1185
 }
]

[
 "TEST_STARTED",
 "ID#testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testAllMissingLenient(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404183872,
  "executionTime": 466
 }
]

[
 "TEST_STARTED",
 "ID#testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseApiSpecifiedIndices(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404184338,
  "executionTime": 1156
 }
]

[
 "TEST_STARTED",
 "ID#testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPutWarmer(org.elasticsearch.indices.IndicesOptionsIntegrationIT)",
  "startTimestamp": 1459404185494,
  "executionTime": 579
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.IndicesOptionsIntegrationIT",
  "startTimestamp": 1459404134316,
  "executionTime": 51966
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.script.ScriptFieldIT",
   "displayName": "org.elasticsearch.script.ScriptFieldIT",
   "methodName": null,
   "className": "org.elasticsearch.script.ScriptFieldIT",
   "children": [
    {
     "id": "ID#testNativeScript(org.elasticsearch.script.ScriptFieldIT)",
     "displayName": "testNativeScript(org.elasticsearch.script.ScriptFieldIT)",
     "methodName": "testNativeScript",
     "className": "org.elasticsearch.script.ScriptFieldIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404186288
 }
]

[
 "TEST_STARTED",
 "ID#testNativeScript(org.elasticsearch.script.ScriptFieldIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNativeScript(org.elasticsearch.script.ScriptFieldIT)",
  "startTimestamp": 1459404186300,
  "executionTime": 892
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.script.ScriptFieldIT",
  "startTimestamp": 1459404186288,
  "executionTime": 933
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "displayName": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "methodName": null,
   "className": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "children": [
    {
     "id": "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
     "displayName": "testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
     "methodName": "testNativeExplainScript",
     "className": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404187229
 }
]

[
 "TEST_STARTED",
 "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
  "startTimestamp": 1459404187244,
  "executionTime": 413
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.functionscore.ExplainableScriptIT",
  "startTimestamp": 1459404187229,
  "executionTime": 437
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.highlight.HighlighterSearchIT",
   "displayName": "org.elasticsearch.search.highlight.HighlighterSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
   "children": [
    {
     "id": "ID#testCommonTermsTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testCommonTermsTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testCommonTermsTermVector",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterRegexpQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterRegexpQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterRegexpQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightIssue1994(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightIssue1994(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightIssue1994",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMultiMapperNoVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMultiMapperNoVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMultiMapperNoVectorWithStore",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightUsesHighlightQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightUsesHighlightQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightUsesHighlightQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testEnsureNoNegativeOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testEnsureNoNegativeOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testEnsureNoNegativeOffsets",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterBoostingQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighTermFrequencyDoc(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighTermFrequencyDoc(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighTermFrequencyDoc",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMatchedFieldsFvhRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMatchedFieldsFvhRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMatchedFieldsFvhRequireFieldMatch",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testSourceLookupHighlightingUsingPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testSourceLookupHighlightingUsingPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testSourceLookupHighlightingUsingPlainHighlighter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPlainHighlighter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterCommonTermsQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testEscapeHtml",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFastVectorHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFastVectorHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFastVectorHighlighterManyDocs",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testNgramHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testNgramHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testNgramHighlighting",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPhrasePrefix(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPhrasePrefix(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPhrasePrefix",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterTermRangeQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterTermRangeQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterTermRangeQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterWildcardQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterWildcardQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterWildcardQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFastVectorHighlighterOffsetParameter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFastVectorHighlighterOffsetParameter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFastVectorHighlighterOffsetParameter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testResetTwice(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testResetTwice(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testResetTwice",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testBoostingQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightingWhenFieldsAreNotStoredThereIsNoSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightingWhenFieldsAreNotStoredThereIsNoSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightingWhenFieldsAreNotStoredThereIsNoSource",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testNumericHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testNumericHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testNumericHighlighting",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightingWithWildcardName(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightingWithWildcardName(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightingWithWildcardName",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFSHHighlightAllMvFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFSHHighlightAllMvFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFSHHighlightAllMvFragments",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterMultiMapperWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterMultiMapperWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterMultiMapperWithStore",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testSourceLookupHighlightingUsingPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testSourceLookupHighlightingUsingPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testSourceLookupHighlightingUsingPostingsHighlighter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterPrefixQueryWithinBooleanQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterPrefixQueryWithinBooleanQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterPrefixQueryWithinBooleanQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFastVectorHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFastVectorHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFastVectorHighlighterMultipleFields",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPlainHighlightDifferentFragmenter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPlainHighlightDifferentFragmenter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPlainHighlightDifferentFragmenter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterManyDocs",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testGlobalHighlightingSettingsOverriddenAtFieldLevel(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testGlobalHighlightingSettingsOverriddenAtFieldLevel(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testGlobalHighlightingSettingsOverriddenAtFieldLevel",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMultiMatchQueryHighlight(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMultiMatchQueryHighlight(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMultiMatchQueryHighlight",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFVHManyMatches(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFVHManyMatches(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFVHManyMatches",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFastVectorHighlighter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testSameContent(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testSameContent(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testSameContent",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterMultipleFields",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFastVectorHighlighterShouldFailIfNoTermVectors(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFastVectorHighlighterShouldFailIfNoTermVectors(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFastVectorHighlighterShouldFailIfNoTermVectors",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testCommonTermsQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterQueryStringWithinFilteredQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterQueryStringWithinFilteredQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterQueryStringWithinFilteredQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterRegexpQueryWithinConstantScoreQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterRegexpQueryWithinConstantScoreQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterRegexpQueryWithinConstantScoreQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testNgramHighlightingPreLucene42(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testNgramHighlightingPreLucene42(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testNgramHighlightingPreLucene42",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMultiMapperVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMultiMapperVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMultiMapperVectorFromSource",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightingOnWildcardFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightingOnWildcardFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightingOnWildcardFields",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testDisableFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testDisableFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testDisableFastVectorHighlighter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMatchedFieldsFvhNoRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMatchedFieldsFvhNoRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMatchedFieldsFvhNoRequireFieldMatch",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightNoMatchSize(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightNoMatchSize(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightNoMatchSize",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterMultiMapperFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterMultiMapperFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterMultiMapperFromSource",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterFuzzyQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterFuzzyQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterFuzzyQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPlainHighlighterWithLongUnanalyzedStringTerm(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPlainHighlighterWithLongUnanalyzedStringTerm(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPlainHighlighterWithLongUnanalyzedStringTerm",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterEscapeHtml",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterNumberOfFragments",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMultiMapperVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMultiMapperVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMultiMapperVectorWithStore",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterQueryString(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterQueryString(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterQueryString",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testBoostingQueryTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testBoostingQueryTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testBoostingQueryTermVector",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightNoMatchSizeWithMultivaluedFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightNoMatchSizeWithMultivaluedFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightNoMatchSizeWithMultivaluedFields",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMissingStoredField(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMissingStoredField(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMissingStoredField",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testHighlightNoMatchSizeNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testHighlightNoMatchSizeNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testHighlightNoMatchSizeNumberOfFragments",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterMultiTermQueryMultipleLevels(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterMultiTermQueryMultipleLevels(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterMultiTermQueryMultipleLevels",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterShouldFailIfNoOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterShouldFailIfNoOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterShouldFailIfNoOffsets",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterOrderByScore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterOrderByScore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterOrderByScore",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testFastVectorHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testFastVectorHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testFastVectorHighlighterPhraseBoost",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterPrefixQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterPrefixQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterPrefixQuery",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMultiMapperNoVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMultiMapperNoVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMultiMapperNoVectorFromSource",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testMultiPhraseCutoff(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testMultiPhraseCutoff(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testMultiPhraseCutoff",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testNgramHighlightingWithBrokenPositions(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testNgramHighlightingWithBrokenPositions(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testNgramHighlightingWithBrokenPositions",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPlainHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPlainHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPlainHighlighterMultipleFields",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testPostingsHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testPostingsHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testPostingsHighlighterPhraseBoost",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testForceSourceWithSourceDisabled(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testForceSourceWithSourceDisabled(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testForceSourceWithSourceDisabled",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testSourceLookupHighlightingUsingFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testSourceLookupHighlightingUsingFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testSourceLookupHighlightingUsingFastVectorHighlighter",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    },
    {
     "id": "ID#testEscapeHtmlVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "displayName": "testEscapeHtmlVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
     "methodName": "testEscapeHtmlVector",
     "className": "org.elasticsearch.search.highlight.HighlighterSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404187705
 }
]

[
 "TEST_STARTED",
 "ID#testCommonTermsTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:03:07,850][WARN ][org.elasticsearch.cluster.metadata] [node_s0] [test] re-syncing mappings with cluster state because of types [[_default_]]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCommonTermsTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404187732,
  "executionTime": 238
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterRegexpQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterRegexpQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404187970,
  "executionTime": 211
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightIssue1994(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightIssue1994(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404188181,
  "executionTime": 635
 }
]

[
 "TEST_STARTED",
 "ID#testMultiMapperNoVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiMapperNoVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404188816,
  "executionTime": 456
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightUsesHighlightQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightUsesHighlightQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404189273,
  "executionTime": 572
 }
]

[
 "TEST_STARTED",
 "ID#testEnsureNoNegativeOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEnsureNoNegativeOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404189845,
  "executionTime": 392
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404190237,
  "executionTime": 300
 }
]

[
 "TEST_STARTED",
 "ID#testHighTermFrequencyDoc(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighTermFrequencyDoc(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404190537,
  "executionTime": 775
 }
]

[
 "TEST_STARTED",
 "ID#testMatchedFieldsFvhRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchedFieldsFvhRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404191312,
  "executionTime": 975
 }
]

[
 "TEST_STARTED",
 "ID#testSourceLookupHighlightingUsingPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceLookupHighlightingUsingPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404192288,
  "executionTime": 529
 }
]

[
 "TEST_STARTED",
 "ID#testPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPlainHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404192817,
  "executionTime": 529
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404193346,
  "executionTime": 258
 }
]

[
 "TEST_STARTED",
 "ID#testEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404193604,
  "executionTime": 787
 }
]

[
 "TEST_STARTED",
 "ID#testFastVectorHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:03:14,508][WARN ][org.elasticsearch.cluster.metadata] [node_s0] [test] re-syncing mappings with cluster state because of types [[_default_]]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastVectorHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404194392,
  "executionTime": 1094
 }
]

[
 "TEST_STARTED",
 "ID#testNgramHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNgramHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404195486,
  "executionTime": 669
 }
]

[
 "TEST_STARTED",
 "ID#testPhrasePrefix(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:03:16,286][WARN ][org.elasticsearch.cluster.metadata] [node_s0] [test] re-syncing mappings with cluster state because of types [[_default_]]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPhrasePrefix(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404196155,
  "executionTime": 576
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterTermRangeQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterTermRangeQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404196732,
  "executionTime": 398
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterWildcardQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterWildcardQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404197130,
  "executionTime": 166
 }
]

[
 "TEST_STARTED",
 "ID#testFastVectorHighlighterOffsetParameter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastVectorHighlighterOffsetParameter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404197296,
  "executionTime": 520
 }
]

[
 "TEST_STARTED",
 "ID#testResetTwice(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResetTwice(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404197816,
  "executionTime": 208
 }
]

[
 "TEST_STARTED",
 "ID#testBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBoostingQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404198024,
  "executionTime": 141
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightingWhenFieldsAreNotStoredThereIsNoSource(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightingWhenFieldsAreNotStoredThereIsNoSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404198165,
  "executionTime": 275
 }
]

[
 "TEST_STARTED",
 "ID#testNumericHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNumericHighlighting(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404198440,
  "executionTime": 269
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightingWithWildcardName(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightingWithWildcardName(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404198710,
  "executionTime": 523
 }
]

[
 "TEST_STARTED",
 "ID#testFSHHighlightAllMvFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFSHHighlightAllMvFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404199233,
  "executionTime": 438
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterMultiMapperWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterMultiMapperWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404199671,
  "executionTime": 204
 }
]

[
 "TEST_STARTED",
 "ID#testSourceLookupHighlightingUsingPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceLookupHighlightingUsingPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404199875,
  "executionTime": 853
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterPrefixQueryWithinBooleanQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterPrefixQueryWithinBooleanQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404200728,
  "executionTime": 354
 }
]

[
 "TEST_STARTED",
 "ID#testFastVectorHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastVectorHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404201083,
  "executionTime": 327
 }
]

[
 "TEST_STARTED",
 "ID#testPlainHighlightDifferentFragmenter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPlainHighlightDifferentFragmenter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404201410,
  "executionTime": 324
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterManyDocs(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404201734,
  "executionTime": 1919
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalHighlightingSettingsOverriddenAtFieldLevel(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalHighlightingSettingsOverriddenAtFieldLevel(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404203654,
  "executionTime": 636
 }
]

[
 "TEST_STARTED",
 "ID#testMultiMatchQueryHighlight(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:03:24,439][WARN ][org.elasticsearch.cluster.metadata] [node_s0] [test] re-syncing mappings with cluster state because of types [[_default_]]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiMatchQueryHighlight(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404204290,
  "executionTime": 636
 }
]

[
 "TEST_STARTED",
 "ID#testFVHManyMatches(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:03:25,143][WARN ][org.elasticsearch.cluster.metadata] [node_s0] [test] re-syncing mappings with cluster state because of types [[_default_]]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFVHManyMatches(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404204926,
  "executionTime": 19138
 }
]

[
 "TEST_STARTED",
 "ID#testFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-03-30 23:03:44,264][WARN ][org.elasticsearch.cluster.metadata] [node_s0] [test] re-syncing mappings with cluster state because of types [[_default_]]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404224064,
  "executionTime": 887
 }
]

[
 "TEST_STARTED",
 "ID#testSameContent(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSameContent(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404224951,
  "executionTime": 1477
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404226428,
  "executionTime": 967
 }
]

[
 "TEST_STARTED",
 "ID#testFastVectorHighlighterShouldFailIfNoTermVectors(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastVectorHighlighterShouldFailIfNoTermVectors(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404227395,
  "executionTime": 1385
 }
]

[
 "TEST_STARTED",
 "ID#testCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCommonTermsQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404228780,
  "executionTime": 372
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterQueryStringWithinFilteredQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterQueryStringWithinFilteredQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404229153,
  "executionTime": 506
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterRegexpQueryWithinConstantScoreQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterRegexpQueryWithinConstantScoreQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404229659,
  "executionTime": 496
 }
]

[
 "TEST_STARTED",
 "ID#testNgramHighlightingPreLucene42(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNgramHighlightingPreLucene42(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404230155,
  "executionTime": 919
 }
]

[
 "TEST_STARTED",
 "ID#testMultiMapperVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiMapperVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404231074,
  "executionTime": 811
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightingOnWildcardFields(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightingOnWildcardFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404231885,
  "executionTime": 220
 }
]

[
 "TEST_STARTED",
 "ID#testDisableFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDisableFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404232105,
  "executionTime": 382
 }
]

[
 "TEST_STARTED",
 "ID#testMatchedFieldsFvhNoRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMatchedFieldsFvhNoRequireFieldMatch(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404232487,
  "executionTime": 647
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightNoMatchSize(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightNoMatchSize(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404233134,
  "executionTime": 852
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterMultiMapperFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterMultiMapperFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404233986,
  "executionTime": 644
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterFuzzyQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterFuzzyQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404234631,
  "executionTime": 638
 }
]

[
 "TEST_STARTED",
 "ID#testPlainHighlighterWithLongUnanalyzedStringTerm(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPlainHighlighterWithLongUnanalyzedStringTerm(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404235269,
  "executionTime": 949
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterEscapeHtml(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404236218,
  "executionTime": 758
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404236976,
  "executionTime": 573
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404237549,
  "executionTime": 416
 }
]

[
 "TEST_STARTED",
 "ID#testMultiMapperVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiMapperVectorWithStore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404237965,
  "executionTime": 550
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterQueryString(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterQueryString(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404238515,
  "executionTime": 679
 }
]

[
 "TEST_STARTED",
 "ID#testBoostingQueryTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testBoostingQueryTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404239195,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testBoostingQueryTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "message": "'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=Broken now that BoostingQuery does not extend BooleanQuery anymore))",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=Broken now that BoostingQuery does not extend BooleanQuery anymore))\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$400(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:763)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=Broken now that BoostingQuery does not extend BooleanQuery anymore))",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBoostingQueryTermVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404239194,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightNoMatchSizeWithMultivaluedFields(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightNoMatchSizeWithMultivaluedFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404239195,
  "executionTime": 682
 }
]

[
 "TEST_STARTED",
 "ID#testMissingStoredField(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingStoredField(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404239877,
  "executionTime": 616
 }
]

[
 "TEST_STARTED",
 "ID#testHighlightNoMatchSizeNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHighlightNoMatchSizeNumberOfFragments(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404240493,
  "executionTime": 1124
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterMultiTermQueryMultipleLevels(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterMultiTermQueryMultipleLevels(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404241617,
  "executionTime": 904
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterShouldFailIfNoOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterShouldFailIfNoOffsets(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404242522,
  "executionTime": 695
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterOrderByScore(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterOrderByScore(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404243217,
  "executionTime": 659
 }
]

[
 "TEST_STARTED",
 "ID#testFastVectorHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testFastVectorHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404243876,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testFastVectorHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "message": "'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=Broken now that BoostingQuery does not extend BooleanQuery anymore))",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=Broken now that BoostingQuery does not extend BooleanQuery anymore))\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1231)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$400(RandomizedRunner.java:141)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:763)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:811)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:822)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=Broken now that BoostingQuery does not extend BooleanQuery anymore))",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastVectorHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404243876,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterPrefixQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterPrefixQuery(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404243878,
  "executionTime": 728
 }
]

[
 "TEST_STARTED",
 "ID#testMultiMapperNoVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiMapperNoVectorFromSource(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404244606,
  "executionTime": 609
 }
]

[
 "TEST_STARTED",
 "ID#testMultiPhraseCutoff(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiPhraseCutoff(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404245215,
  "executionTime": 665
 }
]

[
 "TEST_STARTED",
 "ID#testNgramHighlightingWithBrokenPositions(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNgramHighlightingWithBrokenPositions(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404245880,
  "executionTime": 383
 }
]

[
 "TEST_STARTED",
 "ID#testPlainHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPlainHighlighterMultipleFields(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404246263,
  "executionTime": 927
 }
]

[
 "TEST_STARTED",
 "ID#testPostingsHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPostingsHighlighterPhraseBoost(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404247190,
  "executionTime": 1583
 }
]

[
 "TEST_STARTED",
 "ID#testForceSourceWithSourceDisabled(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testForceSourceWithSourceDisabled(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404248773,
  "executionTime": 496
 }
]

[
 "TEST_STARTED",
 "ID#testSourceLookupHighlightingUsingFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceLookupHighlightingUsingFastVectorHighlighter(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404249269,
  "executionTime": 1567
 }
]

[
 "TEST_STARTED",
 "ID#testEscapeHtmlVector(org.elasticsearch.search.highlight.HighlighterSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEscapeHtmlVector(org.elasticsearch.search.highlight.HighlighterSearchIT)",
  "startTimestamp": 1459404250837,
  "executionTime": 1448
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.highlight.HighlighterSearchIT",
  "startTimestamp": 1459404187705,
  "executionTime": 64630
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.broadcast.BroadcastActionsIT",
   "displayName": "org.elasticsearch.broadcast.BroadcastActionsIT",
   "methodName": null,
   "className": "org.elasticsearch.broadcast.BroadcastActionsIT",
   "children": [
    {
     "id": "ID#testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)",
     "displayName": "testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)",
     "methodName": "testBroadcastOperations",
     "className": "org.elasticsearch.broadcast.BroadcastActionsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404252345
 }
]

[
 "TEST_STARTED",
 "ID#testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBroadcastOperations(org.elasticsearch.broadcast.BroadcastActionsIT)",
  "startTimestamp": 1459404252364,
  "executionTime": 1226
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.broadcast.BroadcastActionsIT",
  "startTimestamp": 1459404252345,
  "executionTime": 1263
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
   "displayName": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
   "children": [
    {
     "id": "ID#testSingleValuedField_getProperty(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedField_getProperty(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedField_getProperty",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldNearDateLine(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldNearDateLine(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldNearDateLine",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldWithZeroLon(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldWithZeroLon(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldWithZeroLon",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldNearDateLineWrapLongitude(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldNearDateLineWrapLongitude(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldNearDateLineWrapLongitude",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedFieldAsSubAggToHighCardTermsAgg(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testSingleValuedFieldAsSubAggToHighCardTermsAgg(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testSingleValuedFieldAsSubAggToHighCardTermsAgg",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    },
    {
     "id": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "displayName": "testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoBoundsIT)",
     "methodName": "testMultiValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoBoundsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1459404253638
 }
]

